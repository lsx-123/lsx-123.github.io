{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Talentaylor's Page Welcome to Talentaylor's Page!","title":"Talentaylor's Page"},{"location":"#talentaylors-page","text":"Welcome to Talentaylor's Page!","title":"Talentaylor's Page"},{"location":"about_me/","text":"","title":"\u5173\u4e8e\u6211"},{"location":"interests/build_blog/","text":"\u535a\u5ba2\u642d\u5efa\u8bf4\u660e \u5b89\u88c5\u6784\u5efa\u73af\u5883 \u9996\u5148\u8bf7\u5b89\u88c5Python\uff0c2\u548c3\u90fd\u53ef\u4ee5\uff0c\u4e4b\u540e\u521d\u59cb\u5316\u73af\u5883\uff1a $ pip install mkdocs $ python setup.py install \u5b89\u88c5\u548c\u4f7f\u7528 Yeti \u4e3b\u9898\uff0c mkdocs.yml \u5185\u4fee\u6539 theme: Yeti $ pip install mkdocs-bootswatch \u5199\u535a\u5ba2 \u521b\u5efa\u65b0\u9879\u76ee $ mkdocs new [dir-name] \u9879\u76ee\u5e03\u5c40 mkdocs.yml # The configuration file. docs/ \u200b index.md # The documentation homepage. \u200b ... # Other markdown pages, images and other files. \u8fdb\u5165\u6587\u4ef6\u5939\u5185\u5199\u535a\u5ba2 $ gvim [dir-name]\\docs\\myblog.md \u8c03\u6574\u914d\u7f6e $ gvim mkdocs.yml \u67e5\u770b\u5e2e\u52a9 mkdocs help \u6784\u5efa\u7f51\u9875 \u521d\u59cb\u5316\u4ee5\u540e\uff0c\u6bcf\u6b21\u6784\u5efa\u53ea\u9700\u8981\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\uff0c\u6784\u5efa\u540e\u7684\u6587\u4ef6\u5728 site \u6587\u4ef6\u5939\u5185\uff1a $ mkdocs build \u5982\u679c\u53ea\u662f\u60f3\u6d4b\u8bd5\u7684\u8bdd\uff0c\u8bf7\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a $ mkdocs serve \u90e8\u7f72\u7684\u7f51\u9875\u53ef\u4ee5\u901a\u8fc7 127.0.0.1:8000 \u6216\u8005 localhost:8000 \u6765\u8bbf\u95ee\u3002 \u53c2\u8003\u7f51\u7ad9 [1] Bioinformatics: https://replikation.github.io/bioinformatics_side/tools/mkdocs/ [2] LearnOpenGL: https://learnopengl-cn.github.io/","title":"blog"},{"location":"interests/build_blog/#_1","text":"","title":"\u535a\u5ba2\u642d\u5efa\u8bf4\u660e"},{"location":"interests/build_blog/#_2","text":"\u9996\u5148\u8bf7\u5b89\u88c5Python\uff0c2\u548c3\u90fd\u53ef\u4ee5\uff0c\u4e4b\u540e\u521d\u59cb\u5316\u73af\u5883\uff1a $ pip install mkdocs $ python setup.py install \u5b89\u88c5\u548c\u4f7f\u7528 Yeti \u4e3b\u9898\uff0c mkdocs.yml \u5185\u4fee\u6539 theme: Yeti $ pip install mkdocs-bootswatch","title":"\u5b89\u88c5\u6784\u5efa\u73af\u5883"},{"location":"interests/build_blog/#_3","text":"\u521b\u5efa\u65b0\u9879\u76ee $ mkdocs new [dir-name] \u9879\u76ee\u5e03\u5c40 mkdocs.yml # The configuration file. docs/ \u200b index.md # The documentation homepage. \u200b ... # Other markdown pages, images and other files. \u8fdb\u5165\u6587\u4ef6\u5939\u5185\u5199\u535a\u5ba2 $ gvim [dir-name]\\docs\\myblog.md \u8c03\u6574\u914d\u7f6e $ gvim mkdocs.yml \u67e5\u770b\u5e2e\u52a9 mkdocs help","title":"\u5199\u535a\u5ba2"},{"location":"interests/build_blog/#_4","text":"\u521d\u59cb\u5316\u4ee5\u540e\uff0c\u6bcf\u6b21\u6784\u5efa\u53ea\u9700\u8981\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\u5373\u53ef\uff0c\u6784\u5efa\u540e\u7684\u6587\u4ef6\u5728 site \u6587\u4ef6\u5939\u5185\uff1a $ mkdocs build \u5982\u679c\u53ea\u662f\u60f3\u6d4b\u8bd5\u7684\u8bdd\uff0c\u8bf7\u8f93\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a $ mkdocs serve \u90e8\u7f72\u7684\u7f51\u9875\u53ef\u4ee5\u901a\u8fc7 127.0.0.1:8000 \u6216\u8005 localhost:8000 \u6765\u8bbf\u95ee\u3002","title":"\u6784\u5efa\u7f51\u9875"},{"location":"interests/build_blog/#_5","text":"[1] Bioinformatics: https://replikation.github.io/bioinformatics_side/tools/mkdocs/ [2] LearnOpenGL: https://learnopengl-cn.github.io/","title":"\u53c2\u8003\u7f51\u7ad9"},{"location":"interests/markdown/","text":"Headings # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 H1 H2 H3 H4 H5 H6 Paragraphs This is a paragraph. I am still part of the paragraph. New paragraph. This is a paragraph. I am still part of the paragraph. New paragraph. Image Web Image ![Web Image](https://i.loli.net/2019/04/13/5cb1d33cf0ee6.jpg) Local Image ![Local Image](100.jpg) Web Image Local Image Block Quotes > This is a block quote This is a block quote Code Blocks ```javascript // Fenced **with** highlighting function doIt() { for (var i = 1; i <= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ``` function doIt() { for (var i = 1; i <= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } Tables | Colors | Fruits | Vegetable | | ------------- |:---------------:| -----------------:| | Red | *Apple* | [Pepper](#Tables) | | ~~Orange~~ | Oranges | **Carrot** | | Green | ~~***Pears***~~ | Spinach | Colors Fruits Vegetable Red Apple Pepper ~~Orange~~ Oranges Carrot Green ~~ Pears ~~ Spinach List Types Ordered List 1. First item 2. Second item 3. Third item First item Second item Third item Unordered List - First item - Second item - Third item First item Second item Third item Math $$ evidence\\_{i}=\\sum\\_{j}W\\_{ij}x\\_{j}+b\\_{i} $$ $$ AveP = \\int_0^1 p(r) dr $$ When $a \\ne 0$, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ $$ evidence_{i}=\\sum_{j}W_{ij}x_{j}+b_{i} $$ $$ AveP = \\int_0^1 p(r) dr $$ When $a \\ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ Emoji This is a test for emoji. :smile: :see_no_evil: :smile_cat: :watermelon:","title":"Markdown"},{"location":"interests/markdown/#headings","text":"# H1 ## H2 ### H3 #### H4 ##### H5 ###### H6","title":"Headings"},{"location":"interests/markdown/#h1","text":"","title":"H1"},{"location":"interests/markdown/#h2","text":"","title":"H2"},{"location":"interests/markdown/#h3","text":"","title":"H3"},{"location":"interests/markdown/#h4","text":"","title":"H4"},{"location":"interests/markdown/#h5","text":"","title":"H5"},{"location":"interests/markdown/#h6","text":"","title":"H6"},{"location":"interests/markdown/#paragraphs","text":"This is a paragraph. I am still part of the paragraph. New paragraph. This is a paragraph. I am still part of the paragraph. New paragraph.","title":"Paragraphs"},{"location":"interests/markdown/#image","text":"Web Image ![Web Image](https://i.loli.net/2019/04/13/5cb1d33cf0ee6.jpg) Local Image ![Local Image](100.jpg) Web Image Local Image","title":"Image"},{"location":"interests/markdown/#block-quotes","text":"> This is a block quote This is a block quote","title":"Block Quotes"},{"location":"interests/markdown/#code-blocks","text":"```javascript // Fenced **with** highlighting function doIt() { for (var i = 1; i <= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } } ``` function doIt() { for (var i = 1; i <= slen ; i^^) { setTimeout(\"document.z.textdisplay.value = newMake()\", i*300); setTimeout(\"window.status = newMake()\", i*300); } }","title":"Code Blocks"},{"location":"interests/markdown/#tables","text":"| Colors | Fruits | Vegetable | | ------------- |:---------------:| -----------------:| | Red | *Apple* | [Pepper](#Tables) | | ~~Orange~~ | Oranges | **Carrot** | | Green | ~~***Pears***~~ | Spinach | Colors Fruits Vegetable Red Apple Pepper ~~Orange~~ Oranges Carrot Green ~~ Pears ~~ Spinach","title":"Tables"},{"location":"interests/markdown/#list-types","text":"","title":"List Types"},{"location":"interests/markdown/#ordered-list","text":"1. First item 2. Second item 3. Third item First item Second item Third item","title":"Ordered List"},{"location":"interests/markdown/#unordered-list","text":"- First item - Second item - Third item First item Second item Third item","title":"Unordered List"},{"location":"interests/markdown/#math","text":"$$ evidence\\_{i}=\\sum\\_{j}W\\_{ij}x\\_{j}+b\\_{i} $$ $$ AveP = \\int_0^1 p(r) dr $$ When $a \\ne 0$, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ $$ evidence_{i}=\\sum_{j}W_{ij}x_{j}+b_{i} $$ $$ AveP = \\int_0^1 p(r) dr $$ When $a \\ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$","title":"Math"},{"location":"interests/markdown/#emoji","text":"This is a test for emoji. :smile: :see_no_evil: :smile_cat: :watermelon:","title":"Emoji"},{"location":"interests/git/git/","text":"\u5b89\u88c5\u4e0e\u914d\u7f6e \u5b89\u88c5 Windows\u4e0a\u5b89\u88c5Git\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u4e0b\u8f7d\u5e76\u5b89\u88c5 Git\u5b89\u88c5\u7a0b\u5e8f \uff0c\u6309\u9ed8\u8ba4\u9009\u9879\u5b89\u88c5\u5373\u53ef\u3002\u5b89\u88c5\u6210\u529f\u540e\uff0c\u5728\u4efb\u610f\u6587\u4ef6\u5939\u4e0b\u53f3\u952e\u83dc\u5355\u4e2d\u53ef\u4ee5\u770b\u5230 Git Bash Here \u548c Git GUI Here \u3002 \u7528\u6237\u914d\u7f6e Git \u81ea\u5e26\u4e00\u4e2a git config \u7684\u5de5\u5177\u6765\u5e2e\u52a9\u8bbe\u7f6e\u63a7\u5236 Git \u5916\u89c2\u548c\u884c\u4e3a\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5b58\u50a8\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\uff1a /etc/gitconfig \u6587\u4ef6: \u5305\u542b\u7cfb\u7edf\u4e0a\u6bcf\u4e00\u4e2a\u7528\u6237\u53ca\u4ed6\u4eec\u4ed3\u5e93\u7684\u901a\u7528\u914d\u7f6e\u3002 \u5982\u679c\u4f7f\u7528\u5e26\u6709 --system \u9009\u9879\u7684 git config \u65f6\uff0c\u5b83\u4f1a\u4ece\u6b64\u6587\u4ef6\u8bfb\u5199\u914d\u7f6e\u53d8\u91cf\u3002 ~/.gitconfig \u6216 ~/.config/git/config \u6587\u4ef6\uff1a\u53ea\u9488\u5bf9\u5f53\u524d\u7528\u6237\u3002 \u53ef\u4ee5\u4f20\u9012 --global \u9009\u9879\u8ba9 Git \u8bfb\u5199\u6b64\u6587\u4ef6\u3002 \u5f53\u524d\u4f7f\u7528\u4ed3\u5e93\u7684 Git \u76ee\u5f55\u4e2d\u7684 config \u6587\u4ef6\uff08\u5c31\u662f .git/config\uff09\uff1a\u9488\u5bf9\u8be5\u4ed3\u5e93\u3002 \u6bcf\u4e00\u4e2a\u7ea7\u522b\u8986\u76d6\u4e0a\u4e00\u7ea7\u522b\u7684\u914d\u7f6e\uff0c\u6240\u4ee5 .git/config \u7684\u914d\u7f6e\u53d8\u91cf\u4f1a\u8986\u76d6 /etc/gitconfig \u4e2d\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u5728 Windows \u7cfb\u7edf\u4e2d\uff0cGit \u4f1a\u67e5\u627e $HOME \u76ee\u5f55\u4e0b\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u662f C:\\Users\\$USER\uff09\u7684 .gitconfig \u6587\u4ef6\u3002 Git \u540c\u6837\u4e5f\u4f1a\u5bfb\u627e /etc/gitconfig \u6587\u4ef6\uff0c\u4f46\u53ea\u9650\u4e8e MSys \u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u5373\u5b89\u88c5 Git \u65f6\u6240\u9009\u7684\u76ee\u6807\u4f4d\u7f6e\u3002 \u5f53\u5b89\u88c5\u5b8c Git \u5e94\u8be5\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u8bbe\u7f6e\u4f60\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u3002 \u8fd9\u6837\u505a\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a Git \u7684\u63d0\u4ea4\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u4e14\u5b83\u4f1a\u5199\u5165\u5230\u4f60\u7684\u6bcf\u4e00\u6b21\u63d0\u4ea4\u4e2d\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6253\u5f00 Git Bash Here \u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a $ git config --global user.name \"your name\" $ git config --global user.email \"your email\" \u518d\u6b21\u5f3a\u8c03\uff0c\u5982\u679c\u4f7f\u7528\u4e86 --global \u9009\u9879\uff0c\u90a3\u4e48\u8be5\u547d\u4ee4\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u6b21\uff0c\u56e0\u4e3a\u4e4b\u540e\u65e0\u8bba\u4f60\u5728\u8be5\u7cfb\u7edf\u4e0a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c Git \u90fd\u4f1a\u4f7f\u7528\u90a3\u4e9b\u4fe1\u606f\u3002 \u5f53\u4f60\u60f3\u9488\u5bf9\u7279\u5b9a\u9879\u76ee\u4f7f\u7528\u4e0d\u540c\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u65f6\uff0c\u53ef\u4ee5\u5728\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c\u6ca1\u6709 --global \u9009\u9879\u7684\u547d\u4ee4\u6765\u914d\u7f6e\u3002 \u67e5\u770b\u914d\u7f6e\u4fe1\u606f \u5982\u679c\u60f3\u8981\u68c0\u67e5\u4f60\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 git config --list \u547d\u4ee4\u6765\u5217\u51fa\u6240\u6709 Git \u5f53\u65f6\u80fd\u627e\u5230\u7684\u914d\u7f6e\u3002 $ git config --list \u4f60\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165 git config <key> \uff1a \u6765\u68c0\u67e5 Git \u7684\u67d0\u4e00\u9879\u914d\u7f6e $ git config user.name \u57fa\u672c\u672f\u8bed Workspace \uff1a\u5de5\u4f5c\u533a\uff0c\u4ee3\u7801\u5e93\u7684\u6240\u6709\u6587\u4ef6\u4f46\u4e0d\u5305\u62ec\u7248\u672c\u5e93( .git \u6587\u4ef6\u5939\u5185\u6240\u6709\u6587\u4ef6) Index/Stage \uff1a\u6682\u5b58\u533a\uff0c\u4e5f\u53eb\u7d22\u5f15\uff0c\u7528\u4e8e\u8fdb\u884c\u63d0\u4ea4\u524d\u7684\u7f13\u5b58\u533a\u57df\uff0c\u6dfb\u52a0\u7684\u4fee\u6539,\u90fd\u662f\u8fdb\u5165\u5230\u6682\u5b58\u533a\u4e86\uff0c\u8089\u773c\u4e0d\u53ef\u89c1 \u901a\u8fc7 git status \u53ef\u4ee5\u770b\u5230\u4fee\u6539\u7684\u72b6\u6001\u3002 Repository \uff1a\u4ed3\u5e93\u533a\uff08\u6216\u672c\u5730\u4ed3\u5e93\uff09\uff0c\u4e5f\u5b58\u50a8\u5e93\uff0c\u63d0\u4ea4\u7684\u76ee\u6807\u5e93 Remote \uff1a\u8fdc\u7a0b\u4ed3\u5e93 \u672c\u5730\u7248\u672c\u7ba1\u7406 - \u57fa\u7840\u7bc7 1. \u83b7\u53d6Git\u4ed3\u5e93 1.1 \u5728\u73b0\u6709\u76ee\u5f55\u4e2d\u521d\u59cb\u5316\u4ed3\u5e93 $ mkdir git_test $ cd git_test $ pwd $ git init # \u5c06\u5f53\u524d\u6587\u4ef6\u5939\u8bbe\u4e3a\u4ed3\u5e93 $ Initialized empty Git repository in /Users/my-pc/testcms/.git/ $ git init project-dir # \u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u521b\u5efaproject-dir\u4ed3\u5e93 \u77ac\u95f4Git\u5c31\u628a\u4ed3\u5e93\u5efa\u597d\u4e86\uff0c\u800c\u4e14\u544a\u8bc9\u4f60\u662f\u4e00\u4e2a\u7a7a\u7684\u4ed3\u5e93\uff08empty Git repository\uff09\uff0c\u7ec6\u5fc3\u7684\u5f00\u53d1\u8005\u53ef\u4ee5\u53d1\u73b0\u5f53\u524d\u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a.git\u7684\u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u662fGit\u6765\u8ddf\u8e2a\u7ba1\u7406\u7248\u672c\u5e93\u7684\uff0c\u6ca1\u4e8b\u5343\u4e07\u4e0d\u8981\u624b\u52a8\u4fee\u6539\u8fd9\u4e2a\u76ee\u5f55\u91cc\u9762\u7684\u6587\u4ef6\uff0c\u4e0d\u7136\u6539\u4e71\u4e86\uff0c\u5c31\u628aGit\u4ed3\u5e93\u7ed9\u7834\u574f\u4e86\u3002 1.2 \u514b\u9686\u5df2\u6709\u4ed3\u5e93 \u514b\u9686\u672c\u5730\u4ed3\u5e93 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer \u83b7\u53d6\u6307\u5b9a\u5386\u53f2\u7248\u672c\u6e90\u4ee3\u7801 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer $ git checkout fd9269a \u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93 $ git clone http://xxx.xxx 2. \u6dfb\u52a0\u4fee\u6539\uff08\u5c06\u4ee3\u7801\u4fee\u6539\u4ece\u5de5\u4f5c\u533a\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff09 \u5e38\u7528\u547d\u4ee4 $ git add -A # \u63d0\u4ea4\u6240\u6709\u53d8\u5316\uff0c\u4e5f\u53ef\u4f7f\u7528--all $ git add -u # \u63d0\u4ea4\u88ab\u4fee\u6539(modified)\u548c\u88ab\u5220\u9664(deleted)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u65b0\u6587\u4ef6(new) $ git add . # \u63d0\u4ea4\u65b0\u6587\u4ef6(new)\u548c\u88ab\u4fee\u6539(modified)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664(deleted)\u6587\u4ef6 $ git add dir # \u63d0\u4ea4\u6587\u4ef6\u5939 \u6dfb\u52a0 .gitignore \u5ffd\u7565\u67d0\u4e9b\u6587\u4ef6\u907f\u514d\u63d0\u4ea4 #ignore these files /src/test/ .Test/ temp.txt *.xml 3. \u63d0\u4ea4\u4ee3\u7801\uff08 \u5c06\u6682\u5b58\u533a\u5185\u5bb9\u6dfb\u52a0\u5230\u672c\u5730\u4ed3\u5e93\uff09 git commit -m \"\u81ea\u5df1\u5199\u6ce8\u91ca\u4ee5\u5907\u540e\u671f\u67e5\u770b\u63d0\u4ea4\u5185\u5bb9\" 4. \u67e5\u770b\u72b6\u6001\u548c\u65e5\u5fd7 git status git log 5. \u5220\u9664\u6587\u4ef6 git rm <files> git add -A git commit -m 'remove <files>' \u672c\u5730\u7248\u672c\u7ba1\u7406 - \u9ad8\u7ea7\u7bc7 \u7248\u672c\u56de\u9000 \u5f53\u524d\u7248\u672cHEAD\uff0c\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^\uff0c\u4e0a\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^^\uff0c\u5f53\u7136\u5f80\u4e0a100\u4e2a\u7248\u672c\u5199100\u4e2a^\u6bd4\u8f83\u5bb9\u6613\u6570\u4e0d\u8fc7\u6765\uff0c\u6240\u4ee5\u5199\u6210HEAD~100\u3002 $ git log $ git log --pretty=oneline $ git reset --hard HEAD^ # \u56de\u9000\u5230\u65b0\u7248\u672c $ git reflog $ git reset --hard commit-id \u7ba1\u7406\u4fee\u6539 \u8fdc\u7a0b\u7248\u672c\u7ba1\u7406 \u4e0a\u4f20\u672c\u5730\u4ee3\u7801 1. \u521b\u5efaGithub\u4ed3\u5e93\uff08\u8fdc\u7a0b\u4ed3\u5e93\uff09 \u767b\u9646 Github \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ed3\u5e93 Create a new repository \uff0c 2. \u83b7\u53d6git\u5730\u5740 https://GitHub.com/xxx/xxx.git # \u6216\u8005 git@github.com:xxx/xxx.git 3. \u5173\u8054\u8fdc\u7a0b\u5e93 \u514b\u9686 Github \u4ed3\u5e93 $ git clone https://GitHub.com/xxx/xxx.git # \u6216\u8005 $ git clone origin git@github.com:lsx-123/xxx.git # \u901f\u5ea6\u5feb\u4e00\u4e9b \u5173\u8054\u672c\u5730\u5df2\u5b58\u5728\u5e93 git remote add origin git@github.com:lsx-123/xxx.git 4. \u521b\u5efa\u672c\u5730\u4ee3\u7801\uff08\u5982\u6709\u4ee3\u7801\u76f4\u63a5\u62f7\u8d1d\u81f3\u672c\u5730\u6587\u4ef6\u5939\u5185\uff09 5. \u4e0a\u4f20\u672c\u5730\u4ee3\u7801 $ git add . $ git commit -m \"\u9996\u6b21\u4e0a\u4f20xxx\u4ee3\u7801\" $ git push -u origin master # \u7b2c\u4e00\u6b21\u4f7f\u7528 -u\uff0c\u540e\u9762\u5c31\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8be5\u53c2\u6570\u4e86 6. \u4e0b\u8f7d\u8fdc\u7a0b\u4ee3\u7801 $ git pull \u64cd\u4f5c\u547d\u4ee4 Git diff \u7528\u4e8e\u6bd4\u8f83\u4e24\u6b21\u4fee\u6539\u7684\u5dee\u5f02 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a $ git diff \u4e0d\u52a0\u53c2\u6570\u5373\u9ed8\u8ba4\u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93\uff08\u672c\u5730\u5e93\u4e2d\u6700\u8fd1\u4e00\u6b21 commit \u7684\u5185\u5bb9\uff09 $ git diff --cached [<path>...] \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93 $ git diff HEAD [<path>...] # \u5982\u679cHEAD\u6307\u5411\u7684\u662fmaster\u5206\u652f\uff0c\u90a3\u4e48HEAD\u8fd8\u53ef\u4ee5\u6362\u6210master \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6307\u5b9a commit-id \u7684\u5dee\u5f02 $ git diff commit-id [<path>...] \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6307\u5b9a commit-id \u7684\u5dee\u5f02 $ git diff --cached [<commit-id>] [<path>...] \u6bd4\u8f83\u4e24\u4e2a commit-id \u4e4b\u95f4\u7684\u5dee\u5f02 $ git diff [<commit-id>] [<commit-id>] \u4f7f\u7528 git dif f\u6253\u8865\u4e01 $ git diff > patch #patch\u7684\u547d\u540d\u662f\u968f\u610f\u7684\uff0c\u4e0d\u52a0\u5176\u4ed6\u53c2\u6570\u65f6\u4f5c\u7528\u662f\u5f53\u6211\u4eec\u5e0c\u671b\u5c06\u6211\u4eec\u672c\u4ed3\u5e93 \u5de5\u4f5c\u533a\u7684\u4fee\u6539\u62f7\u8d1d\u4e00\u4efd\u5230\u5176\u4ed6\u673a\u5668\u4e0a\u4f7f\u7528\uff0c\u4f46\u662f\u4fee\u6539\u7684\u6587\u4ef6\u6bd4\u8f83\u591a\uff0c\u62f7\u8d1d\u91cf\u6bd4\u8f83\u5927\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5c06\u4fee\u6539\u7684\u4ee3\u7801\u505a\u6210\u8865\u4e01\uff0c\u4e4b\u540e\u5728\u5176\u4ed6\u673a\u5668\u4e0a\u5bf9\u5e94\u76ee\u5f55\u4e0b\u4f7f\u7528 git apply patch \u5c06\u8865\u4e01\u6253\u4e0a\u5373\u53ef $ git diff --cached > patch # \u662f\u5c06\u6211\u4eec\u6682\u5b58\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 $ git diff --HEAD > patch # \u662f\u5c06\u5de5\u4f5c\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 $ git diff Testfile > patch # \u5c06\u5355\u4e2a\u6587\u4ef6\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u8865\u4e01 \u62d3\u5c55\uff1a git apply patch \u5e94\u7528\u8865\u4e01\uff0c\u5e94\u7528\u8865\u4e01\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u5148\u68c0\u9a8c\u4e00\u4e0b\u8865\u4e01\u80fd\u5426\u5e94\u7528\uff0c git apply --check patch \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u90a3\u4e48\u8868\u793a\u53ef\u4ee5\u987a\u5229\u63a5\u53d7\u8fd9\u4e2a\u8865\u4e01\u3002\u53e6\u5916\u53ef\u4ee5\u4f7f\u7528 git apply --reject patch \u5c06\u80fd\u6253\u7684\u8865\u4e01\u5148\u6253\u4e0a\uff0c\u6709\u51b2\u7a81\u7684\u4f1a\u751f\u6210 .rej \u6587\u4ef6\uff0c\u6b64\u65f6\u53ef\u4ee5\u627e\u5230\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c\u624b\u52a8\u6253\u8865\u4e01\u3000 \u53c2\u8003\u6587\u732e \u5ed6\u96ea\u5cf0\uff0c Git\u6559\u7a0b [Git\u5b98\u7f51\u6559\u7a0b]https://hexo.io/docs/deployment.html)","title":"git"},{"location":"interests/git/git/#_1","text":"","title":"\u5b89\u88c5\u4e0e\u914d\u7f6e"},{"location":"interests/git/git/#_2","text":"Windows\u4e0a\u5b89\u88c5Git\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u4e0b\u8f7d\u5e76\u5b89\u88c5 Git\u5b89\u88c5\u7a0b\u5e8f \uff0c\u6309\u9ed8\u8ba4\u9009\u9879\u5b89\u88c5\u5373\u53ef\u3002\u5b89\u88c5\u6210\u529f\u540e\uff0c\u5728\u4efb\u610f\u6587\u4ef6\u5939\u4e0b\u53f3\u952e\u83dc\u5355\u4e2d\u53ef\u4ee5\u770b\u5230 Git Bash Here \u548c Git GUI Here \u3002","title":"\u5b89\u88c5"},{"location":"interests/git/git/#_3","text":"Git \u81ea\u5e26\u4e00\u4e2a git config \u7684\u5de5\u5177\u6765\u5e2e\u52a9\u8bbe\u7f6e\u63a7\u5236 Git \u5916\u89c2\u548c\u884c\u4e3a\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5b58\u50a8\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\uff1a /etc/gitconfig \u6587\u4ef6: \u5305\u542b\u7cfb\u7edf\u4e0a\u6bcf\u4e00\u4e2a\u7528\u6237\u53ca\u4ed6\u4eec\u4ed3\u5e93\u7684\u901a\u7528\u914d\u7f6e\u3002 \u5982\u679c\u4f7f\u7528\u5e26\u6709 --system \u9009\u9879\u7684 git config \u65f6\uff0c\u5b83\u4f1a\u4ece\u6b64\u6587\u4ef6\u8bfb\u5199\u914d\u7f6e\u53d8\u91cf\u3002 ~/.gitconfig \u6216 ~/.config/git/config \u6587\u4ef6\uff1a\u53ea\u9488\u5bf9\u5f53\u524d\u7528\u6237\u3002 \u53ef\u4ee5\u4f20\u9012 --global \u9009\u9879\u8ba9 Git \u8bfb\u5199\u6b64\u6587\u4ef6\u3002 \u5f53\u524d\u4f7f\u7528\u4ed3\u5e93\u7684 Git \u76ee\u5f55\u4e2d\u7684 config \u6587\u4ef6\uff08\u5c31\u662f .git/config\uff09\uff1a\u9488\u5bf9\u8be5\u4ed3\u5e93\u3002 \u6bcf\u4e00\u4e2a\u7ea7\u522b\u8986\u76d6\u4e0a\u4e00\u7ea7\u522b\u7684\u914d\u7f6e\uff0c\u6240\u4ee5 .git/config \u7684\u914d\u7f6e\u53d8\u91cf\u4f1a\u8986\u76d6 /etc/gitconfig \u4e2d\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u5728 Windows \u7cfb\u7edf\u4e2d\uff0cGit \u4f1a\u67e5\u627e $HOME \u76ee\u5f55\u4e0b\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u662f C:\\Users\\$USER\uff09\u7684 .gitconfig \u6587\u4ef6\u3002 Git \u540c\u6837\u4e5f\u4f1a\u5bfb\u627e /etc/gitconfig \u6587\u4ef6\uff0c\u4f46\u53ea\u9650\u4e8e MSys \u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u5373\u5b89\u88c5 Git \u65f6\u6240\u9009\u7684\u76ee\u6807\u4f4d\u7f6e\u3002 \u5f53\u5b89\u88c5\u5b8c Git \u5e94\u8be5\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u8bbe\u7f6e\u4f60\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u3002 \u8fd9\u6837\u505a\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a Git \u7684\u63d0\u4ea4\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u4e14\u5b83\u4f1a\u5199\u5165\u5230\u4f60\u7684\u6bcf\u4e00\u6b21\u63d0\u4ea4\u4e2d\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6253\u5f00 Git Bash Here \u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a $ git config --global user.name \"your name\" $ git config --global user.email \"your email\" \u518d\u6b21\u5f3a\u8c03\uff0c\u5982\u679c\u4f7f\u7528\u4e86 --global \u9009\u9879\uff0c\u90a3\u4e48\u8be5\u547d\u4ee4\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u6b21\uff0c\u56e0\u4e3a\u4e4b\u540e\u65e0\u8bba\u4f60\u5728\u8be5\u7cfb\u7edf\u4e0a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c Git \u90fd\u4f1a\u4f7f\u7528\u90a3\u4e9b\u4fe1\u606f\u3002 \u5f53\u4f60\u60f3\u9488\u5bf9\u7279\u5b9a\u9879\u76ee\u4f7f\u7528\u4e0d\u540c\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u65f6\uff0c\u53ef\u4ee5\u5728\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c\u6ca1\u6709 --global \u9009\u9879\u7684\u547d\u4ee4\u6765\u914d\u7f6e\u3002","title":"\u7528\u6237\u914d\u7f6e"},{"location":"interests/git/git/#_4","text":"\u5982\u679c\u60f3\u8981\u68c0\u67e5\u4f60\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 git config --list \u547d\u4ee4\u6765\u5217\u51fa\u6240\u6709 Git \u5f53\u65f6\u80fd\u627e\u5230\u7684\u914d\u7f6e\u3002 $ git config --list \u4f60\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165 git config <key> \uff1a \u6765\u68c0\u67e5 Git \u7684\u67d0\u4e00\u9879\u914d\u7f6e $ git config user.name","title":"\u67e5\u770b\u914d\u7f6e\u4fe1\u606f"},{"location":"interests/git/git/#_5","text":"Workspace \uff1a\u5de5\u4f5c\u533a\uff0c\u4ee3\u7801\u5e93\u7684\u6240\u6709\u6587\u4ef6\u4f46\u4e0d\u5305\u62ec\u7248\u672c\u5e93( .git \u6587\u4ef6\u5939\u5185\u6240\u6709\u6587\u4ef6) Index/Stage \uff1a\u6682\u5b58\u533a\uff0c\u4e5f\u53eb\u7d22\u5f15\uff0c\u7528\u4e8e\u8fdb\u884c\u63d0\u4ea4\u524d\u7684\u7f13\u5b58\u533a\u57df\uff0c\u6dfb\u52a0\u7684\u4fee\u6539,\u90fd\u662f\u8fdb\u5165\u5230\u6682\u5b58\u533a\u4e86\uff0c\u8089\u773c\u4e0d\u53ef\u89c1 \u901a\u8fc7 git status \u53ef\u4ee5\u770b\u5230\u4fee\u6539\u7684\u72b6\u6001\u3002 Repository \uff1a\u4ed3\u5e93\u533a\uff08\u6216\u672c\u5730\u4ed3\u5e93\uff09\uff0c\u4e5f\u5b58\u50a8\u5e93\uff0c\u63d0\u4ea4\u7684\u76ee\u6807\u5e93 Remote \uff1a\u8fdc\u7a0b\u4ed3\u5e93","title":"\u57fa\u672c\u672f\u8bed"},{"location":"interests/git/git/#-","text":"","title":"\u672c\u5730\u7248\u672c\u7ba1\u7406 - \u57fa\u7840\u7bc7"},{"location":"interests/git/git/#1-git","text":"","title":"1. \u83b7\u53d6Git\u4ed3\u5e93"},{"location":"interests/git/git/#11","text":"$ mkdir git_test $ cd git_test $ pwd $ git init # \u5c06\u5f53\u524d\u6587\u4ef6\u5939\u8bbe\u4e3a\u4ed3\u5e93 $ Initialized empty Git repository in /Users/my-pc/testcms/.git/ $ git init project-dir # \u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u521b\u5efaproject-dir\u4ed3\u5e93 \u77ac\u95f4Git\u5c31\u628a\u4ed3\u5e93\u5efa\u597d\u4e86\uff0c\u800c\u4e14\u544a\u8bc9\u4f60\u662f\u4e00\u4e2a\u7a7a\u7684\u4ed3\u5e93\uff08empty Git repository\uff09\uff0c\u7ec6\u5fc3\u7684\u5f00\u53d1\u8005\u53ef\u4ee5\u53d1\u73b0\u5f53\u524d\u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a.git\u7684\u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u662fGit\u6765\u8ddf\u8e2a\u7ba1\u7406\u7248\u672c\u5e93\u7684\uff0c\u6ca1\u4e8b\u5343\u4e07\u4e0d\u8981\u624b\u52a8\u4fee\u6539\u8fd9\u4e2a\u76ee\u5f55\u91cc\u9762\u7684\u6587\u4ef6\uff0c\u4e0d\u7136\u6539\u4e71\u4e86\uff0c\u5c31\u628aGit\u4ed3\u5e93\u7ed9\u7834\u574f\u4e86\u3002","title":"1.1 \u5728\u73b0\u6709\u76ee\u5f55\u4e2d\u521d\u59cb\u5316\u4ed3\u5e93"},{"location":"interests/git/git/#12","text":"\u514b\u9686\u672c\u5730\u4ed3\u5e93 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer \u83b7\u53d6\u6307\u5b9a\u5386\u53f2\u7248\u672c\u6e90\u4ee3\u7801 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer $ git checkout fd9269a \u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93 $ git clone http://xxx.xxx","title":"1.2 \u514b\u9686\u5df2\u6709\u4ed3\u5e93"},{"location":"interests/git/git/#2","text":"\u5e38\u7528\u547d\u4ee4 $ git add -A # \u63d0\u4ea4\u6240\u6709\u53d8\u5316\uff0c\u4e5f\u53ef\u4f7f\u7528--all $ git add -u # \u63d0\u4ea4\u88ab\u4fee\u6539(modified)\u548c\u88ab\u5220\u9664(deleted)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u65b0\u6587\u4ef6(new) $ git add . # \u63d0\u4ea4\u65b0\u6587\u4ef6(new)\u548c\u88ab\u4fee\u6539(modified)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664(deleted)\u6587\u4ef6 $ git add dir # \u63d0\u4ea4\u6587\u4ef6\u5939 \u6dfb\u52a0 .gitignore \u5ffd\u7565\u67d0\u4e9b\u6587\u4ef6\u907f\u514d\u63d0\u4ea4 #ignore these files /src/test/ .Test/ temp.txt *.xml","title":"2. \u6dfb\u52a0\u4fee\u6539\uff08\u5c06\u4ee3\u7801\u4fee\u6539\u4ece\u5de5\u4f5c\u533a\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff09"},{"location":"interests/git/git/#3","text":"git commit -m \"\u81ea\u5df1\u5199\u6ce8\u91ca\u4ee5\u5907\u540e\u671f\u67e5\u770b\u63d0\u4ea4\u5185\u5bb9\"","title":"3. \u63d0\u4ea4\u4ee3\u7801\uff08 \u5c06\u6682\u5b58\u533a\u5185\u5bb9\u6dfb\u52a0\u5230\u672c\u5730\u4ed3\u5e93\uff09"},{"location":"interests/git/git/#4","text":"git status git log","title":"4. \u67e5\u770b\u72b6\u6001\u548c\u65e5\u5fd7"},{"location":"interests/git/git/#5","text":"git rm <files> git add -A git commit -m 'remove <files>'","title":"5. \u5220\u9664\u6587\u4ef6"},{"location":"interests/git/git/#-_1","text":"","title":"\u672c\u5730\u7248\u672c\u7ba1\u7406 - \u9ad8\u7ea7\u7bc7"},{"location":"interests/git/git/#_6","text":"\u5f53\u524d\u7248\u672cHEAD\uff0c\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^\uff0c\u4e0a\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^^\uff0c\u5f53\u7136\u5f80\u4e0a100\u4e2a\u7248\u672c\u5199100\u4e2a^\u6bd4\u8f83\u5bb9\u6613\u6570\u4e0d\u8fc7\u6765\uff0c\u6240\u4ee5\u5199\u6210HEAD~100\u3002 $ git log $ git log --pretty=oneline $ git reset --hard HEAD^ # \u56de\u9000\u5230\u65b0\u7248\u672c $ git reflog $ git reset --hard commit-id","title":"\u7248\u672c\u56de\u9000"},{"location":"interests/git/git/#_7","text":"","title":"\u7ba1\u7406\u4fee\u6539"},{"location":"interests/git/git/#_8","text":"","title":"\u8fdc\u7a0b\u7248\u672c\u7ba1\u7406"},{"location":"interests/git/git/#_9","text":"","title":"\u4e0a\u4f20\u672c\u5730\u4ee3\u7801"},{"location":"interests/git/git/#1-github","text":"\u767b\u9646 Github \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ed3\u5e93 Create a new repository \uff0c","title":"1. \u521b\u5efaGithub\u4ed3\u5e93\uff08\u8fdc\u7a0b\u4ed3\u5e93\uff09"},{"location":"interests/git/git/#2-git","text":"https://GitHub.com/xxx/xxx.git # \u6216\u8005 git@github.com:xxx/xxx.git","title":"2. \u83b7\u53d6git\u5730\u5740"},{"location":"interests/git/git/#3_1","text":"\u514b\u9686 Github \u4ed3\u5e93 $ git clone https://GitHub.com/xxx/xxx.git # \u6216\u8005 $ git clone origin git@github.com:lsx-123/xxx.git # \u901f\u5ea6\u5feb\u4e00\u4e9b \u5173\u8054\u672c\u5730\u5df2\u5b58\u5728\u5e93 git remote add origin git@github.com:lsx-123/xxx.git","title":"3. \u5173\u8054\u8fdc\u7a0b\u5e93"},{"location":"interests/git/git/#4_1","text":"","title":"4. \u521b\u5efa\u672c\u5730\u4ee3\u7801\uff08\u5982\u6709\u4ee3\u7801\u76f4\u63a5\u62f7\u8d1d\u81f3\u672c\u5730\u6587\u4ef6\u5939\u5185\uff09"},{"location":"interests/git/git/#5_1","text":"$ git add . $ git commit -m \"\u9996\u6b21\u4e0a\u4f20xxx\u4ee3\u7801\" $ git push -u origin master # \u7b2c\u4e00\u6b21\u4f7f\u7528 -u\uff0c\u540e\u9762\u5c31\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8be5\u53c2\u6570\u4e86","title":"5. \u4e0a\u4f20\u672c\u5730\u4ee3\u7801"},{"location":"interests/git/git/#6","text":"$ git pull","title":"6. \u4e0b\u8f7d\u8fdc\u7a0b\u4ee3\u7801"},{"location":"interests/git/git/#_10","text":"","title":"\u64cd\u4f5c\u547d\u4ee4"},{"location":"interests/git/git/#git-diff","text":"\u7528\u4e8e\u6bd4\u8f83\u4e24\u6b21\u4fee\u6539\u7684\u5dee\u5f02 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a $ git diff \u4e0d\u52a0\u53c2\u6570\u5373\u9ed8\u8ba4\u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93\uff08\u672c\u5730\u5e93\u4e2d\u6700\u8fd1\u4e00\u6b21 commit \u7684\u5185\u5bb9\uff09 $ git diff --cached [<path>...] \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93 $ git diff HEAD [<path>...] # \u5982\u679cHEAD\u6307\u5411\u7684\u662fmaster\u5206\u652f\uff0c\u90a3\u4e48HEAD\u8fd8\u53ef\u4ee5\u6362\u6210master \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6307\u5b9a commit-id \u7684\u5dee\u5f02 $ git diff commit-id [<path>...] \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6307\u5b9a commit-id \u7684\u5dee\u5f02 $ git diff --cached [<commit-id>] [<path>...] \u6bd4\u8f83\u4e24\u4e2a commit-id \u4e4b\u95f4\u7684\u5dee\u5f02 $ git diff [<commit-id>] [<commit-id>] \u4f7f\u7528 git dif f\u6253\u8865\u4e01 $ git diff > patch #patch\u7684\u547d\u540d\u662f\u968f\u610f\u7684\uff0c\u4e0d\u52a0\u5176\u4ed6\u53c2\u6570\u65f6\u4f5c\u7528\u662f\u5f53\u6211\u4eec\u5e0c\u671b\u5c06\u6211\u4eec\u672c\u4ed3\u5e93 \u5de5\u4f5c\u533a\u7684\u4fee\u6539\u62f7\u8d1d\u4e00\u4efd\u5230\u5176\u4ed6\u673a\u5668\u4e0a\u4f7f\u7528\uff0c\u4f46\u662f\u4fee\u6539\u7684\u6587\u4ef6\u6bd4\u8f83\u591a\uff0c\u62f7\u8d1d\u91cf\u6bd4\u8f83\u5927\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5c06\u4fee\u6539\u7684\u4ee3\u7801\u505a\u6210\u8865\u4e01\uff0c\u4e4b\u540e\u5728\u5176\u4ed6\u673a\u5668\u4e0a\u5bf9\u5e94\u76ee\u5f55\u4e0b\u4f7f\u7528 git apply patch \u5c06\u8865\u4e01\u6253\u4e0a\u5373\u53ef $ git diff --cached > patch # \u662f\u5c06\u6211\u4eec\u6682\u5b58\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 $ git diff --HEAD > patch # \u662f\u5c06\u5de5\u4f5c\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 $ git diff Testfile > patch # \u5c06\u5355\u4e2a\u6587\u4ef6\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u8865\u4e01 \u62d3\u5c55\uff1a git apply patch \u5e94\u7528\u8865\u4e01\uff0c\u5e94\u7528\u8865\u4e01\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u5148\u68c0\u9a8c\u4e00\u4e0b\u8865\u4e01\u80fd\u5426\u5e94\u7528\uff0c git apply --check patch \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u90a3\u4e48\u8868\u793a\u53ef\u4ee5\u987a\u5229\u63a5\u53d7\u8fd9\u4e2a\u8865\u4e01\u3002\u53e6\u5916\u53ef\u4ee5\u4f7f\u7528 git apply --reject patch \u5c06\u80fd\u6253\u7684\u8865\u4e01\u5148\u6253\u4e0a\uff0c\u6709\u51b2\u7a81\u7684\u4f1a\u751f\u6210 .rej \u6587\u4ef6\uff0c\u6b64\u65f6\u53ef\u4ee5\u627e\u5230\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c\u624b\u52a8\u6253\u8865\u4e01","title":"Git diff"},{"location":"interests/git/git/#_11","text":"\u5ed6\u96ea\u5cf0\uff0c Git\u6559\u7a0b [Git\u5b98\u7f51\u6559\u7a0b]https://hexo.io/docs/deployment.html)","title":"\u53c2\u8003\u6587\u732e"},{"location":"language_learning/CSharpContent/","text":"C#\u4f7f\u7528\u6280\u5de7 C#\u57fa\u7840 \u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf \u59d4\u6258\u3001\u533f\u540d\u65b9\u6cd5\u3001Lambda\u8868\u8fbe\u5f0f\u7684\u4e00\u4e2a\u5e94\u7528\u5b9e\u4f8b","title":"C#"},{"location":"language_learning/CSharpContent/#c","text":"","title":"C#\u4f7f\u7528\u6280\u5de7"},{"location":"language_learning/CSharpContent/#c_1","text":"\u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf \u59d4\u6258\u3001\u533f\u540d\u65b9\u6cd5\u3001Lambda\u8868\u8fbe\u5f0f\u7684\u4e00\u4e2a\u5e94\u7528\u5b9e\u4f8b","title":"C#\u57fa\u7840"},{"location":"language_learning/OpenGLContent/","text":"","title":"OpenGL"},{"location":"language_learning/PythonContent/","text":"","title":"Python"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/","text":"\u59d4\u6258\uff0c\u533f\u540d\u65b9\u6cd5\uff0cLambda\u8868\u8fbe\u5f0f\u4f7f\u7528\u5b9e\u4f8b \u95ee\u9898\u63cf\u8ff0 \u6392\u5e8f\u51fd\u6570\u4e2d\u9700\u8981\u6307\u5b9a\u5347\u5e8f\u6216\u964d\u5e8f\u6392\u5217\uff0c\u5982\u679c\u53ea\u662f\u7b80\u5355\u4f7f\u7528\u4e00\u4e2a Flag \u8fdb\u884c\u6807\u8bb0\u7684\u8bdd\uff0c\u9700\u8981\u5728\u6392\u5e8f\u51fd\u6570\u4e2d\u4f7f\u7528 if else \u8fdb\u884c\u5224\u65ad\u3002 class SimpleSort { public enum SortType { Ascending, Descending } void BubleSort(int[] items, SortType sortOrder) { for (i = items.Length - 1; i >= 0; i--) { for (j = 1; j <= i; j++) { bool swap = false; switch (sortOrder) { case SortType.Ascending : swap = items[j - 1] > items[j]; break; case SortType.Descending : swap = items[j - 1] < items[j]; break; } if (swap) { temp = items[j - 1]; items[j - 1] = items[j]; items[j] = temp; } } } } } \u4f7f\u7528\u59d4\u6258\u6539\u8fdb\u6392\u5e8f\u65b9\u6cd5 public delegate bool ComparisonHandler (int first, int second); class DelegateSample { public static void BubbleSort(int[] items, ComparisonHandler comparisonMethod) { int i; int j; int temp; if(comparisonMethod == null) { throw new ArgumentNullException(\"comparisonMethod\"); } if(items==null) return; for (i = items.Length - 1; i >= 0; i--) { for (j = 1; j <= i; j++) { if (comparisonMethod(items[j - 1], items[j])) { temp = items[j - 1]; items[j - 1] = items[j]; items[j] = temp; } } } } public static bool GreaterThan(int first, int second) { return first > second; } static void Main() { int i; int[] items = new int[5]; for (i=0; i < items.Length; i++) { Console.Write(\"Enter an integer: \"); items[i] = int.Parse(Console.ReadLine()); } BubbleSort(items, GreaterThan); for (int i = 0; i < items.Length; i++) Console.WriteLine(items[i]); } } \u4f7f\u7528\u59d4\u6258 class DelegateSort { public static bool GreaterThan(int first, int second) { return first > second; } static void Main() { int i; int[] items = new int[5]; for (i=0; i < items.Length; i++) { Console.Write(\"Enter an integer: \"); items[i] = int.Parse(Console.ReadLine()); } BubbleSort(items, GreaterThan); for (int i = 0; i < items.Length; i++) Console.WriteLine(items[i]); } } \u533f\u540d\u65b9\u6cd5 BubbleSort(items, delegate(int first, int second) => { return first > second; } ); Lambda\u8868\u8fbe\u5f0f BubbleSort(items, (int first, int second) => { return first > second; } ); BubbleSort(items, (first, second) => first > second); \u53c2\u8003 1.\u300aC#\u672c\u8d28\u8bba \u7b2c\u516d\u7248\u300b","title":"\u59d4\u6258\uff0c\u533f\u540d\u65b9\u6cd5\uff0cLambda\u8868\u8fbe\u5f0f\u4f7f\u7528\u5b9e\u4f8b"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/#lambda","text":"","title":"\u59d4\u6258\uff0c\u533f\u540d\u65b9\u6cd5\uff0cLambda\u8868\u8fbe\u5f0f\u4f7f\u7528\u5b9e\u4f8b"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/#_1","text":"\u6392\u5e8f\u51fd\u6570\u4e2d\u9700\u8981\u6307\u5b9a\u5347\u5e8f\u6216\u964d\u5e8f\u6392\u5217\uff0c\u5982\u679c\u53ea\u662f\u7b80\u5355\u4f7f\u7528\u4e00\u4e2a Flag \u8fdb\u884c\u6807\u8bb0\u7684\u8bdd\uff0c\u9700\u8981\u5728\u6392\u5e8f\u51fd\u6570\u4e2d\u4f7f\u7528 if else \u8fdb\u884c\u5224\u65ad\u3002 class SimpleSort { public enum SortType { Ascending, Descending } void BubleSort(int[] items, SortType sortOrder) { for (i = items.Length - 1; i >= 0; i--) { for (j = 1; j <= i; j++) { bool swap = false; switch (sortOrder) { case SortType.Ascending : swap = items[j - 1] > items[j]; break; case SortType.Descending : swap = items[j - 1] < items[j]; break; } if (swap) { temp = items[j - 1]; items[j - 1] = items[j]; items[j] = temp; } } } } }","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/#_2","text":"public delegate bool ComparisonHandler (int first, int second); class DelegateSample { public static void BubbleSort(int[] items, ComparisonHandler comparisonMethod) { int i; int j; int temp; if(comparisonMethod == null) { throw new ArgumentNullException(\"comparisonMethod\"); } if(items==null) return; for (i = items.Length - 1; i >= 0; i--) { for (j = 1; j <= i; j++) { if (comparisonMethod(items[j - 1], items[j])) { temp = items[j - 1]; items[j - 1] = items[j]; items[j] = temp; } } } } public static bool GreaterThan(int first, int second) { return first > second; } static void Main() { int i; int[] items = new int[5]; for (i=0; i < items.Length; i++) { Console.Write(\"Enter an integer: \"); items[i] = int.Parse(Console.ReadLine()); } BubbleSort(items, GreaterThan); for (int i = 0; i < items.Length; i++) Console.WriteLine(items[i]); } }","title":"\u4f7f\u7528\u59d4\u6258\u6539\u8fdb\u6392\u5e8f\u65b9\u6cd5"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/#_3","text":"class DelegateSort { public static bool GreaterThan(int first, int second) { return first > second; } static void Main() { int i; int[] items = new int[5]; for (i=0; i < items.Length; i++) { Console.Write(\"Enter an integer: \"); items[i] = int.Parse(Console.ReadLine()); } BubbleSort(items, GreaterThan); for (int i = 0; i < items.Length; i++) Console.WriteLine(items[i]); } }","title":"\u4f7f\u7528\u59d4\u6258"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/#_4","text":"BubbleSort(items, delegate(int first, int second) => { return first > second; } );","title":"\u533f\u540d\u65b9\u6cd5"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/#lambda_1","text":"BubbleSort(items, (int first, int second) => { return first > second; } ); BubbleSort(items, (first, second) => first > second);","title":"Lambda\u8868\u8fbe\u5f0f"},{"location":"language_learning/CSharp/DelegateAndLambdaExpression/#_5","text":"1.\u300aC#\u672c\u8d28\u8bba \u7b2c\u516d\u7248\u300b","title":"\u53c2\u8003"},{"location":"language_learning/CSharp/\u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf/","text":"\u4e00\u3001\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7684\u8def\u5f84 System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName \u83b7\u53d6\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u5305\u62ec\u6587\u4ef6\u540d\u3002 System.Environment.CurrentDirectory \u83b7\u53d6\u548c\u8bbe\u7f6e\u5f53\u524d\u76ee\u5f55(\u8be5\u8fdb\u7a0b\u4ece\u4e2d\u542f\u52a8\u7684\u76ee\u5f55)\u7684\u5b8c\u5168\u9650\u5b9a\u76ee\u5f55\u3002 System.IO.Directory.GetCurrentDirectory() \u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002\u8fd9\u4e2a\u4e0d\u4e00\u5b9a\u662f\u7a0b\u5e8f\u4ece\u4e2d\u542f\u52a8\u7684\u76ee\u5f55\u554a\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u653e\u5728C:/www\u91cc,\u8fd9\u4e2a\u51fd\u6570\u6709\u53ef\u80fd\u8fd4\u56deC:/Documents and Settings/ZYB/,\u6216\u8005C:/Program Files/Adobe/,\u6709\u65f6\u4e0d\u4e00\u5b9a\u8fd4\u56de\u4ec0\u4e48\u4e1c\u4e1c\uff0c\u8fd9\u662f\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u8fc7\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4f60\u7528Word\u6253\u5f00\u4e86E:/doc/my.doc\u8fd9\u4e2a\u6587 \u4ef6\uff0c\u6b64\u65f6\u6267\u884c\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u8fd4\u56de\u4e86E:/doc\u4e86\u3002 System.AppDomain.CurrentDomain.BaseDirectory \u83b7\u53d6\u7a0b\u5e8f\u7684\u57fa\u76ee\u5f55\u3002 System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase \u83b7\u53d6\u548c\u8bbe\u7f6e\u5305\u62ec\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\u7684\u540d\u79f0\u3002 System.Windows.Forms.Application.StartupPath \u83b7\u53d6\u542f\u52a8\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u3002\u6548\u679c\u548c2\u30015\u4e00\u6837\u3002\u53ea\u662f5\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u540e\u9762\u591a\u4e86\u4e00\u4e2a\"/\"\u800c\u5df2 System.Windows.Forms.Application.ExecutablePath \u83b7\u53d6\u542f\u52a8\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u53ca\u6587\u4ef6\u540d\uff0c\u6548\u679c\u548c1\u4e00\u6837\u3002 \u4e8c\u3001\u64cd\u4f5c\u73af\u5883\u53d8\u91cf \u5229\u7528System.Environment.GetEnvironmentVariable()\u65b9\u6cd5\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u53d6\u5f97\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff0c\u5982\uff1a System.Environment.GetEnvironmentVariable(\"windir\")\u5c31\u53ef\u4ee5\u53d6\u5f97windows\u7cfb\u7edf\u76ee\u5f55\u7684\u8def\u5f84\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u7528\u7684\u73af\u5883\u53d8\u91cf\u53d6\u503c\uff1a System.Environment.GetEnvironmentVariable(\"windir\"); System.Environment.GetEnvironmentVariable(\"INCLUDE\"); System.Environment.GetEnvironmentVariable(\"TMP\"); System.Environment.GetEnvironmentVariable(\"TEMP\"); System.Environment.GetEnvironmentVariable(\"Path\"); \u6700\u540e\u8d34\u51fa\u6211\u8fdb\u884c\u4e0a\u9762\u64cd\u4f5c\u83b7\u5f97\u7684\u53d8\u91cf\u503c\uff0c\u4e8b\u5148\u8bf4\u660e\uff0c\u672c\u4eba\u662f\u7f16\u5199\u4e86\u4e00\u4e2aWinForm\u7a0b\u5e8f\uff0c\u9879\u76ee\u6587\u4ef6\u5b58\u653e\u4e8eD:/Visual Studio Projects/MyApplication/LifeAssistant\uff0c\u7f16\u8bd1\u540e\u7684\u6587\u4ef6\u4f4d\u4e8eD:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a 1\u3001 System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/LifeAssistant.exe 2\u3001System.Environment.CurrentDirectory=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug 3\u3001System.IO.Directory.GetCurrentDirectory()=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug 4\u3001System.AppDomain.CurrentDomain.BaseDirectory=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/ 5\u3001 System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/ 6\u3001System.Windows.Forms.Application.StartupPath=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug 7\u3001System.Windows.Forms.Application.ExecutablePath=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/LifeAssistant.exe System.Environment.GetEnvironmentVariable(\"windir\")=C:/WINDOWS System.Environment.GetEnvironmentVariable(\"INCLUDE\")=C:/Program Files/Microsoft Visual Studio .NET 2003/SDK/v1.1/include/ System.Environment.GetEnvironmentVariable(\"TMP\")=C:/DOCUME~1/zhoufoxcn/LOCALS~1/Temp System.Environment.GetEnvironmentVariable(\"TEMP\")=C:/DOCUME~1/zhoufoxcn/LOCALS~1/Temp System.Environment.GetEnvironmentVariable(\"Path\")=C:/WINDOWS/system32;C:/WINDOWS;C:/WINDOWS/System32/Wbem;C:/jdk1.5.0/bin;C:/MySQLServer5.0/bin;C:/Program Files/Symantec/pcAnywhere/;C:/Program Files/Microsoft SQL Server/80/Tools/BINN","title":"\u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf"},{"location":"language_learning/CSharp/\u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf/#_1","text":"System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName \u83b7\u53d6\u6a21\u5757\u7684\u5b8c\u6574\u8def\u5f84\uff0c\u5305\u62ec\u6587\u4ef6\u540d\u3002 System.Environment.CurrentDirectory \u83b7\u53d6\u548c\u8bbe\u7f6e\u5f53\u524d\u76ee\u5f55(\u8be5\u8fdb\u7a0b\u4ece\u4e2d\u542f\u52a8\u7684\u76ee\u5f55)\u7684\u5b8c\u5168\u9650\u5b9a\u76ee\u5f55\u3002 System.IO.Directory.GetCurrentDirectory() \u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002\u8fd9\u4e2a\u4e0d\u4e00\u5b9a\u662f\u7a0b\u5e8f\u4ece\u4e2d\u542f\u52a8\u7684\u76ee\u5f55\u554a\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u653e\u5728C:/www\u91cc,\u8fd9\u4e2a\u51fd\u6570\u6709\u53ef\u80fd\u8fd4\u56deC:/Documents and Settings/ZYB/,\u6216\u8005C:/Program Files/Adobe/,\u6709\u65f6\u4e0d\u4e00\u5b9a\u8fd4\u56de\u4ec0\u4e48\u4e1c\u4e1c\uff0c\u8fd9\u662f\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u8fc7\u7684\u76ee\u5f55\uff0c\u6bd4\u5982\u4f60\u7528Word\u6253\u5f00\u4e86E:/doc/my.doc\u8fd9\u4e2a\u6587 \u4ef6\uff0c\u6b64\u65f6\u6267\u884c\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u8fd4\u56de\u4e86E:/doc\u4e86\u3002 System.AppDomain.CurrentDomain.BaseDirectory \u83b7\u53d6\u7a0b\u5e8f\u7684\u57fa\u76ee\u5f55\u3002 System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase \u83b7\u53d6\u548c\u8bbe\u7f6e\u5305\u62ec\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u76ee\u5f55\u7684\u540d\u79f0\u3002 System.Windows.Forms.Application.StartupPath \u83b7\u53d6\u542f\u52a8\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u3002\u6548\u679c\u548c2\u30015\u4e00\u6837\u3002\u53ea\u662f5\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u540e\u9762\u591a\u4e86\u4e00\u4e2a\"/\"\u800c\u5df2 System.Windows.Forms.Application.ExecutablePath \u83b7\u53d6\u542f\u52a8\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u53ca\u6587\u4ef6\u540d\uff0c\u6548\u679c\u548c1\u4e00\u6837\u3002","title":"\u4e00\u3001\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7684\u8def\u5f84"},{"location":"language_learning/CSharp/\u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf/#_2","text":"\u5229\u7528System.Environment.GetEnvironmentVariable()\u65b9\u6cd5\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u53d6\u5f97\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\uff0c\u5982\uff1a System.Environment.GetEnvironmentVariable(\"windir\")\u5c31\u53ef\u4ee5\u53d6\u5f97windows\u7cfb\u7edf\u76ee\u5f55\u7684\u8def\u5f84\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u7528\u7684\u73af\u5883\u53d8\u91cf\u53d6\u503c\uff1a System.Environment.GetEnvironmentVariable(\"windir\"); System.Environment.GetEnvironmentVariable(\"INCLUDE\"); System.Environment.GetEnvironmentVariable(\"TMP\"); System.Environment.GetEnvironmentVariable(\"TEMP\"); System.Environment.GetEnvironmentVariable(\"Path\"); \u6700\u540e\u8d34\u51fa\u6211\u8fdb\u884c\u4e0a\u9762\u64cd\u4f5c\u83b7\u5f97\u7684\u53d8\u91cf\u503c\uff0c\u4e8b\u5148\u8bf4\u660e\uff0c\u672c\u4eba\u662f\u7f16\u5199\u4e86\u4e00\u4e2aWinForm\u7a0b\u5e8f\uff0c\u9879\u76ee\u6587\u4ef6\u5b58\u653e\u4e8eD:/Visual Studio Projects/MyApplication/LifeAssistant\uff0c\u7f16\u8bd1\u540e\u7684\u6587\u4ef6\u4f4d\u4e8eD:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a 1\u3001 System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/LifeAssistant.exe 2\u3001System.Environment.CurrentDirectory=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug 3\u3001System.IO.Directory.GetCurrentDirectory()=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug 4\u3001System.AppDomain.CurrentDomain.BaseDirectory=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/ 5\u3001 System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/ 6\u3001System.Windows.Forms.Application.StartupPath=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug 7\u3001System.Windows.Forms.Application.ExecutablePath=D:/Visual Studio Projects/MyApplication/LifeAssistant/bin/Debug/LifeAssistant.exe System.Environment.GetEnvironmentVariable(\"windir\")=C:/WINDOWS System.Environment.GetEnvironmentVariable(\"INCLUDE\")=C:/Program Files/Microsoft Visual Studio .NET 2003/SDK/v1.1/include/ System.Environment.GetEnvironmentVariable(\"TMP\")=C:/DOCUME~1/zhoufoxcn/LOCALS~1/Temp System.Environment.GetEnvironmentVariable(\"TEMP\")=C:/DOCUME~1/zhoufoxcn/LOCALS~1/Temp System.Environment.GetEnvironmentVariable(\"Path\")=C:/WINDOWS/system32;C:/WINDOWS;C:/WINDOWS/System32/Wbem;C:/jdk1.5.0/bin;C:/MySQLServer5.0/bin;C:/Program Files/Symantec/pcAnywhere/;C:/Program Files/Microsoft SQL Server/80/Tools/BINN","title":"\u4e8c\u3001\u64cd\u4f5c\u73af\u5883\u53d8\u91cf"},{"location":"language_learning/WiXTutorial/WiX_Toolset_Tutorial/","text":"WiX Toolset Tutorial The WiX Toolset is a set of tools that build Windows installation packages from XML source code. The toolset provides both a command line environment that developers may either integrate into their old style Makefile build processes or use the newer MSBuild technology from inside integrated development environments like Microsoft Visual Studio or SharpDevelop to build their MSI and MSM setup packages. WiX \u662f\u5229\u7528XML\u683c\u5f0f\u6e90\u7801\u6765\u6784\u5efaWinxdows\u73af\u5883\u4e0b\u7684\u5b89\u88c5\u7a0b\u5e8f\u5305\u7684\u4e00\u5957\u5de5\u5177\u96c6\u5408\u3002\u5b83\u63d0\u4f9b\u4e86\u547d\u4ee4\u884c\u548cIDE\u6574\u5408\u4e24\u79cd\u6784\u5efa\u73af\u5883\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u5c06\u5176\u6574\u5408\u5230\u6bd4\u8f83\u8001\u7684 Makefile \u6784\u5efa\u8fc7\u7a0b\uff0c\u6216\u8005\u5305\u542bMSBuild\u6280\u672f\u7684IDE\uff08\u6bd4\u5982\uff0cVisual Studio\u3001SharpDevelop\uff09\u4e2d\u6765\u6784\u5efa\u4ed6\u4eec\u81ea\u5df1\u7684MSI\u548cMSM\u5b89\u88c5\u5305\u3002 WiX is an open source project, originally developed by Microsoft and maintained by Rob Mensching. You can download the latest binary and source code releases . This tutorial covers the stable version 3.x. WiX\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u5fae\u8f6f\u5b8c\u6210\u6700\u521d\u5f00\u53d1\uff0c\u7531 Rob Mensching \u8fdb\u884c\u7ef4\u62a4\u3002\u4f60\u53ef\u4ee5\u4e0b\u8f7d\u6700\u65b0\u7684\u4e8c\u8fdb\u5236\u6216\u8005\u6e90\u7801 \u53d1\u5e03\u7248\u672c \u3002\u672c\u6559\u7a0b\u8bbe\u8ba1\u5185\u5bb9\u652f\u6301\u7a33\u5b9a\u76843.0\u4ee5\u540e\u7684\u7248\u672c\u3002 The toolset is written in C# and requires the .NET Framework to run. However, this only applies to the toolset itself. The installation packages you create with the toolset do not require any extra framework or software to be installed on the target computer. Similarly, there might be a few additional utilities required for some special applications (merge modules, patches) but only on your build computer, the client will only need the finished and self-contained installer package, nothing else. WiX \u5de5\u5177\u96c6\u7531C#\u8bed\u8a00\u5f00\u53d1\u5e76\u9700\u8981.NET Framework\u73af\u5883\u624d\u80fd\u8fd0\u884c\uff0c\u4f46\u8fd9\u4ec5\u4ec5\u9488\u5bf9 WiX \u5de5\u5177\u96c6\u672c\u8eab\u3002\u5728\u76ee\u6807\u5ba2\u6237\u7684\u4e3b\u673a\u4e0a\u8fd0\u884c\u7528WiX\u521b\u5efa\u7684\u5b89\u88c5\u5305\u5e76\u4e0d\u9700\u8981\u5b89\u88c5\u5176\u4ed6\u989d\u5916\u7684\u6846\u67b6\u6216\u8005\u8f6f\u4ef6\u3002\u540c\u6837\u5730\uff0c\u5728\u5b89\u88c5\u5305\u6784\u5efa\u4e3b\u673a\u4e0a\u4e5f\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u7279\u6b8a\u7684\u5de5\u5177\u5305\uff0c\u4f46\u662f\u5ba2\u6237\u673a\u5668\u4e0a\u53ea\u9700\u8981\u4f60\u5236\u4f5c\u597d\u7684\u72ec\u7acb\u7684\u5b89\u88c5\u5305\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u3002 There is a friendly community of WiX developers and users in dedicated mailing lists . This is the best place to ask for advice about any aspect of WiX. As is usual with such mailing lists today, you have to subscribe first before you can ask any question; without that, the list users couldn't cope with spam... WiX\u62e5\u6709\u4e0e\u4e00\u4e2a\u53cb\u597d\u7684\u5f00\u53d1\u8005\u548c\u7528\u6237\u793e\u533a\uff0c\u8be6\u89c1 \u90ae\u4ef6\u5217\u8868 \u3002\u8fd9\u91cc\u662f\u5bfb\u6c42WiX\u4efb\u610f\u65b9\u9762\u95ee\u9898\u5efa\u8bae\u7684\u6700\u597d\u5730\u65b9\u3002\u63d0\u95ee\u524d\u8bf7\u5148\u8ba2\u9605\u90ae\u4ef6\u5217\u8868\uff0c\u5426\u5219\u4f1a\u88ab\u4f5c\u4e3a\u5783\u573e\u90ae\u4ef6\u3002 Introduction Finishing the development of an application is still far from ending it. During the recent years, users have learned to expect a full-fledged, complete setup solution bundled with your product---and as the setup is the very first part of the application the end user becomes acquainted with, the importance of its integrity and reliability cannot be overestimated. \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684\u5b8c\u6210\u8ddd\u79bb\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u5f00\u53d1\u7684\u5b8c\u6210\u8fd8\u76f8\u5dee\u751a\u8fdc\u3002\u8fd1\u5e74\u6765\uff0c\u7ec8\u7aef\u7528\u6237\u5e0c\u671b\u60a8\u7684\u4ea7\u54c1\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\uff0c\u6bd5\u7adf\u5b89\u88c5\u90e8\u7f72\u662f\u7ec8\u7aef\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6b65\uff0c\u5176\u5b8c\u6574\u548c\u53ef\u9760\u7684\u91cd\u8981\u6027\u600e\u4e48\u4f30\u8ba1\u90fd\u4e0d\u8fc7\u5206\u3002 Traditional setup tools used a programmatic, script-based approach to describe the various steps involved in the deployment of the application to be installed on the target machine: files to be copied, registry settings to be created, device drivers and services to be started. The technology behind Windows Installer, while it maintains a comparable look and feel for the end user, underwent important philosophical changes. The fundamental change was to move from the imperative description to a declarative one: rather than to describe the individual steps of installation, the declarative form specifies the state the target machine should be left in after various phases of installation and uninstallation. While the imperative description seems to be quite sufficient until some error occurs, the declarative one makes it possible to cope with unexpected conditions, differing target machine environments, aborted installations, shared resources. It is of paramount importance for setup developers to make sure that whatever happens during the process, the target machine should be left in a known, stable state, without introducing any detrimental side effects. \u4f20\u7edf\u5b89\u88c5\u5de5\u5177\u4f7f\u7528\u7f16\u7a0b\u5f0f\u7684\u3001\u57fa\u4e8e\u811a\u672c\u7684\u65b9\u6cd5\u53bb\u63cf\u8ff0\u5b89\u88c5\u6b65\u9aa4\uff0c\u8fd9\u6d89\u53ca\u4ece\u7a0b\u5e8f\u7684\u5f00\u53d1\u5230\u5b89\u88c5\u5728\u76ee\u6807\u673a\u5668\u4e0a\uff1a\u62f7\u8d1d\u6587\u4ef6\u3001\u6ce8\u518c\u8868\u521b\u5efa\u3001\u8bbe\u5907\u9a71\u52a8\u548c\u670d\u52a1\u7684\u5f00\u542f\u3002Windows Installer \u6280\u672f\u80cc\u540e\u7ecf\u5386\u4e86\u91cd\u8981\u7684\u54f2\u5b66\u53d8\u5316\uff0c\u867d\u7136\u7ec8\u7aef\u7528\u6237\u7684\u89c2\u611f\u672a\u53d1\u751f\u660e\u663e\u53d8\u5316\u3002\u6700\u57fa\u672c\u7684\u53d8\u5316\u5c31\u662f\u5b89\u88c5\u90e8\u7f72\u4ece\u7f16\u7a0b\u6027\u63cf\u8ff0\u8f6c\u53d8\u4e3a\u58f0\u660e\u6027\u63cf\u8ff0\uff1a\u4e0d\u518d\u662f\u8be6\u7ec6\u63cf\u8ff0\u5b89\u88c5\u6d41\u7a0b\u4e2d\u7684\u6bcf\u4e00\u5c0f\u6b65\uff0c\u58f0\u660e\u6027\u63cf\u8ff0\u89c4\u5b9a\u4e86\u76ee\u6807\u673a\u5668\u5728\u5404\u79cd\u5b89\u88c5\u6216\u8005\u5378\u8f7d\u9636\u6bb5\u4e2d\u5fc5\u987b\u5904\u4e8e\u7684\u72b6\u6001\u3002\u4e00\u65e6\u51fa\u73b0\u5f02\u5e38\uff0c\u7f16\u7a0b\u6027\u63cf\u8ff0\u5c31\u6ca1\u6709\u770b\u8d77\u6765\u7684\u90a3\u6837\u7a33\u5065\u4e86\uff0c\u800c\u58f0\u660e\u6027\u63cf\u8ff0\u5219\u53ef\u4ee5\u5904\u7406\u5f02\u5e38\u60c5\u51b5\uff08\u5982\uff0c\u76ee\u6807\u673a\u5668\u73af\u5883\u5dee\u5f02\uff0c\u4e2d\u6b62\u5b89\u88c5\u3001\u5171\u4eab\u8d44\u6e90\u7b49\uff09\u3002\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u65e0\u8bba\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff0c\u4fdd\u8bc1\u76ee\u6807\u8ba1\u7b97\u673a\u5904\u4e8e\u53ef\u77e5\u7684\u7a33\u5b9a\u72b6\u6001\u800c\u672a\u5f15\u5165\u4efb\u4f55\u6709\u5bb3\u526f\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5b89\u88c5\u5305\u5f00\u53d1\u8005\u6765\u8bf4\u90fd\u662f\u6700\u91cd\u8981\u7684\u3002 The developers of the widely used setup tools also embraced the new technology and started to offer new versions of their tools to create setup programs of this nature. However, as the experience of many developers shows, while these tools are perfectly capable of creating simpler installation packages, they often prove too limiting, inflexible when it comes to more complex requirements. \u6d41\u884c\u7684\u5b89\u88c5\u5305\u5236\u4f5c\u5de5\u5177\u7684\u5f00\u53d1\u8005\u4eec\u5f53\u7136\u4e5f\u4f1a\u62e5\u62b1\u8fd9\u4e00\u65b0\u6280\u672f\uff0c\u5e76\u63d0\u4f9b\u4ed6\u4eec\u7684\u65b0\u7248\u672c\u5b89\u88c5\u5de5\u5177\u6765\u521b\u5efa\u8fd9\u79cd\u7c7b\u578b\u7684\u5b89\u88c5\u7a0b\u5e8f\u3002\u867d\u7136\u8fd9\u4e9b\u5de5\u5177\u53ef\u4ee5\u5b8c\u7f8e\u7684\u521b\u5efa\u7b80\u5355\u7c7b\u578b\u7684\u5b89\u88c5\u5305\uff0c\u4f46\u662f\u4ece\u8bb8\u591a\u5f00\u53d1\u8005\u5b9e\u9645\u7684\u7ecf\u9a8c\u6765\u770b\uff0c\u4ed6\u4eec\u7ecf\u5e38\u5728\u9762\u4e34\u66f4\u52a0\u590d\u6742\u7684\u5b89\u88c5\u90e8\u7f72\u9700\u6c42\u65f6\u8fc7\u4e8e\u53d7\u9650\u5236\u800c\u663e\u5f97\u4e0d\u7075\u6d3b\u3002 The toolset we are about to introduce, WiX, uses a different approach. Instead of a tool with a graphical interface that allows the developers to collect the files and other related tasks making up the installation process manually, it is much more like a programming language. Integrating perfectly with the usual process of creating applications, it uses a text file (based on the XML format) to describe all the elements of the installation process. The toolset has a compiler and a linker that will create the setup program just like our usual compiler creates our application from the source files. Therefore, WiX can be made part of any automated application build process very easily, be that based either on the classical technology of makefiles or the similar features of contemporary integrated development environments. \u8fd9\u91cc\u6211\u4eec\u5c06\u9686\u91cd\u4ecb\u7ecd\u7684\u5b89\u88c5\u5de5\u5177\u2014\u2014WiX\uff0c\u4f7f\u7528\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u3002\u5b83\u5e76\u4e0d\u662f\u76f4\u63a5\u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7\u56fe\u5f62\u754c\u9762\u624b\u52a8\u5730\u9009\u62e9\u6587\u4ef6\u548c\u5176\u4ed6\u76f8\u5173\u4efb\u52a1\u6765\u642d\u5efa\u5b89\u88c5\u8fc7\u7a0b\uff0c\u800c\u66f4\u50cf\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u53ef\u4ee5\u5b8c\u7f8e\u5730\u6574\u5408\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u57fa\u4e8eXML\u683c\u5f0f\u7684\u6587\u672c\u6587\u4ef6\u6765\u63cf\u8ff0\u6240\u6709\u7684\u5b89\u88c5\u8fc7\u7a0b\u3002\u5de5\u5177\u96c6\u6709\u4e00\u4e2a\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u6765\u521b\u5efa\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5c31\u50cf\u5e38\u89c1\u7f16\u8bd1\u5668\u4ece\u6e90\u7801\u6587\u4ef6\u7f16\u8bd1\u5f97\u5230\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u3002\u56e0\u6b64\uff0cWiX \u53ef\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u6765\u642d\u5efa\u5e76\u5b9e\u73b0\u81ea\u52a8\u5316\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u8fc7\u7a0b\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7makefile\u4f20\u7edf\u6280\u672f\uff0c\u6216\u8005\u7c7b\u4f3c\u4e8e\u73b0\u4ee3IDE\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 In addition to this integration, providing basically nothing more but developer comfort, WiX offers another level of integration, far more advantageous than the first one: the integration of the setup development process with that of the application. Traditionally, setup programs were only written when the main application had already been finished; often even by different developers. This approach requires a tedious and error prone process of collecting information about all the resources making up the application. While the files themselves are usually obvious, registry entries, services and most forms of inter-resource dependencies are often hard to reconstruct in a later stage: if solid development documentation is lacking, the setup developers have to collect all pieces of information from the original developers or try to extract it from the source code. \u9664\u4e86\u5e95\u5c42\u4e0a\u6ca1\u6709\u4ec0\u4e48\u65b0\u7684\u4e1c\u897f\u4ec5\u4ec5\u7ed9\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4fbf\u5229\u7684\u6574\u5408\uff0cWiX \u8fd8\u63d0\u4f9b\u4e86\u4f18\u52bf\u8fdc\u8d85\u524d\u4e00\u79cd\u6574\u5408\u7684\u53e6\u5916\u4e00\u4e2a\u5c42\u6b21\u7684\u6574\u5408\uff1a\u5b89\u88c5\u5305\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u8fc7\u7a0b\u6574\u5408\u5728\u4e00\u8d77\u3002\u4f20\u7edf\u4e0a\uff0c\u5b89\u88c5\u5305\u7a0b\u5e8f\u7684\u7f16\u5199\u53ea\u53d1\u751f\u5728\u4e3b\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u5df2\u7ecf\u5b8c\u6210\u9636\u6bb5\uff0c\u800c\u4e14\u5e38\u5e38\u662f\u5176\u4ed6\u4eba\u800c\u975e\u5e94\u7528\u5f00\u53d1\u4eba\u5458\u6765\u5199\u3002\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u5197\u957f\u6613\u9519\u7684\u6536\u96c6\u7ec4\u6210\u5e94\u7528\u7a0b\u5e8f\u7684\u8d44\u6e90\u4fe1\u606f\u7684\u8fc7\u7a0b\u3002\u867d\u7136\u8fd9\u4e9b\u6587\u4ef6\u4e00\u822c\u6bd4\u8f83\u663e\u773c\uff0c\u4f46\u662f\uff0c\u6ce8\u518c\u8868\u3001\u670d\u52a1\u548c\u5927\u90e8\u5206\u5185\u90e8\u8d44\u6e90\u4f9d\u8d56\u7684\u7a97\u4f53\uff0c\u662f\u5f88\u96be\u5728\u4e4b\u540e\u7684\u9636\u6bb5\u8fdb\u884c\u91cd\u65b0\u6784\u5efa\u7684\u3002\u5982\u679c\u7f3a\u4e4f\u5f3a\u7c7b\u578b\u7684\u5f00\u53d1\u6587\u6863\uff0c\u5b89\u88c5\u5f00\u53d1\u5de5\u7a0b\u5e08\u4e0d\u5f97\u4e0d\u4ece\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u5de5\u7a0b\u5e08\u90a3\u91cc\u6536\u96c6\u6240\u6709\u7684\u4fe1\u606f\u788e\u7247\uff0c\u6216\u8005\u4ece\u6e90\u7801\u4e2d\u62bd\u53d6\u8fd9\u4e9b\u4fe1\u606f\u3002 In an integrated application/setup development environment, the original developer should modify the WiX source files in sync with the application development. As soon as a new module has been started, a new registry entry, service or other dependency has been coded, the appropriate setup modification should be made in parallel. Using this approach, no important information will ever be lost and, as a bonus, the setup program will be practically finished together with the application itself. \u5728\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f/\u5b89\u88c5\u5305\u7a0b\u5e8f\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u5de5\u7a0b\u5e08\u53ef\u4ee5\u5728\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u7684\u540c\u65f6\uff0c\u540c\u6b65\u4fee\u6539 WiX \u5b89\u88c5\u6e90\u7801\u6587\u4ef6\u3002\u53ea\u8981\u5f00\u59cb\u4e00\u4e2a\u65b0\u6a21\u5757\u7684\u5f00\u53d1\uff0c\u65b0\u6ce8\u518c\u8868\u3001\u670d\u52a1\u6216\u8005\u5176\u4ed6\u4f9d\u8d56\u90fd\u8981\u88ab\u8bbe\u7f6e\uff0c\u9002\u5f53\u7684\u5b89\u88c5\u7a0b\u5e8f\u8c03\u6574\u4e5f\u5e94\u8be5\u540c\u6b65\u8fdb\u884c\u3002\u5229\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u91cd\u8981\u4fe1\u606f\u518d\u4e5f\u4e0d\u4f1a\u9057\u5931\uff0c\u540c\u65f6\uff0c\u5b89\u88c5\u5305\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u548c\u5e94\u7528\u7a0b\u5e8f\u540c\u6b65\u5b8c\u6210\u3002 As a consequence, WiX is not equally suited to all developers. The relatively steep learning curve (although our primary goal is to help overcome this difficulty with our tutorial) and the unavoidable exposure to the internal details and, sometimes, intricacies of the underlying Windows Installer technology suggest that less experienced developers or those who don't really need the unlimited and unparalleled performance WiX can offer might be better served by a simpler, GUI-based setup authoring tool, of which there are both commercial and freeware solutions available. \u56e0\u6b64\uff0cWiX \u4e0d\u4e00\u5b9a\u4f1a\u9002\u5e94\u4e8e\u6240\u6709\u7684\u5f00\u53d1\u8005\u3002\u7531\u4e8e WiX \u76f8\u5bf9\u9661\u5ced\u7684\u5b66\u4e60\u66f2\u7ebf\uff08\u867d\u7136\u6211\u4eec\u7684\u6700\u521d\u76ee\u6807\u662f\u901a\u8fc7\u672c\u7bc7\u6559\u7a0b\u5e2e\u52a9\u5927\u5bb6\u514b\u670d\u8fd9\u4e2a\u56f0\u96be\uff09\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u7206\u9732\u4e8e\u5185\u90e8\u7ec6\u8282\uff0c\u548c\u9519\u7efc\u590d\u6742\u7684\u6f5c\u5728 Windows Installer \u6280\u672f\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u7ecf\u9a8c\u4e0d\u8db3\u7684\u5f00\u53d1\u8005\u6216\u8005\u90a3\u4e9b\u4e0d\u771f\u6b63\u9700\u8981\u65e0\u9650\u548c\u5e76\u884c\u6267\u884c\u65b9\u6848\uff0c\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u4e8eGUI\u7684\u5b89\u88c5\u6388\u6743\u5de5\u5177\u53ef\u80fd\u4f1a\u66f4\u597d\uff0c\u8fd9\u79cd\u7b80\u5355\u7c7b\u578b\u7684\u5b89\u88c5\u5f00\u53d1\u5de5\u5177\u65e2\u6709\u5546\u4e1a\u7684\u548c\u514d\u8d39\u7684\u5f00\u6e90\u89e3\u51b3\u65b9\u6848\u53ef\u4f9b\u4f7f\u7528\u3002 To summarize the features and advantages of the toolset: declarative approach unrestricted access to Windows Installer functionality source code instead of GUI-based assembly of information complete integration into application build processes possible integration with application development support for team development, both in-house and third-party free, open source \u603b\u7ed3\u4e00\u4e0b WiX \u7684\u7279\u70b9\u4ee5\u53ca\u5176\u5177\u5907\u7684\u4f18\u52bf\uff1a \u58f0\u660e\u5f0f\u65b9\u6cd5 \u65e0\u9650\u5236\u7684\u4f7f\u7528 Windows Installer \u6280\u672f \u6e90\u7801\u800c\u975e\u57fa\u4e8eGUI\u7684\u4fe1\u606f\u88c5\u914d \u5b8c\u6574\u96c6\u6210\u4e8e\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u8fc7\u7a0b \u53ef\u96c6\u6210\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b \u652f\u6301\u56e2\u961f\u5f00\u53d1\uff0c\u5185\u90e8\u6216\u8005\u7b2c\u4e09\u65b9 \u514d\u8d39\u3001\u5f00\u6e90 You might wonder if WiX is already mature enough for the installation of large, complex applications with a large number of files to be deployed. Well, Microsoft itself uses WiX with all its major software packages. Just as an example, the setup of Microsoft Office was developed entirely with WiX. \u4f60\u53ef\u80fd\u4f1a\u6000\u7591 WiX \u5bf9\u4e8e\u62e5\u6709\u5927\u91cf\u6587\u4ef6\u9700\u8981\u90e8\u7f72\u7684\u5927\u578b\u590d\u6742\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u88c5\u662f\u5426\u5df2\u7ecf\u8db3\u591f\u6210\u719f\u3002\u597d\u5427\uff0cMicrosoft \u5df2\u7ecf\u4f7f\u7528 WiX \u6765\u5904\u7406\u6240\u6709\u7684\u4e3b\u8981\u8f6f\u4ef6\u5305\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0cMicrosoft Office \u5c31\u662f\u5b8c\u5168\u4f7f\u7528 WiX \u5f00\u53d1\u7684\u3002 I'd like to express my thanks to Rob Mensching for creating the toolset in the first place, and to Neil Sleightholm, Vadym Stetsyak, Robert Pickering, Marc Borgers, John DeSoi, Markus Karg, Greg Glass, Stefan Kr\u00fcger, Nobuo Kihara, Phil Wilson, Peter Tewkesbury, Nicholas Muguira, David Adams, Mike Green, Chesong Lee and Christophe Michel for the material contributed to the tutorial. (Ed. note: FireGiant wants to thank G\u00e1bor DE\u00c1K JAHN for creating and hosting the WiX Tutorial for so many years.) \u6211\u60f3\u5411\u6700\u5148\u521b\u5efa\u8fd9\u5957\u5de5\u5177\u7684 Rob Mensching \u8868\u8fbe\u8c22\u610f\uff0c\u540c\u65f6\u8fd8\u8981\u611f\u8c22 Neil Sleightholm, Vadym Stetsyak, Robert Pickering, Marc Borgers, John DeSoi, Markus Karg, Greg Glass, Stefan Kr\u00fcger, Nobuo Kihara, Phil Wilson, Peter Tewkesbury, Nicholas Muguira, David Adams, Mike Green, Chesong Lee and Christophe Michel\uff0c\u8c22\u8c22\u4ed6\u4eec\u5bf9\u4e8e\u672c\u6559\u7a0b\u7684\u8d21\u732e\u3002 \uff08\u6ce8\u610f\uff1aFireGiant \u611f\u8c22 G\u00e1bor DE\u00c1K JAHN \u591a\u5e74\u6765\u521b\u5efa\u548c\u642d\u5efa WiX \u6559\u7a0b\u6240\u4ed8\u51fa\u7684\u52aa\u529b\u3002\uff09 Pages in this Chapter Getting Started User Interface Events and Actions Upgrades and Modularization Net and .NET COM, Expression Syntax, Miscellanea SQL User Interface Revisited Transforms Standard Libraries Localization","title":"WiXToolset"},{"location":"language_learning/WiXTutorial/WiX_Toolset_Tutorial/#wix-toolset-tutorial","text":"The WiX Toolset is a set of tools that build Windows installation packages from XML source code. The toolset provides both a command line environment that developers may either integrate into their old style Makefile build processes or use the newer MSBuild technology from inside integrated development environments like Microsoft Visual Studio or SharpDevelop to build their MSI and MSM setup packages. WiX \u662f\u5229\u7528XML\u683c\u5f0f\u6e90\u7801\u6765\u6784\u5efaWinxdows\u73af\u5883\u4e0b\u7684\u5b89\u88c5\u7a0b\u5e8f\u5305\u7684\u4e00\u5957\u5de5\u5177\u96c6\u5408\u3002\u5b83\u63d0\u4f9b\u4e86\u547d\u4ee4\u884c\u548cIDE\u6574\u5408\u4e24\u79cd\u6784\u5efa\u73af\u5883\u3002\u5f00\u53d1\u8005\u53ef\u4ee5\u5c06\u5176\u6574\u5408\u5230\u6bd4\u8f83\u8001\u7684 Makefile \u6784\u5efa\u8fc7\u7a0b\uff0c\u6216\u8005\u5305\u542bMSBuild\u6280\u672f\u7684IDE\uff08\u6bd4\u5982\uff0cVisual Studio\u3001SharpDevelop\uff09\u4e2d\u6765\u6784\u5efa\u4ed6\u4eec\u81ea\u5df1\u7684MSI\u548cMSM\u5b89\u88c5\u5305\u3002 WiX is an open source project, originally developed by Microsoft and maintained by Rob Mensching. You can download the latest binary and source code releases . This tutorial covers the stable version 3.x. WiX\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u5fae\u8f6f\u5b8c\u6210\u6700\u521d\u5f00\u53d1\uff0c\u7531 Rob Mensching \u8fdb\u884c\u7ef4\u62a4\u3002\u4f60\u53ef\u4ee5\u4e0b\u8f7d\u6700\u65b0\u7684\u4e8c\u8fdb\u5236\u6216\u8005\u6e90\u7801 \u53d1\u5e03\u7248\u672c \u3002\u672c\u6559\u7a0b\u8bbe\u8ba1\u5185\u5bb9\u652f\u6301\u7a33\u5b9a\u76843.0\u4ee5\u540e\u7684\u7248\u672c\u3002 The toolset is written in C# and requires the .NET Framework to run. However, this only applies to the toolset itself. The installation packages you create with the toolset do not require any extra framework or software to be installed on the target computer. Similarly, there might be a few additional utilities required for some special applications (merge modules, patches) but only on your build computer, the client will only need the finished and self-contained installer package, nothing else. WiX \u5de5\u5177\u96c6\u7531C#\u8bed\u8a00\u5f00\u53d1\u5e76\u9700\u8981.NET Framework\u73af\u5883\u624d\u80fd\u8fd0\u884c\uff0c\u4f46\u8fd9\u4ec5\u4ec5\u9488\u5bf9 WiX \u5de5\u5177\u96c6\u672c\u8eab\u3002\u5728\u76ee\u6807\u5ba2\u6237\u7684\u4e3b\u673a\u4e0a\u8fd0\u884c\u7528WiX\u521b\u5efa\u7684\u5b89\u88c5\u5305\u5e76\u4e0d\u9700\u8981\u5b89\u88c5\u5176\u4ed6\u989d\u5916\u7684\u6846\u67b6\u6216\u8005\u8f6f\u4ef6\u3002\u540c\u6837\u5730\uff0c\u5728\u5b89\u88c5\u5305\u6784\u5efa\u4e3b\u673a\u4e0a\u4e5f\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u7279\u6b8a\u7684\u5de5\u5177\u5305\uff0c\u4f46\u662f\u5ba2\u6237\u673a\u5668\u4e0a\u53ea\u9700\u8981\u4f60\u5236\u4f5c\u597d\u7684\u72ec\u7acb\u7684\u5b89\u88c5\u5305\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u3002 There is a friendly community of WiX developers and users in dedicated mailing lists . This is the best place to ask for advice about any aspect of WiX. As is usual with such mailing lists today, you have to subscribe first before you can ask any question; without that, the list users couldn't cope with spam... WiX\u62e5\u6709\u4e0e\u4e00\u4e2a\u53cb\u597d\u7684\u5f00\u53d1\u8005\u548c\u7528\u6237\u793e\u533a\uff0c\u8be6\u89c1 \u90ae\u4ef6\u5217\u8868 \u3002\u8fd9\u91cc\u662f\u5bfb\u6c42WiX\u4efb\u610f\u65b9\u9762\u95ee\u9898\u5efa\u8bae\u7684\u6700\u597d\u5730\u65b9\u3002\u63d0\u95ee\u524d\u8bf7\u5148\u8ba2\u9605\u90ae\u4ef6\u5217\u8868\uff0c\u5426\u5219\u4f1a\u88ab\u4f5c\u4e3a\u5783\u573e\u90ae\u4ef6\u3002","title":"WiX Toolset Tutorial"},{"location":"language_learning/WiXTutorial/WiX_Toolset_Tutorial/#introduction","text":"Finishing the development of an application is still far from ending it. During the recent years, users have learned to expect a full-fledged, complete setup solution bundled with your product---and as the setup is the very first part of the application the end user becomes acquainted with, the importance of its integrity and reliability cannot be overestimated. \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684\u5b8c\u6210\u8ddd\u79bb\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u5f00\u53d1\u7684\u5b8c\u6210\u8fd8\u76f8\u5dee\u751a\u8fdc\u3002\u8fd1\u5e74\u6765\uff0c\u7ec8\u7aef\u7528\u6237\u5e0c\u671b\u60a8\u7684\u4ea7\u54c1\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\uff0c\u6bd5\u7adf\u5b89\u88c5\u90e8\u7f72\u662f\u7ec8\u7aef\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6b65\uff0c\u5176\u5b8c\u6574\u548c\u53ef\u9760\u7684\u91cd\u8981\u6027\u600e\u4e48\u4f30\u8ba1\u90fd\u4e0d\u8fc7\u5206\u3002 Traditional setup tools used a programmatic, script-based approach to describe the various steps involved in the deployment of the application to be installed on the target machine: files to be copied, registry settings to be created, device drivers and services to be started. The technology behind Windows Installer, while it maintains a comparable look and feel for the end user, underwent important philosophical changes. The fundamental change was to move from the imperative description to a declarative one: rather than to describe the individual steps of installation, the declarative form specifies the state the target machine should be left in after various phases of installation and uninstallation. While the imperative description seems to be quite sufficient until some error occurs, the declarative one makes it possible to cope with unexpected conditions, differing target machine environments, aborted installations, shared resources. It is of paramount importance for setup developers to make sure that whatever happens during the process, the target machine should be left in a known, stable state, without introducing any detrimental side effects. \u4f20\u7edf\u5b89\u88c5\u5de5\u5177\u4f7f\u7528\u7f16\u7a0b\u5f0f\u7684\u3001\u57fa\u4e8e\u811a\u672c\u7684\u65b9\u6cd5\u53bb\u63cf\u8ff0\u5b89\u88c5\u6b65\u9aa4\uff0c\u8fd9\u6d89\u53ca\u4ece\u7a0b\u5e8f\u7684\u5f00\u53d1\u5230\u5b89\u88c5\u5728\u76ee\u6807\u673a\u5668\u4e0a\uff1a\u62f7\u8d1d\u6587\u4ef6\u3001\u6ce8\u518c\u8868\u521b\u5efa\u3001\u8bbe\u5907\u9a71\u52a8\u548c\u670d\u52a1\u7684\u5f00\u542f\u3002Windows Installer \u6280\u672f\u80cc\u540e\u7ecf\u5386\u4e86\u91cd\u8981\u7684\u54f2\u5b66\u53d8\u5316\uff0c\u867d\u7136\u7ec8\u7aef\u7528\u6237\u7684\u89c2\u611f\u672a\u53d1\u751f\u660e\u663e\u53d8\u5316\u3002\u6700\u57fa\u672c\u7684\u53d8\u5316\u5c31\u662f\u5b89\u88c5\u90e8\u7f72\u4ece\u7f16\u7a0b\u6027\u63cf\u8ff0\u8f6c\u53d8\u4e3a\u58f0\u660e\u6027\u63cf\u8ff0\uff1a\u4e0d\u518d\u662f\u8be6\u7ec6\u63cf\u8ff0\u5b89\u88c5\u6d41\u7a0b\u4e2d\u7684\u6bcf\u4e00\u5c0f\u6b65\uff0c\u58f0\u660e\u6027\u63cf\u8ff0\u89c4\u5b9a\u4e86\u76ee\u6807\u673a\u5668\u5728\u5404\u79cd\u5b89\u88c5\u6216\u8005\u5378\u8f7d\u9636\u6bb5\u4e2d\u5fc5\u987b\u5904\u4e8e\u7684\u72b6\u6001\u3002\u4e00\u65e6\u51fa\u73b0\u5f02\u5e38\uff0c\u7f16\u7a0b\u6027\u63cf\u8ff0\u5c31\u6ca1\u6709\u770b\u8d77\u6765\u7684\u90a3\u6837\u7a33\u5065\u4e86\uff0c\u800c\u58f0\u660e\u6027\u63cf\u8ff0\u5219\u53ef\u4ee5\u5904\u7406\u5f02\u5e38\u60c5\u51b5\uff08\u5982\uff0c\u76ee\u6807\u673a\u5668\u73af\u5883\u5dee\u5f02\uff0c\u4e2d\u6b62\u5b89\u88c5\u3001\u5171\u4eab\u8d44\u6e90\u7b49\uff09\u3002\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u65e0\u8bba\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff0c\u4fdd\u8bc1\u76ee\u6807\u8ba1\u7b97\u673a\u5904\u4e8e\u53ef\u77e5\u7684\u7a33\u5b9a\u72b6\u6001\u800c\u672a\u5f15\u5165\u4efb\u4f55\u6709\u5bb3\u526f\u4f5c\u7528\uff0c\u5bf9\u4e8e\u5b89\u88c5\u5305\u5f00\u53d1\u8005\u6765\u8bf4\u90fd\u662f\u6700\u91cd\u8981\u7684\u3002 The developers of the widely used setup tools also embraced the new technology and started to offer new versions of their tools to create setup programs of this nature. However, as the experience of many developers shows, while these tools are perfectly capable of creating simpler installation packages, they often prove too limiting, inflexible when it comes to more complex requirements. \u6d41\u884c\u7684\u5b89\u88c5\u5305\u5236\u4f5c\u5de5\u5177\u7684\u5f00\u53d1\u8005\u4eec\u5f53\u7136\u4e5f\u4f1a\u62e5\u62b1\u8fd9\u4e00\u65b0\u6280\u672f\uff0c\u5e76\u63d0\u4f9b\u4ed6\u4eec\u7684\u65b0\u7248\u672c\u5b89\u88c5\u5de5\u5177\u6765\u521b\u5efa\u8fd9\u79cd\u7c7b\u578b\u7684\u5b89\u88c5\u7a0b\u5e8f\u3002\u867d\u7136\u8fd9\u4e9b\u5de5\u5177\u53ef\u4ee5\u5b8c\u7f8e\u7684\u521b\u5efa\u7b80\u5355\u7c7b\u578b\u7684\u5b89\u88c5\u5305\uff0c\u4f46\u662f\u4ece\u8bb8\u591a\u5f00\u53d1\u8005\u5b9e\u9645\u7684\u7ecf\u9a8c\u6765\u770b\uff0c\u4ed6\u4eec\u7ecf\u5e38\u5728\u9762\u4e34\u66f4\u52a0\u590d\u6742\u7684\u5b89\u88c5\u90e8\u7f72\u9700\u6c42\u65f6\u8fc7\u4e8e\u53d7\u9650\u5236\u800c\u663e\u5f97\u4e0d\u7075\u6d3b\u3002 The toolset we are about to introduce, WiX, uses a different approach. Instead of a tool with a graphical interface that allows the developers to collect the files and other related tasks making up the installation process manually, it is much more like a programming language. Integrating perfectly with the usual process of creating applications, it uses a text file (based on the XML format) to describe all the elements of the installation process. The toolset has a compiler and a linker that will create the setup program just like our usual compiler creates our application from the source files. Therefore, WiX can be made part of any automated application build process very easily, be that based either on the classical technology of makefiles or the similar features of contemporary integrated development environments. \u8fd9\u91cc\u6211\u4eec\u5c06\u9686\u91cd\u4ecb\u7ecd\u7684\u5b89\u88c5\u5de5\u5177\u2014\u2014WiX\uff0c\u4f7f\u7528\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u3002\u5b83\u5e76\u4e0d\u662f\u76f4\u63a5\u5141\u8bb8\u5f00\u53d1\u8005\u901a\u8fc7\u56fe\u5f62\u754c\u9762\u624b\u52a8\u5730\u9009\u62e9\u6587\u4ef6\u548c\u5176\u4ed6\u76f8\u5173\u4efb\u52a1\u6765\u642d\u5efa\u5b89\u88c5\u8fc7\u7a0b\uff0c\u800c\u66f4\u50cf\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u53ef\u4ee5\u5b8c\u7f8e\u5730\u6574\u5408\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u57fa\u4e8eXML\u683c\u5f0f\u7684\u6587\u672c\u6587\u4ef6\u6765\u63cf\u8ff0\u6240\u6709\u7684\u5b89\u88c5\u8fc7\u7a0b\u3002\u5de5\u5177\u96c6\u6709\u4e00\u4e2a\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u6765\u521b\u5efa\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5c31\u50cf\u5e38\u89c1\u7f16\u8bd1\u5668\u4ece\u6e90\u7801\u6587\u4ef6\u7f16\u8bd1\u5f97\u5230\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u3002\u56e0\u6b64\uff0cWiX \u53ef\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u6765\u642d\u5efa\u5e76\u5b9e\u73b0\u81ea\u52a8\u5316\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u8fc7\u7a0b\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7makefile\u4f20\u7edf\u6280\u672f\uff0c\u6216\u8005\u7c7b\u4f3c\u4e8e\u73b0\u4ee3IDE\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0 In addition to this integration, providing basically nothing more but developer comfort, WiX offers another level of integration, far more advantageous than the first one: the integration of the setup development process with that of the application. Traditionally, setup programs were only written when the main application had already been finished; often even by different developers. This approach requires a tedious and error prone process of collecting information about all the resources making up the application. While the files themselves are usually obvious, registry entries, services and most forms of inter-resource dependencies are often hard to reconstruct in a later stage: if solid development documentation is lacking, the setup developers have to collect all pieces of information from the original developers or try to extract it from the source code. \u9664\u4e86\u5e95\u5c42\u4e0a\u6ca1\u6709\u4ec0\u4e48\u65b0\u7684\u4e1c\u897f\u4ec5\u4ec5\u7ed9\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4fbf\u5229\u7684\u6574\u5408\uff0cWiX \u8fd8\u63d0\u4f9b\u4e86\u4f18\u52bf\u8fdc\u8d85\u524d\u4e00\u79cd\u6574\u5408\u7684\u53e6\u5916\u4e00\u4e2a\u5c42\u6b21\u7684\u6574\u5408\uff1a\u5b89\u88c5\u5305\u7684\u5f00\u53d1\u8fc7\u7a0b\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u8fc7\u7a0b\u6574\u5408\u5728\u4e00\u8d77\u3002\u4f20\u7edf\u4e0a\uff0c\u5b89\u88c5\u5305\u7a0b\u5e8f\u7684\u7f16\u5199\u53ea\u53d1\u751f\u5728\u4e3b\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u5df2\u7ecf\u5b8c\u6210\u9636\u6bb5\uff0c\u800c\u4e14\u5e38\u5e38\u662f\u5176\u4ed6\u4eba\u800c\u975e\u5e94\u7528\u5f00\u53d1\u4eba\u5458\u6765\u5199\u3002\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u5197\u957f\u6613\u9519\u7684\u6536\u96c6\u7ec4\u6210\u5e94\u7528\u7a0b\u5e8f\u7684\u8d44\u6e90\u4fe1\u606f\u7684\u8fc7\u7a0b\u3002\u867d\u7136\u8fd9\u4e9b\u6587\u4ef6\u4e00\u822c\u6bd4\u8f83\u663e\u773c\uff0c\u4f46\u662f\uff0c\u6ce8\u518c\u8868\u3001\u670d\u52a1\u548c\u5927\u90e8\u5206\u5185\u90e8\u8d44\u6e90\u4f9d\u8d56\u7684\u7a97\u4f53\uff0c\u662f\u5f88\u96be\u5728\u4e4b\u540e\u7684\u9636\u6bb5\u8fdb\u884c\u91cd\u65b0\u6784\u5efa\u7684\u3002\u5982\u679c\u7f3a\u4e4f\u5f3a\u7c7b\u578b\u7684\u5f00\u53d1\u6587\u6863\uff0c\u5b89\u88c5\u5f00\u53d1\u5de5\u7a0b\u5e08\u4e0d\u5f97\u4e0d\u4ece\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u5de5\u7a0b\u5e08\u90a3\u91cc\u6536\u96c6\u6240\u6709\u7684\u4fe1\u606f\u788e\u7247\uff0c\u6216\u8005\u4ece\u6e90\u7801\u4e2d\u62bd\u53d6\u8fd9\u4e9b\u4fe1\u606f\u3002 In an integrated application/setup development environment, the original developer should modify the WiX source files in sync with the application development. As soon as a new module has been started, a new registry entry, service or other dependency has been coded, the appropriate setup modification should be made in parallel. Using this approach, no important information will ever be lost and, as a bonus, the setup program will be practically finished together with the application itself. \u5728\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f/\u5b89\u88c5\u5305\u7a0b\u5e8f\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u5de5\u7a0b\u5e08\u53ef\u4ee5\u5728\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u7684\u540c\u65f6\uff0c\u540c\u6b65\u4fee\u6539 WiX \u5b89\u88c5\u6e90\u7801\u6587\u4ef6\u3002\u53ea\u8981\u5f00\u59cb\u4e00\u4e2a\u65b0\u6a21\u5757\u7684\u5f00\u53d1\uff0c\u65b0\u6ce8\u518c\u8868\u3001\u670d\u52a1\u6216\u8005\u5176\u4ed6\u4f9d\u8d56\u90fd\u8981\u88ab\u8bbe\u7f6e\uff0c\u9002\u5f53\u7684\u5b89\u88c5\u7a0b\u5e8f\u8c03\u6574\u4e5f\u5e94\u8be5\u540c\u6b65\u8fdb\u884c\u3002\u5229\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u91cd\u8981\u4fe1\u606f\u518d\u4e5f\u4e0d\u4f1a\u9057\u5931\uff0c\u540c\u65f6\uff0c\u5b89\u88c5\u5305\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u548c\u5e94\u7528\u7a0b\u5e8f\u540c\u6b65\u5b8c\u6210\u3002 As a consequence, WiX is not equally suited to all developers. The relatively steep learning curve (although our primary goal is to help overcome this difficulty with our tutorial) and the unavoidable exposure to the internal details and, sometimes, intricacies of the underlying Windows Installer technology suggest that less experienced developers or those who don't really need the unlimited and unparalleled performance WiX can offer might be better served by a simpler, GUI-based setup authoring tool, of which there are both commercial and freeware solutions available. \u56e0\u6b64\uff0cWiX \u4e0d\u4e00\u5b9a\u4f1a\u9002\u5e94\u4e8e\u6240\u6709\u7684\u5f00\u53d1\u8005\u3002\u7531\u4e8e WiX \u76f8\u5bf9\u9661\u5ced\u7684\u5b66\u4e60\u66f2\u7ebf\uff08\u867d\u7136\u6211\u4eec\u7684\u6700\u521d\u76ee\u6807\u662f\u901a\u8fc7\u672c\u7bc7\u6559\u7a0b\u5e2e\u52a9\u5927\u5bb6\u514b\u670d\u8fd9\u4e2a\u56f0\u96be\uff09\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u7206\u9732\u4e8e\u5185\u90e8\u7ec6\u8282\uff0c\u548c\u9519\u7efc\u590d\u6742\u7684\u6f5c\u5728 Windows Installer \u6280\u672f\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u7ecf\u9a8c\u4e0d\u8db3\u7684\u5f00\u53d1\u8005\u6216\u8005\u90a3\u4e9b\u4e0d\u771f\u6b63\u9700\u8981\u65e0\u9650\u548c\u5e76\u884c\u6267\u884c\u65b9\u6848\uff0c\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u57fa\u4e8eGUI\u7684\u5b89\u88c5\u6388\u6743\u5de5\u5177\u53ef\u80fd\u4f1a\u66f4\u597d\uff0c\u8fd9\u79cd\u7b80\u5355\u7c7b\u578b\u7684\u5b89\u88c5\u5f00\u53d1\u5de5\u5177\u65e2\u6709\u5546\u4e1a\u7684\u548c\u514d\u8d39\u7684\u5f00\u6e90\u89e3\u51b3\u65b9\u6848\u53ef\u4f9b\u4f7f\u7528\u3002 To summarize the features and advantages of the toolset: declarative approach unrestricted access to Windows Installer functionality source code instead of GUI-based assembly of information complete integration into application build processes possible integration with application development support for team development, both in-house and third-party free, open source \u603b\u7ed3\u4e00\u4e0b WiX \u7684\u7279\u70b9\u4ee5\u53ca\u5176\u5177\u5907\u7684\u4f18\u52bf\uff1a \u58f0\u660e\u5f0f\u65b9\u6cd5 \u65e0\u9650\u5236\u7684\u4f7f\u7528 Windows Installer \u6280\u672f \u6e90\u7801\u800c\u975e\u57fa\u4e8eGUI\u7684\u4fe1\u606f\u88c5\u914d \u5b8c\u6574\u96c6\u6210\u4e8e\u5e94\u7528\u7a0b\u5e8f\u6784\u5efa\u8fc7\u7a0b \u53ef\u96c6\u6210\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b \u652f\u6301\u56e2\u961f\u5f00\u53d1\uff0c\u5185\u90e8\u6216\u8005\u7b2c\u4e09\u65b9 \u514d\u8d39\u3001\u5f00\u6e90 You might wonder if WiX is already mature enough for the installation of large, complex applications with a large number of files to be deployed. Well, Microsoft itself uses WiX with all its major software packages. Just as an example, the setup of Microsoft Office was developed entirely with WiX. \u4f60\u53ef\u80fd\u4f1a\u6000\u7591 WiX \u5bf9\u4e8e\u62e5\u6709\u5927\u91cf\u6587\u4ef6\u9700\u8981\u90e8\u7f72\u7684\u5927\u578b\u590d\u6742\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u88c5\u662f\u5426\u5df2\u7ecf\u8db3\u591f\u6210\u719f\u3002\u597d\u5427\uff0cMicrosoft \u5df2\u7ecf\u4f7f\u7528 WiX \u6765\u5904\u7406\u6240\u6709\u7684\u4e3b\u8981\u8f6f\u4ef6\u5305\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0cMicrosoft Office \u5c31\u662f\u5b8c\u5168\u4f7f\u7528 WiX \u5f00\u53d1\u7684\u3002 I'd like to express my thanks to Rob Mensching for creating the toolset in the first place, and to Neil Sleightholm, Vadym Stetsyak, Robert Pickering, Marc Borgers, John DeSoi, Markus Karg, Greg Glass, Stefan Kr\u00fcger, Nobuo Kihara, Phil Wilson, Peter Tewkesbury, Nicholas Muguira, David Adams, Mike Green, Chesong Lee and Christophe Michel for the material contributed to the tutorial. (Ed. note: FireGiant wants to thank G\u00e1bor DE\u00c1K JAHN for creating and hosting the WiX Tutorial for so many years.) \u6211\u60f3\u5411\u6700\u5148\u521b\u5efa\u8fd9\u5957\u5de5\u5177\u7684 Rob Mensching \u8868\u8fbe\u8c22\u610f\uff0c\u540c\u65f6\u8fd8\u8981\u611f\u8c22 Neil Sleightholm, Vadym Stetsyak, Robert Pickering, Marc Borgers, John DeSoi, Markus Karg, Greg Glass, Stefan Kr\u00fcger, Nobuo Kihara, Phil Wilson, Peter Tewkesbury, Nicholas Muguira, David Adams, Mike Green, Chesong Lee and Christophe Michel\uff0c\u8c22\u8c22\u4ed6\u4eec\u5bf9\u4e8e\u672c\u6559\u7a0b\u7684\u8d21\u732e\u3002 \uff08\u6ce8\u610f\uff1aFireGiant \u611f\u8c22 G\u00e1bor DE\u00c1K JAHN \u591a\u5e74\u6765\u521b\u5efa\u548c\u642d\u5efa WiX \u6559\u7a0b\u6240\u4ed8\u51fa\u7684\u52aa\u529b\u3002\uff09","title":"Introduction"},{"location":"language_learning/WiXTutorial/WiX_Toolset_Tutorial/#pages-in-this-chapter","text":"Getting Started User Interface Events and Actions Upgrades and Modularization Net and .NET COM, Expression Syntax, Miscellanea SQL User Interface Revisited Transforms Standard Libraries Localization","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/0_Getting_Started/0_Getting_Started/","text":"Getting Started As we have already mentioned in the introduction, the WiX toolset uses XML source files describing the components that make up the installation process of our application additional data about shortcuts, registry or .ini file changes, services and similar. In addition to the files you want to copy to the disk of the user, the installation package can also carry helper files that take part in the installation but will not be actually installed (these can include dialogs, icons and bitmaps for the installation UI, license or readme files, or custom DLLs to carry out any programmatic task the Windows Installer doesn't support, including any kind of user registration or key checking logic you might want to implement). \u5728\u524d\u9762\u7684\u5f15\u8a00\u4e2d\uff0c\u6211\u4eec\u63d0\u5230 WiX \u4f7f\u7528 XML \u683c\u5f0f\u7684\u6e90\u7801\u6587\u4ef6\u63cf\u8ff0\u7ec4\u4ef6\u3001\u670d\u52a1\u7b49\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u7ec4\u6210\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u88c5\u8fc7\u7a0b\uff0c\u4ed6\u4eec\u63cf\u8ff0\u4e86\u5e94\u7528\u7a0b\u5e8f\u9644\u5c5e\u6570\u636e\u2014\u2014\u5feb\u6377\u952e\u3001\u6ce8\u518c\u8868\u3001.ini\u6587\u4ef6\u7684\u53d8\u5316\u3002\u9664\u4e86\u62f7\u8d1d\u5230\u7528\u6237\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u5916\uff0c\u5b89\u88c5\u5305\u4e5f\u53ef\u4ee5\u643a\u5e26\u4e00\u7c7b\u7279\u6b8a\u7684\u5e2e\u52a9\u6587\u6863\uff0c\u5373\u53c2\u4e0e\u5b89\u88c5\u8fc7\u7a0b\u4f46\u4e0d\u4f1a\u88ab\u5b89\u88c5\u5728\u7528\u6237\u78c1\u76d8\u4e0a\uff08\u8fd9\u4e9b\u5e2e\u52a9\u6587\u6863\u5305\u542b\u5bf9\u8bdd\u6846\u3001\u89c4\u5b9aUI\u7684\u56fe\u6807\u4e0e\u8d34\u56fe\u3001\u8bb8\u53ef\u6587\u4ef6\u6216\u81ea\u8ff0\u6587\u4ef6\u3001\u81ea\u5b9a\u4e49Windows Installer\u4e0d\u652f\u6301\u7684\u6267\u884c\u7f16\u7a0b\u5f0f\u4efb\u52a1\u7684DLL\uff0c\u8fd8\u5305\u62ec\u4efb\u610f\u7c7b\u578b\u7528\u6237\u6ce8\u518c\uff0c\u6216\u8005\u4f60\u60f3\u6267\u884c\u7684\u5173\u952e\u68c0\u64e6\u903b\u8f91\uff09\u3002 All these will be described in the source files fed to the WiX compiler. The toolset consists of several parts and we will use two of them to compile our installation packages. Assuming we have prepared a Sample.wxs file, the command \u6240\u6709\u8fd9\u4e9b\u4fdd\u5b58\u5728 XML \u6e90\u6587\u4ef6\u4e2d\u7684\u63cf\u8ff0\u5173\u952e\u5b57\u90fd\u4f1a\u88ab\u6295\u9012\u7ed9 WiX \u7f16\u8bd1\u5668\u3002\u5de5\u5177\u96c6\u5305\u542b\u4e86\u597d\u51e0\u4e2a\u5de5\u5177\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5176\u4e2d\u4e24\u4e2a\u6765\u7f16\u8bd1\u5b89\u88c5\u7a0b\u5e8f\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u4e86\u4e00\u4e2a\u5b89\u88c5\u6e90\u7801\u6587\u4ef6 Sample.wxs \uff0c\u547d\u4ee4 candle.exe Sample.wxs will perform the first phase of the compilation, creating Sample.wixobj , a half-digested file (this one is still XML but its internal structure is irrelevant to us; think about it as an object file in usual compiler parlance). The second command \u5c06\u6267\u884c\u6267\u884c\u7f16\u8bd1\u7684\u7b2c\u4e00\u9636\u6bb5\uff0c\u521b\u5efa\u51fa Sample.wixobj \uff0c\u4e00\u4e2a\u534a\u6d88\u5316\u6027\u8d28\u7684\u4e2d\u95f4\u6587\u4ef6\uff08\u8fd9\u4ecd\u7136\u662f XML\u683c\u5f0f\u7684\uff0c\u4f46\u5176\u5185\u90e8\u7ed3\u6784\u5df2\u7ecf\u4e0e\u6211\u4eec\u65e0\u5173\u4e86\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u662f\u5e38\u89c1\u7f16\u8bd1\u8fc7\u7a0b\u7684\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\uff09\u3002\u7b2c\u4e8c\u4e2a\u547d\u4ee4 light.exe Sample.wixobj will turn this intermediate representation into our final package, a Sample.msi file. Much like a compiler and a linker. Actually, even more: the linker, unless we specifically tell it not to do so, also runs a verification step that checks the finished installer database for hundreds of possible issues and problems. \u5c06\u8fd9\u4e2a\u4e2d\u95f4\u6587\u6863\u8f6c\u6362\u6210\u6700\u7ec8\u5b89\u88c5\u5305\uff0c Sample.msi \u3002\u8fd9\u4e24\u4e2a\u5de5\u5177\u975e\u5e38\u50cf\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u3002\u5b9e\u9645\u4e0a\uff0c \u9664\u975e\u660e\u786e\u544a\u8bc9\u94fe\u63a5\u5668\u4e0d\u8981\u8fd9\u6837\u505a\uff0c\u5426\u5219\u4f1a\u8fd0\u884c\u9a8c\u8bc1\u6b65\u9aa4\uff0c\u68c0\u9a8c\u5b89\u88c5\u5305\u6570\u636e\u5e93\u6570\u4ee5\u767e\u8ba1\u7684\u95ee\u9898\u3002 As is usual with compilers today, you are not limited to the command line any more. Integrated development environments like Microsoft Visual Studio or SharpDevelop also have support for WiX projects: either coming bundled with the IDE itself or as an addin. In the case of Visual Studio, the WiX package installs the VS support automatically. Using this approach, you can create a separate setup solution or even include the setup as a part project of a complete solution. In this case, you don't even have to leave your programming environment in order to build the final setup package. \u4e0e\u4eca\u5929\u7684\u7f16\u8bd1\u5668\u4e00\u6837\uff0cWiX \u5e76\u4e0d\u9650\u5236\u4e8e\u547d\u4ee4\u884c\u65b9\u5f0f\u3002WiX \u4e5f\u652f\u6301\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u5982 Microsoft Visual Studio\u3001SharpDevelop\uff0c\u8981\u4e48\u76f4\u63a5\u7ed1\u5b9a\u5728IDE\u4e2d\uff0c\u8981\u4e48\u4f5c\u4e3a\u5176\u4e2d\u7684\u4e00\u4e2a\u63d2\u4ef6\u3002\u5728 Visual Studio\u4e2d\uff0cWiX \u7684\u5b89\u88c5\u5305\u4f1a\u81ea\u52a8\u5b89\u88c5 VS \u76f8\u5173\u652f\u6301\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5206\u79bb\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u751a\u81f3\u5c06\u5b89\u88c5\u9879\u76ee\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u89e3\u51b3\u65b9\u6848\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u79bb\u5f00\u7f16\u7a0b\u73af\u5883\u53bb\u6784\u5efa\u6700\u7ec8\u7684\u5b89\u88c5\u5305\u3002 But, although the analogy of a compiler and linker is very straightforward and might help us understand how WiX actually builds installation packages, you shouldn't consider the WiX source we will start to write in a minute anything like a script or programming language. We won't collect steps or operations required to install our application. The .msi file we want to distribute our application with is not a setup application but an installation database. The programming logic, the knowledge about how to install an application, how to modify registry keys, how to create shortcuts, users and network shares, how to manipulate web directories or services resides in Windows Installer. Our setup file only describes what we expect Windows Installer to do and provides the files to be deployed (as well as interface elements used in the process). \u867d\u7136\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u7c7b\u6bd4\u975e\u5e38\u76f4\u89c2\uff0c\u6709\u52a9\u4e8e\u7406\u89e3 WiX \u5982\u4f55\u6784\u5efa\u5b89\u88c5\u5305\uff0c\u4f46\u662f\u4eba\u4eec\u4e0d\u8981\u8003\u8651\u5728\u6570\u5206\u949f\u5185\u5199\u7684\u6b63\u5982\u811a\u672c\u6216\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\u7684 WiX \u6e90\u7801\u3002\u6211\u4eec\u4e0d\u9700\u8981\u6536\u96c6\u7ec6\u81f4\u7684\u5b89\u88c5\u6267\u884c\u6b65\u9aa4\u6216\u8005\u64cd\u4f5c\u8981\u6c42\u3002\u6211\u4eec\u60f3\u8981\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u7684 .msi \u6587\u4ef6\u4e0d\u662f\u5177\u4f53\u6267\u884c\u7684\u5b89\u88c5\u7a0b\u5e8f\u800c\u662f\u5b89\u88c5\u6570\u636e\u5e93\u3002\u6709\u5173\u5982\u4f55\u5b89\u88c5\u3001\u5982\u4f55\u4fee\u6539\u6ce8\u518c\u8868\u3001\u5982\u4f55\u521b\u5efa\u5feb\u6377\u952e\u3001\u7528\u6237\u3001\u7f51\u7edc\u5171\u4eab \u5982\u4f55\u64cd\u4f5c\u7f51\u7edc\u6587\u4ef6\u5939\u6216\u670d\u52a1\u7684\u7f16\u7a0b\u903b\u8f91\u548c\u77e5\u8bc6\u90fd\u5df2\u7ecf\u5305\u542b\u5728 Windows Installer\u5185\u3002WiX \u5b89\u88c5\u6e90\u7801\u6587\u4ef6\u53ea\u63cf\u8ff0\u6211\u4eec\u671f\u671b Windows Installer \u505a\u4ec0\u4e48\u4e8b\u60c5\uff0c\u5e76\u63d0\u4f9b\u9700\u8981\u90e8\u7f72\u7684\u6587\u4ef6\uff08\u6b63\u5982\u5728\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u63a5\u53e3\u5143\u7d20\u4e00\u6837\uff09\u5c31\u597d\u3002 This database approach means that our WiX source files are not built like regular programs. There is no notion of sequential execution in WiX, the first source line is not supposed to be executed prior to the second one. There will be no declarations that need to precede the references. Various elements might be described in different places and, wherever a link is required between them, one will refer to the other using unique identifiers we need to provide. If you need to think in terms of programming languages, consider WiX as a functional, descriptive language rather than an imperative, prescriptive one. \u8fd9\u79cd\u6570\u636e\u5e93\u65b9\u6cd5\u610f\u5473\u7740\uff0cWiX \u6e90\u6587\u4ef6\u5e76\u4e0d\u50cf\u5e38\u89c4\u7a0b\u5e8f\u4ee3\u7801\u90a3\u6837\u8fdb\u884c\u6784\u5efa\u3002\u5728 WiX \u4e2d\u6ca1\u6709\u6309\u987a\u5e8f\u6267\u884c\u7684\u6982\u5ff5\uff0c\u7b2c\u4e00\u884c WiX \u4ee3\u7801\u5e76\u4e0d\u610f\u5473\u8981\u65e9\u4e8e\u7b2c\u4e8c\u884c\u800c\u88ab\u4f18\u5148\u6267\u884c\u3002\u4e5f\u6ca1\u6709\u5148\u58f0\u660e\u540e\u5f15\u7528\u7684\u8981\u6c42\u3002WiX\u7684\u5404\u79cd\u5143\u7d20\u4f1a\u5728\u4e0d\u540c\u7684\u5730\u65b9\u8fdb\u884c\u63cf\u8ff0\uff0c\u5206\u5e03\u4e8e\u5176\u4e2d\u7684\u94fe\u63a5\u5728\u65e0\u8bba\u5728\u54ea\u91cc\u88ab\u8bf7\u6c42\uff0c\u53ea\u8981\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u5373\u53ef\u3002 Also note that WiX is not an installation environment of its own. To put it simply, it is a comfortable, XML-style way to describe your installation requirements that gets translated into Windows Installer .msi databases by its compiler and linker. In this respect, WiX is a relatively thin wrapper around Windows Installer technology, and while it does provide extra features to help the setup developers, its abilities are dictated by the underlying technology and its limitations are not of its own but the limitations of Windows Installer itself. \u540c\u65f6\u4e5f\u8981\u6ce8\u610f\u7684\u662f WiX \u5e76\u4e0d\u662f\u81ea\u5df1\u7684\u5b89\u88c5\u73af\u5883\u3002\u4e3a\u4e86\u7b80\u5355\uff0cWiX \u63cf\u8ff0\u5b89\u88c5\u9700\u6c42\uff0c\u901a\u8fc7\u7f16\u8bd1\u548c\u94fe\u63a5\u5668\u8f6c\u6362\u6210 Windows Installer .msi \u6570\u636e\u5e93\uff0c\u91c7\u7528\u4e30\u5bcc\u7684\u3001XML\u683c\u5f0f\u7684\u65b9\u5f0f\u3002\u5c31\u8fd9\u65b9\u9762\u800c\u8a00\uff0cWiX \u662f\u4e00\u4e2a\u76f8\u5bf9\u8f7b\u91cf\u7684\u58f3\u5305\u88f9\u7740Windows Installer\u6280\u672f\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e2e\u52a9\u5b89\u88c5\u5305\u5f00\u53d1\u4eba\u5458\u7684\u989d\u5916\u7279\u5f81\uff0c\u5b83\u7684\u529f\u80fd\u7531\u6f5c\u5728\u7684\u6280\u672f\u51b3\u5b9a\u7684\uff0c\u5b83\u7684\u9650\u5236\u4e0d\u662f\u81ea\u8eab\u51b3\u5b9a\u7684\u800c\u662f Windows Installer \u6280\u672f\u51b3\u5b9a\u7684\u3002 Pages in this Chapter The Software Package The Files Inside Putting it to Use Useful Extras Where to Install? Conditional Installation Beyond Files Orphaned on Removal","title":"Getting Started"},{"location":"language_learning/WiXTutorial/0_Getting_Started/0_Getting_Started/#getting-started","text":"As we have already mentioned in the introduction, the WiX toolset uses XML source files describing the components that make up the installation process of our application additional data about shortcuts, registry or .ini file changes, services and similar. In addition to the files you want to copy to the disk of the user, the installation package can also carry helper files that take part in the installation but will not be actually installed (these can include dialogs, icons and bitmaps for the installation UI, license or readme files, or custom DLLs to carry out any programmatic task the Windows Installer doesn't support, including any kind of user registration or key checking logic you might want to implement). \u5728\u524d\u9762\u7684\u5f15\u8a00\u4e2d\uff0c\u6211\u4eec\u63d0\u5230 WiX \u4f7f\u7528 XML \u683c\u5f0f\u7684\u6e90\u7801\u6587\u4ef6\u63cf\u8ff0\u7ec4\u4ef6\u3001\u670d\u52a1\u7b49\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u7ec4\u6210\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u88c5\u8fc7\u7a0b\uff0c\u4ed6\u4eec\u63cf\u8ff0\u4e86\u5e94\u7528\u7a0b\u5e8f\u9644\u5c5e\u6570\u636e\u2014\u2014\u5feb\u6377\u952e\u3001\u6ce8\u518c\u8868\u3001.ini\u6587\u4ef6\u7684\u53d8\u5316\u3002\u9664\u4e86\u62f7\u8d1d\u5230\u7528\u6237\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u5916\uff0c\u5b89\u88c5\u5305\u4e5f\u53ef\u4ee5\u643a\u5e26\u4e00\u7c7b\u7279\u6b8a\u7684\u5e2e\u52a9\u6587\u6863\uff0c\u5373\u53c2\u4e0e\u5b89\u88c5\u8fc7\u7a0b\u4f46\u4e0d\u4f1a\u88ab\u5b89\u88c5\u5728\u7528\u6237\u78c1\u76d8\u4e0a\uff08\u8fd9\u4e9b\u5e2e\u52a9\u6587\u6863\u5305\u542b\u5bf9\u8bdd\u6846\u3001\u89c4\u5b9aUI\u7684\u56fe\u6807\u4e0e\u8d34\u56fe\u3001\u8bb8\u53ef\u6587\u4ef6\u6216\u81ea\u8ff0\u6587\u4ef6\u3001\u81ea\u5b9a\u4e49Windows Installer\u4e0d\u652f\u6301\u7684\u6267\u884c\u7f16\u7a0b\u5f0f\u4efb\u52a1\u7684DLL\uff0c\u8fd8\u5305\u62ec\u4efb\u610f\u7c7b\u578b\u7528\u6237\u6ce8\u518c\uff0c\u6216\u8005\u4f60\u60f3\u6267\u884c\u7684\u5173\u952e\u68c0\u64e6\u903b\u8f91\uff09\u3002 All these will be described in the source files fed to the WiX compiler. The toolset consists of several parts and we will use two of them to compile our installation packages. Assuming we have prepared a Sample.wxs file, the command \u6240\u6709\u8fd9\u4e9b\u4fdd\u5b58\u5728 XML \u6e90\u6587\u4ef6\u4e2d\u7684\u63cf\u8ff0\u5173\u952e\u5b57\u90fd\u4f1a\u88ab\u6295\u9012\u7ed9 WiX \u7f16\u8bd1\u5668\u3002\u5de5\u5177\u96c6\u5305\u542b\u4e86\u597d\u51e0\u4e2a\u5de5\u5177\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5176\u4e2d\u4e24\u4e2a\u6765\u7f16\u8bd1\u5b89\u88c5\u7a0b\u5e8f\u3002\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u4e86\u4e00\u4e2a\u5b89\u88c5\u6e90\u7801\u6587\u4ef6 Sample.wxs \uff0c\u547d\u4ee4 candle.exe Sample.wxs will perform the first phase of the compilation, creating Sample.wixobj , a half-digested file (this one is still XML but its internal structure is irrelevant to us; think about it as an object file in usual compiler parlance). The second command \u5c06\u6267\u884c\u6267\u884c\u7f16\u8bd1\u7684\u7b2c\u4e00\u9636\u6bb5\uff0c\u521b\u5efa\u51fa Sample.wixobj \uff0c\u4e00\u4e2a\u534a\u6d88\u5316\u6027\u8d28\u7684\u4e2d\u95f4\u6587\u4ef6\uff08\u8fd9\u4ecd\u7136\u662f XML\u683c\u5f0f\u7684\uff0c\u4f46\u5176\u5185\u90e8\u7ed3\u6784\u5df2\u7ecf\u4e0e\u6211\u4eec\u65e0\u5173\u4e86\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u662f\u5e38\u89c1\u7f16\u8bd1\u8fc7\u7a0b\u7684\u4e2d\u95f4\u76ee\u6807\u6587\u4ef6\uff09\u3002\u7b2c\u4e8c\u4e2a\u547d\u4ee4 light.exe Sample.wixobj will turn this intermediate representation into our final package, a Sample.msi file. Much like a compiler and a linker. Actually, even more: the linker, unless we specifically tell it not to do so, also runs a verification step that checks the finished installer database for hundreds of possible issues and problems. \u5c06\u8fd9\u4e2a\u4e2d\u95f4\u6587\u6863\u8f6c\u6362\u6210\u6700\u7ec8\u5b89\u88c5\u5305\uff0c Sample.msi \u3002\u8fd9\u4e24\u4e2a\u5de5\u5177\u975e\u5e38\u50cf\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u3002\u5b9e\u9645\u4e0a\uff0c \u9664\u975e\u660e\u786e\u544a\u8bc9\u94fe\u63a5\u5668\u4e0d\u8981\u8fd9\u6837\u505a\uff0c\u5426\u5219\u4f1a\u8fd0\u884c\u9a8c\u8bc1\u6b65\u9aa4\uff0c\u68c0\u9a8c\u5b89\u88c5\u5305\u6570\u636e\u5e93\u6570\u4ee5\u767e\u8ba1\u7684\u95ee\u9898\u3002 As is usual with compilers today, you are not limited to the command line any more. Integrated development environments like Microsoft Visual Studio or SharpDevelop also have support for WiX projects: either coming bundled with the IDE itself or as an addin. In the case of Visual Studio, the WiX package installs the VS support automatically. Using this approach, you can create a separate setup solution or even include the setup as a part project of a complete solution. In this case, you don't even have to leave your programming environment in order to build the final setup package. \u4e0e\u4eca\u5929\u7684\u7f16\u8bd1\u5668\u4e00\u6837\uff0cWiX \u5e76\u4e0d\u9650\u5236\u4e8e\u547d\u4ee4\u884c\u65b9\u5f0f\u3002WiX \u4e5f\u652f\u6301\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u5982 Microsoft Visual Studio\u3001SharpDevelop\uff0c\u8981\u4e48\u76f4\u63a5\u7ed1\u5b9a\u5728IDE\u4e2d\uff0c\u8981\u4e48\u4f5c\u4e3a\u5176\u4e2d\u7684\u4e00\u4e2a\u63d2\u4ef6\u3002\u5728 Visual Studio\u4e2d\uff0cWiX \u7684\u5b89\u88c5\u5305\u4f1a\u81ea\u52a8\u5b89\u88c5 VS \u76f8\u5173\u652f\u6301\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5206\u79bb\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u751a\u81f3\u5c06\u5b89\u88c5\u9879\u76ee\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u89e3\u51b3\u65b9\u6848\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u79bb\u5f00\u7f16\u7a0b\u73af\u5883\u53bb\u6784\u5efa\u6700\u7ec8\u7684\u5b89\u88c5\u5305\u3002 But, although the analogy of a compiler and linker is very straightforward and might help us understand how WiX actually builds installation packages, you shouldn't consider the WiX source we will start to write in a minute anything like a script or programming language. We won't collect steps or operations required to install our application. The .msi file we want to distribute our application with is not a setup application but an installation database. The programming logic, the knowledge about how to install an application, how to modify registry keys, how to create shortcuts, users and network shares, how to manipulate web directories or services resides in Windows Installer. Our setup file only describes what we expect Windows Installer to do and provides the files to be deployed (as well as interface elements used in the process). \u867d\u7136\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u7c7b\u6bd4\u975e\u5e38\u76f4\u89c2\uff0c\u6709\u52a9\u4e8e\u7406\u89e3 WiX \u5982\u4f55\u6784\u5efa\u5b89\u88c5\u5305\uff0c\u4f46\u662f\u4eba\u4eec\u4e0d\u8981\u8003\u8651\u5728\u6570\u5206\u949f\u5185\u5199\u7684\u6b63\u5982\u811a\u672c\u6216\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\u7684 WiX \u6e90\u7801\u3002\u6211\u4eec\u4e0d\u9700\u8981\u6536\u96c6\u7ec6\u81f4\u7684\u5b89\u88c5\u6267\u884c\u6b65\u9aa4\u6216\u8005\u64cd\u4f5c\u8981\u6c42\u3002\u6211\u4eec\u60f3\u8981\u53d1\u5e03\u5e94\u7528\u7a0b\u5e8f\u7684 .msi \u6587\u4ef6\u4e0d\u662f\u5177\u4f53\u6267\u884c\u7684\u5b89\u88c5\u7a0b\u5e8f\u800c\u662f\u5b89\u88c5\u6570\u636e\u5e93\u3002\u6709\u5173\u5982\u4f55\u5b89\u88c5\u3001\u5982\u4f55\u4fee\u6539\u6ce8\u518c\u8868\u3001\u5982\u4f55\u521b\u5efa\u5feb\u6377\u952e\u3001\u7528\u6237\u3001\u7f51\u7edc\u5171\u4eab \u5982\u4f55\u64cd\u4f5c\u7f51\u7edc\u6587\u4ef6\u5939\u6216\u670d\u52a1\u7684\u7f16\u7a0b\u903b\u8f91\u548c\u77e5\u8bc6\u90fd\u5df2\u7ecf\u5305\u542b\u5728 Windows Installer\u5185\u3002WiX \u5b89\u88c5\u6e90\u7801\u6587\u4ef6\u53ea\u63cf\u8ff0\u6211\u4eec\u671f\u671b Windows Installer \u505a\u4ec0\u4e48\u4e8b\u60c5\uff0c\u5e76\u63d0\u4f9b\u9700\u8981\u90e8\u7f72\u7684\u6587\u4ef6\uff08\u6b63\u5982\u5728\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u63a5\u53e3\u5143\u7d20\u4e00\u6837\uff09\u5c31\u597d\u3002 This database approach means that our WiX source files are not built like regular programs. There is no notion of sequential execution in WiX, the first source line is not supposed to be executed prior to the second one. There will be no declarations that need to precede the references. Various elements might be described in different places and, wherever a link is required between them, one will refer to the other using unique identifiers we need to provide. If you need to think in terms of programming languages, consider WiX as a functional, descriptive language rather than an imperative, prescriptive one. \u8fd9\u79cd\u6570\u636e\u5e93\u65b9\u6cd5\u610f\u5473\u7740\uff0cWiX \u6e90\u6587\u4ef6\u5e76\u4e0d\u50cf\u5e38\u89c4\u7a0b\u5e8f\u4ee3\u7801\u90a3\u6837\u8fdb\u884c\u6784\u5efa\u3002\u5728 WiX \u4e2d\u6ca1\u6709\u6309\u987a\u5e8f\u6267\u884c\u7684\u6982\u5ff5\uff0c\u7b2c\u4e00\u884c WiX \u4ee3\u7801\u5e76\u4e0d\u610f\u5473\u8981\u65e9\u4e8e\u7b2c\u4e8c\u884c\u800c\u88ab\u4f18\u5148\u6267\u884c\u3002\u4e5f\u6ca1\u6709\u5148\u58f0\u660e\u540e\u5f15\u7528\u7684\u8981\u6c42\u3002WiX\u7684\u5404\u79cd\u5143\u7d20\u4f1a\u5728\u4e0d\u540c\u7684\u5730\u65b9\u8fdb\u884c\u63cf\u8ff0\uff0c\u5206\u5e03\u4e8e\u5176\u4e2d\u7684\u94fe\u63a5\u5728\u65e0\u8bba\u5728\u54ea\u91cc\u88ab\u8bf7\u6c42\uff0c\u53ea\u8981\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u5373\u53ef\u3002 Also note that WiX is not an installation environment of its own. To put it simply, it is a comfortable, XML-style way to describe your installation requirements that gets translated into Windows Installer .msi databases by its compiler and linker. In this respect, WiX is a relatively thin wrapper around Windows Installer technology, and while it does provide extra features to help the setup developers, its abilities are dictated by the underlying technology and its limitations are not of its own but the limitations of Windows Installer itself. \u540c\u65f6\u4e5f\u8981\u6ce8\u610f\u7684\u662f WiX \u5e76\u4e0d\u662f\u81ea\u5df1\u7684\u5b89\u88c5\u73af\u5883\u3002\u4e3a\u4e86\u7b80\u5355\uff0cWiX \u63cf\u8ff0\u5b89\u88c5\u9700\u6c42\uff0c\u901a\u8fc7\u7f16\u8bd1\u548c\u94fe\u63a5\u5668\u8f6c\u6362\u6210 Windows Installer .msi \u6570\u636e\u5e93\uff0c\u91c7\u7528\u4e30\u5bcc\u7684\u3001XML\u683c\u5f0f\u7684\u65b9\u5f0f\u3002\u5c31\u8fd9\u65b9\u9762\u800c\u8a00\uff0cWiX \u662f\u4e00\u4e2a\u76f8\u5bf9\u8f7b\u91cf\u7684\u58f3\u5305\u88f9\u7740Windows Installer\u6280\u672f\uff0c\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e2e\u52a9\u5b89\u88c5\u5305\u5f00\u53d1\u4eba\u5458\u7684\u989d\u5916\u7279\u5f81\uff0c\u5b83\u7684\u529f\u80fd\u7531\u6f5c\u5728\u7684\u6280\u672f\u51b3\u5b9a\u7684\uff0c\u5b83\u7684\u9650\u5236\u4e0d\u662f\u81ea\u8eab\u51b3\u5b9a\u7684\u800c\u662f Windows Installer \u6280\u672f\u51b3\u5b9a\u7684\u3002","title":"Getting Started"},{"location":"language_learning/WiXTutorial/0_Getting_Started/0_Getting_Started/#pages-in-this-chapter","text":"The Software Package The Files Inside Putting it to Use Useful Extras Where to Install? Conditional Installation Beyond Files Orphaned on Removal","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/0_Getting_Started/1_The_Software_Package/","text":"The Software Package Our first WiX sample will install a very simple imaginary application: it consists of an executable, a DLL library and a user manual. We expect these files to be copied to an application specific folder. We will also want two shortcuts to appear in the usual place in the Start Menu, plus we will add an icon shortcut to the user desktop to launch our application. \u6211\u4eec\u7684\u7b2c\u4e00\u4e2a WiX \u4f8b\u5b50\u5c06\u5b89\u88c5\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u60f3\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a\u4ed6\u5305\u542b\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3001\u4e00\u4e2aDLL\u5e93\u548c\u4e00\u4e2a\u7528\u6237\u624b\u518c\u3002\u6211\u4eec\u5e0c\u671b\u5c06\u8fd9\u4e9b\u6587\u4ef6\u62f7\u8d1d\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6\u5939\u3002\u6211\u4eec\u4e5f\u5e0c\u671b\u6709\u4e24\u4e2a\u5feb\u6377\u952e\u51fa\u73b0\u5728\u5f00\u59cb\u83dc\u5355\uff0c\u53e6\u5916\uff0c\u6211\u4eec\u5c06\u6dfb\u52a0\u4e00\u4e2a\u56fe\u6807\u5feb\u6377\u952e\u81f3\u7528\u6237\u7684\u684c\u9762\u65b9\u4fbf\u542f\u52a8\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 As simple as this install package will be, the underlying Windows Installer will offer a great deal of functionality, including automatic inclusion of our program in the Programs and Features Control Panel tool. To make sure that Windows Installer can keep track of our program, we have to provide some means of identification. Although all applications have human readable names, Windows will require a more unique identifier than a mere name: GUIDs (those long, hexadecimal numbers like CE26AD1E-00D5-4E03-8CBE-6DA5C23AA833) to identify every part of our package. GUIDs come for free, you can generate as many as you like any time. They are guaranteed to be unique, no matter who else asks for GUIDs on their computers, they will never collide with yours. There are many utilities to ask for GUIDs, including this very simple C program that can be compiled with practically any C/C++ compiler of your choice. If you use a different programming language, you can call the necessary Win32 functions ( CoCreateGuid and StringFromGUID2 ) there, too. C compilers usually keep them in the ole32.lib library file, so if you receive linker errors, remember to link against this library as well. The Windows SDK you get by installing Visual Studio also contains a GUID-generation tool, available, for example, at %ProgramFiles%\\Microsoft SDKs\\Windows\\v7.1A\\Bin\\uuidgen.exe or %ProgramFiles%\\Windows Kits\\8.1\\bin\\x86\\uuidgen.exe . \u8fd9\u4e2a\u5b89\u88c5\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u7684\u7b80\u5355\uff0c\u6f5c\u5728\u7684 Windows Installer \u4f1a\u63d0\u4f9b\u5927\u91cf\u7684\u529f\u80fd\uff0c\u5305\u62ec\u81ea\u52a8\u96c6\u6210\u5230\u7a0b\u5e8f\u4e8e \u63a7\u5236\u9762\u677f \u3002\u4e3a\u4e86\u4fdd\u8bc1 Windows Installer \u53ef\u4ee5\u8ddf\u8e2a\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e9b\u6807\u8bc6\u3002\u867d\u7136\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u53ef\u8bfb\u7684\u540d\u79f0\uff0c\u4f46\u662f Windows \u9700\u8981\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26\u2014\u2014GUID\uff08\u8fd9\u662f\u4e00\u79cd\u8f83\u957f\u4e1416\u8fdb\u5236\u6570\u5b57\u4e32\uff0c\u5982 CE26AD1E-00D5-4E03-8CBE-6DA5C23AA833\uff09\u6765\u8bc6\u522b\u5b89\u88c5\u5305\u4e2d\u7684\u6bcf\u4e00\u90e8\u5206\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u540d\u79f0\u3002GUID \u662f\u514d\u8d39\u7684\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u751f\u6210\u4efb\u610f\u591a\u7684 GUID\u3002\u4ed6\u4eec\u90fd\u80fd\u4fdd\u8bc1\u552f\u4e00\uff0c\u65e0\u8bba\u8c01\u5728\u5176\u7535\u8111\u4e0a\u8981\u6c42\u66f4\u591a\u7684GUID\uff0c\u90fd\u4e0d\u4f1a\u4e0e\u4f60\u7684\u51b2\u7a81\u3002\u6709\u8bb8\u591a\u5de5\u5177\u53ef\u4ee5\u751f\u6210GUID\uff0c\u5305\u62ec\u8fd9\u4e2a\u7b80\u5355\u7684 C\u8bed\u8a00\u7a0b\u5e8f \uff0c\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55C/C++\u7f16\u8bd1\u5668\u8fdb\u884c\u7f16\u8bd1\u3002\u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8c03\u7528Win32\u5e93\u4e2d\u7684\u51fd\u6570\uff08 CoCreateGuid() \u548c StringFromGUID2() \uff09\u3002C\u7f16\u8bd1\u5668\u901a\u5e38\u4fdd\u6301\u5728 ole32.lib \u5e93\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u5982\u679c\u9047\u5230\u8fde\u63a5\u9519\u8bef\uff0c\u8bb0\u5f97\u518d\u94fe\u63a5\u4e00\u6b21\u8be5\u5e93\u3002\u5b89\u88c5 Visual Studio \u65f6\u9644\u5e26\u5b89\u88c5\u7684Windows SDK\u4e5f\u5305\u542b\u4e00\u4e2aGUID\u751f\u6210\u5de5\u5177\uff0c\u6bd4\u5982\uff0c %ProgramFiles%\\Microsoft SDKs\\Windows\\v7.1A\\Bin\\uuidgen.exe \u6216\u8005 %ProgramFiles%\\Windows Kits\\8.1\\bin\\x86\\uuidgen.exe \u3002 Alternatively, many programmers' editors and integrated development environments can insert a freshly generated GUID into the source code on request. If the tool you use generates lowercase hexadecimal letters, convert them to uppercase before you present them to WiX. \u53e6\u5916\uff0c\u7a0b\u5e8f\u5458\u7684\u7f16\u8f91\u5668\u548cIDE\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u5411\u6e90\u4ee3\u7801\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u751f\u6210\u7684GUID\u3002\u5982\u679c\u4f60\u6240\u4f7f\u7528\u7684\u5de5\u5177\u751f\u6210GUID\u7684\u662f\u5c0f\u519916\u8fdb\u5236\u5b57\u6bcd\uff0c\u5728WiX\u4e2d\u4f7f\u7528\u524d\uff0c\u8bf7\u5c06\u5176\u8f6c\u6362\u6210\u5927\u5199\u7684\u3002 All GUIDs in this tutorial, including those in the downloadable samples, are invalid \u2014the first section is always changed to YOURGUID . This also means that the samples cannot be built straight away, without providing your own GUIDs first (you get a fatal error CNDL0027: The 'Id' attribute has an invalid value according to its data type. if you try). This is a small inconvenience but it is necessary to avoid the remote chance of several people using any of the samples verbatim, forgetting to change the GUIDs, and creating a risk of collision out there in the wild. Also note that you have to replace the complete GUID: never mix parts coming from different GUIDs (in other words, don't replace YOURGUID alone, replace the whole number). GUIDs are only guaranteed to be unique if used exactly as they were generated. \u672c\u6559\u7a0b\u4e2d\u7684\u6240\u6709\u7684GUID\uff0c\u5305\u62ec\u90a3\u4e9b\u53ef\u4f9b\u4e0b\u8f7d\u7684\u4f8b\u5b50\u4e2d\uff0c\u90fd\u662f\u65e0\u6548\u7684 \uff0c\u7b2c\u4e00\u6b65\u90fd\u9700\u8981\u8f6c\u6362\u6210\u4f60\u81ea\u5df1\u7684GUID\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u8fd9\u4e9b\u4f8b\u5b50\u4e0d\u80fd\u88ab\u76f4\u63a5\u7f16\u8bd1\uff08\u901a\u5e38\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u9519\u8bef\uff1a fatal error CNDL0027: The 'Id' attribute has an invalid value according to its data type. \uff09\u3002\u867d\u7136\u4e0d\u65b9\u4fbf\uff0c\u4f46\u53ef\u4ee5\u907f\u514d To start with, you'll need two GUIDs, one for your product and one for the installation package (actually, for any real world project, you'll also need an UpgradeCode GUID; be sure to check out the other lessons before you ship anything). While the other two have to be kept on file because you will probably need to refer to them later, Package GUIDs need to be different with each package you create. To make it easier and less likely to forget to issue a new one, we can instruct WiX to autogenerate one by typing an asterisk---but remember, this only applies to package GUIDs: all other GUIDs will need to stay unique and kept recorded for times to come. This with all other textual information about the product will go into the very first part of our SampleFirst.wxs file: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Name='Foobar 1.0' Manufacturer='Acme Ltd.' Id='YOURGUID-86C7-4D14-AEC0-86416A69ABDE' UpgradeCode='YOURGUID-7349-453F-94F6-BCB5110BA4FD' Language='1033' Codepage='1252' Version='1.0.0'> <Package Id='*' Keywords='Installer' Description=\"Acme's Foobar 1.0 Installer\" Comments='Foobar is a registered trademark of Acme Ltd.' Manufacturer='Acme Ltd.' InstallerVersion='100' Languages='1033' Compressed='yes' SummaryCodepage='1252' /> Product names and descriptions depend on you, of course. For the Version attribute, use the standard major.minor.build format. Windows Installer will ignore an eventual fourth field, .revision as it provides other means to differentiate revisions. As you know, XML is quite liberal for a format. Use indentation and empty lines as you see fit. Enclose all attribute values in quotes but you can choose from single and double quotes at will. This makes it very easy to write values containing a quote (like Description above), just make sure you use the other kind of quote to enclose the string. You can use both UTF-8 and ANSI to create the XML. If you don't plan to use anything but the usual ASCII characters or those accented letters available in the standard ANSI character set, the windows-1252 setting depicted in this example is quite satisfactory. If you need a larger or different character set in your user interface, change to UTF-8 and use the appropriate language and codepage IDs For instance, for Japanese: <?xml version='1.0' encoding='utf-8'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Language='1041' Codepage='932' ...> <Package Languages='1041' SummaryCodepage='932' ...>","title":"The Software Package"},{"location":"language_learning/WiXTutorial/0_Getting_Started/1_The_Software_Package/#the-software-package","text":"Our first WiX sample will install a very simple imaginary application: it consists of an executable, a DLL library and a user manual. We expect these files to be copied to an application specific folder. We will also want two shortcuts to appear in the usual place in the Start Menu, plus we will add an icon shortcut to the user desktop to launch our application. \u6211\u4eec\u7684\u7b2c\u4e00\u4e2a WiX \u4f8b\u5b50\u5c06\u5b89\u88c5\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u60f3\u8c61\u7684\u5e94\u7528\u7a0b\u5e8f\uff1a\u4ed6\u5305\u542b\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3001\u4e00\u4e2aDLL\u5e93\u548c\u4e00\u4e2a\u7528\u6237\u624b\u518c\u3002\u6211\u4eec\u5e0c\u671b\u5c06\u8fd9\u4e9b\u6587\u4ef6\u62f7\u8d1d\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6\u5939\u3002\u6211\u4eec\u4e5f\u5e0c\u671b\u6709\u4e24\u4e2a\u5feb\u6377\u952e\u51fa\u73b0\u5728\u5f00\u59cb\u83dc\u5355\uff0c\u53e6\u5916\uff0c\u6211\u4eec\u5c06\u6dfb\u52a0\u4e00\u4e2a\u56fe\u6807\u5feb\u6377\u952e\u81f3\u7528\u6237\u7684\u684c\u9762\u65b9\u4fbf\u542f\u52a8\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 As simple as this install package will be, the underlying Windows Installer will offer a great deal of functionality, including automatic inclusion of our program in the Programs and Features Control Panel tool. To make sure that Windows Installer can keep track of our program, we have to provide some means of identification. Although all applications have human readable names, Windows will require a more unique identifier than a mere name: GUIDs (those long, hexadecimal numbers like CE26AD1E-00D5-4E03-8CBE-6DA5C23AA833) to identify every part of our package. GUIDs come for free, you can generate as many as you like any time. They are guaranteed to be unique, no matter who else asks for GUIDs on their computers, they will never collide with yours. There are many utilities to ask for GUIDs, including this very simple C program that can be compiled with practically any C/C++ compiler of your choice. If you use a different programming language, you can call the necessary Win32 functions ( CoCreateGuid and StringFromGUID2 ) there, too. C compilers usually keep them in the ole32.lib library file, so if you receive linker errors, remember to link against this library as well. The Windows SDK you get by installing Visual Studio also contains a GUID-generation tool, available, for example, at %ProgramFiles%\\Microsoft SDKs\\Windows\\v7.1A\\Bin\\uuidgen.exe or %ProgramFiles%\\Windows Kits\\8.1\\bin\\x86\\uuidgen.exe . \u8fd9\u4e2a\u5b89\u88c5\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u7684\u7b80\u5355\uff0c\u6f5c\u5728\u7684 Windows Installer \u4f1a\u63d0\u4f9b\u5927\u91cf\u7684\u529f\u80fd\uff0c\u5305\u62ec\u81ea\u52a8\u96c6\u6210\u5230\u7a0b\u5e8f\u4e8e \u63a7\u5236\u9762\u677f \u3002\u4e3a\u4e86\u4fdd\u8bc1 Windows Installer \u53ef\u4ee5\u8ddf\u8e2a\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e9b\u6807\u8bc6\u3002\u867d\u7136\u6240\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u6709\u53ef\u8bfb\u7684\u540d\u79f0\uff0c\u4f46\u662f Windows \u9700\u8981\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7b26\u2014\u2014GUID\uff08\u8fd9\u662f\u4e00\u79cd\u8f83\u957f\u4e1416\u8fdb\u5236\u6570\u5b57\u4e32\uff0c\u5982 CE26AD1E-00D5-4E03-8CBE-6DA5C23AA833\uff09\u6765\u8bc6\u522b\u5b89\u88c5\u5305\u4e2d\u7684\u6bcf\u4e00\u90e8\u5206\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u540d\u79f0\u3002GUID \u662f\u514d\u8d39\u7684\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u751f\u6210\u4efb\u610f\u591a\u7684 GUID\u3002\u4ed6\u4eec\u90fd\u80fd\u4fdd\u8bc1\u552f\u4e00\uff0c\u65e0\u8bba\u8c01\u5728\u5176\u7535\u8111\u4e0a\u8981\u6c42\u66f4\u591a\u7684GUID\uff0c\u90fd\u4e0d\u4f1a\u4e0e\u4f60\u7684\u51b2\u7a81\u3002\u6709\u8bb8\u591a\u5de5\u5177\u53ef\u4ee5\u751f\u6210GUID\uff0c\u5305\u62ec\u8fd9\u4e2a\u7b80\u5355\u7684 C\u8bed\u8a00\u7a0b\u5e8f \uff0c\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55C/C++\u7f16\u8bd1\u5668\u8fdb\u884c\u7f16\u8bd1\u3002\u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8c03\u7528Win32\u5e93\u4e2d\u7684\u51fd\u6570\uff08 CoCreateGuid() \u548c StringFromGUID2() \uff09\u3002C\u7f16\u8bd1\u5668\u901a\u5e38\u4fdd\u6301\u5728 ole32.lib \u5e93\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u5982\u679c\u9047\u5230\u8fde\u63a5\u9519\u8bef\uff0c\u8bb0\u5f97\u518d\u94fe\u63a5\u4e00\u6b21\u8be5\u5e93\u3002\u5b89\u88c5 Visual Studio \u65f6\u9644\u5e26\u5b89\u88c5\u7684Windows SDK\u4e5f\u5305\u542b\u4e00\u4e2aGUID\u751f\u6210\u5de5\u5177\uff0c\u6bd4\u5982\uff0c %ProgramFiles%\\Microsoft SDKs\\Windows\\v7.1A\\Bin\\uuidgen.exe \u6216\u8005 %ProgramFiles%\\Windows Kits\\8.1\\bin\\x86\\uuidgen.exe \u3002 Alternatively, many programmers' editors and integrated development environments can insert a freshly generated GUID into the source code on request. If the tool you use generates lowercase hexadecimal letters, convert them to uppercase before you present them to WiX. \u53e6\u5916\uff0c\u7a0b\u5e8f\u5458\u7684\u7f16\u8f91\u5668\u548cIDE\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u5411\u6e90\u4ee3\u7801\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u751f\u6210\u7684GUID\u3002\u5982\u679c\u4f60\u6240\u4f7f\u7528\u7684\u5de5\u5177\u751f\u6210GUID\u7684\u662f\u5c0f\u519916\u8fdb\u5236\u5b57\u6bcd\uff0c\u5728WiX\u4e2d\u4f7f\u7528\u524d\uff0c\u8bf7\u5c06\u5176\u8f6c\u6362\u6210\u5927\u5199\u7684\u3002 All GUIDs in this tutorial, including those in the downloadable samples, are invalid \u2014the first section is always changed to YOURGUID . This also means that the samples cannot be built straight away, without providing your own GUIDs first (you get a fatal error CNDL0027: The 'Id' attribute has an invalid value according to its data type. if you try). This is a small inconvenience but it is necessary to avoid the remote chance of several people using any of the samples verbatim, forgetting to change the GUIDs, and creating a risk of collision out there in the wild. Also note that you have to replace the complete GUID: never mix parts coming from different GUIDs (in other words, don't replace YOURGUID alone, replace the whole number). GUIDs are only guaranteed to be unique if used exactly as they were generated. \u672c\u6559\u7a0b\u4e2d\u7684\u6240\u6709\u7684GUID\uff0c\u5305\u62ec\u90a3\u4e9b\u53ef\u4f9b\u4e0b\u8f7d\u7684\u4f8b\u5b50\u4e2d\uff0c\u90fd\u662f\u65e0\u6548\u7684 \uff0c\u7b2c\u4e00\u6b65\u90fd\u9700\u8981\u8f6c\u6362\u6210\u4f60\u81ea\u5df1\u7684GUID\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u8fd9\u4e9b\u4f8b\u5b50\u4e0d\u80fd\u88ab\u76f4\u63a5\u7f16\u8bd1\uff08\u901a\u5e38\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u9519\u8bef\uff1a fatal error CNDL0027: The 'Id' attribute has an invalid value according to its data type. \uff09\u3002\u867d\u7136\u4e0d\u65b9\u4fbf\uff0c\u4f46\u53ef\u4ee5\u907f\u514d To start with, you'll need two GUIDs, one for your product and one for the installation package (actually, for any real world project, you'll also need an UpgradeCode GUID; be sure to check out the other lessons before you ship anything). While the other two have to be kept on file because you will probably need to refer to them later, Package GUIDs need to be different with each package you create. To make it easier and less likely to forget to issue a new one, we can instruct WiX to autogenerate one by typing an asterisk---but remember, this only applies to package GUIDs: all other GUIDs will need to stay unique and kept recorded for times to come. This with all other textual information about the product will go into the very first part of our SampleFirst.wxs file: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Name='Foobar 1.0' Manufacturer='Acme Ltd.' Id='YOURGUID-86C7-4D14-AEC0-86416A69ABDE' UpgradeCode='YOURGUID-7349-453F-94F6-BCB5110BA4FD' Language='1033' Codepage='1252' Version='1.0.0'> <Package Id='*' Keywords='Installer' Description=\"Acme's Foobar 1.0 Installer\" Comments='Foobar is a registered trademark of Acme Ltd.' Manufacturer='Acme Ltd.' InstallerVersion='100' Languages='1033' Compressed='yes' SummaryCodepage='1252' /> Product names and descriptions depend on you, of course. For the Version attribute, use the standard major.minor.build format. Windows Installer will ignore an eventual fourth field, .revision as it provides other means to differentiate revisions. As you know, XML is quite liberal for a format. Use indentation and empty lines as you see fit. Enclose all attribute values in quotes but you can choose from single and double quotes at will. This makes it very easy to write values containing a quote (like Description above), just make sure you use the other kind of quote to enclose the string. You can use both UTF-8 and ANSI to create the XML. If you don't plan to use anything but the usual ASCII characters or those accented letters available in the standard ANSI character set, the windows-1252 setting depicted in this example is quite satisfactory. If you need a larger or different character set in your user interface, change to UTF-8 and use the appropriate language and codepage IDs For instance, for Japanese: <?xml version='1.0' encoding='utf-8'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Language='1041' Codepage='932' ...> <Package Languages='1041' SummaryCodepage='932' ...>","title":"The Software Package"},{"location":"language_learning/WiXTutorial/0_Getting_Started/2_The_Files_Inside/","text":"The Files Inside In the next step, we have to specify the media we want to install from. In the days of CDs and DVDs, we'll hardly need installation files spanning media but the possibility is there (if you need to use it, you can later refer to the individual disks using the media Id supplied here. DiskPrompt can contain any textual description of the various units of installation media that makes it possible for the user to determine which one to insert, Windows Installer will use this description to prompt for it): <Media Id='1' Cabinet='Sample.cab' EmbedCab='yes' DiskPrompt='CD-ROM #1' /> <Property Id='DiskPrompt' Value=\"Acme's Foobar 1.0 Installation [1]\" /> Using the EmbedCab attribute, we can decide whether we want the cabinet (archive) of our installation files to become part of the .msi package file itself or to remain separate. Embedding is the usual decision for the final installation package (thus resulting in a single, self-contained file for download or shipment on media). If neither Cabinet nor EmbedCab is specified, the source files will be left untouched: they can then be copied directly on the distribution media, together with the installer .msi file. As we have stressed in the introduction, Windows Installer moved from the earlier programmatic approach to a declarative, descriptive one: we describe the hierarchical structure of our source folder structure using hierarchically nested XML structures, and expect the installer to recreate this structure during installation on the user machine. Windows Installer requires us to start with an outermost folder, the root destination folder for the whole installation. It has a predefined identifier of TARGETDIR and it will be set to our root directory that contains the source cabinet file or the source file tree of the installation package, which also have a predefined name: SourceDir . This provides the basic link between where to install from and where to install to : <Directory Id='TARGETDIR' Name='SourceDir'> Inside this root folder, we go on with our actual structure. According to established guidelines, installed files go into predetermined locations. For instance, applications should go under \\Program Files\\Company\\Product . Shortcuts, desktop icons, user preferences, and so forth all have their own predefined target locations. For our convenience, the installer environment provides predefined names for all of them, allowing us to refer to them very easily. This also frees us from localization issues because these folders might very well have different, localized names in non-English Windows versions. In our current example, we'll use three of these names: ProgramFilesFolder , ProgramMenuFolder , and DesktopFolder . Note that these predefined names refer to full paths: even if the Desktop folder is several folders deep in C:\\Users\\User\\Desktop , a single Directory tag is all it takes to refer to it. With our own nested folders, we have to specify each level separately: <Directory Id='ProgramFilesFolder' Name='PFiles'> <Directory Id='Acme' Name='Acme'> <Directory Id='INSTALLDIR' Name='Foobar 1.0'> Note that for each element (and this will be the case throughout the use of WiX) we have to provide an Id identifier. Most of the time, these identifiers must be unique because we will cross-reference them all across the WiX source file, so make sure you come up with a naming scheme that makes it easy to follow. In some cases (like ProgramFilesFolder ) we can use predefined names. In other cases, we use property names (roughly equivalent to a string variable), like INSTALLDIR . We will later refer to this property name again. The notion of components and the rules governing their use are probably the most important concepts of the Windows Installer technology and failing to observe these rules is the primary reason for failing setups. Thus, it is very important for us to get a good understanding of components before we can go on with our first sample. The component is the atomic unit of things to be installed. It consists of resources---files, registry keys, shortcuts, or anything else---that should always be installed as a single unit. Installing a component should never influence other components, removing one should never damage another component or leave any orphaned resource on the target machine. As a consequence, components cannot share files: the same file going to the same location must never be included in more than one component. It's not at the component level that you have to think about what files make up your product. If the product requires an EXE, three DLLs and a couple of data files, this doesn't mean they have to go into a single component, quite the opposite. Later on, we will decide at a higher level of the hierarchy what components belong together to form a standalone part of your product. Again, a component should only contain items that belong together so strongly that they always need to be installed or removed together. If this means a single file, then your components will contain a single file each. This is not only normal but exactly what you're expected to do. Don't be afraid, Windows Installer can efficiently handle thousands of components or more, if needed. So, we have a component consisting of three items, a file and two shortcuts pointing to it. A component has to have its own Id identifier as well as its own, unique GUID (the WiX compiler and linker will warn you if you happen to reuse any of these two). This is very important---these GUIDs are the only means for Windows Installer to keep track of the various components. Breaking the component rules will have dire consequences: resources can be left orphaned on the machine during removal, a shared resource might be erroneously removed while another application still needs it, reinstallation of an existing product might fail to restore the functionality, installing the new version of an application can break the previous one. <Component Id='MainExecutable' Guid='YOURGUID-83F1-4F22-985B-FDB3C8ABD471'> A file is specified by its name. Apart from the actual names, you can decorate the file with several other attributes. Vital , when set to no , tells the installer that installing this file is not of vital importance. Normally, if installing any file fails for any reason, the installation will be aborted, the user will not be allowed to ignore the problem. Other attributes include ReadOnly , Hidden , System , all making the file to have the appropriate attribute set when installed. Each component needs a key path. This is the item Windows Installer can later check to see whether the component is actually installed. Although this doesn't seem very important right now when we only learn to install it in the first place, it is important to specify such a key path for every component we use in order to support the uninstallation and repair functionality of the Installer. Besides, the compiler will complain if we don't specify one... <File Id='FoobarEXE' Name='FoobarAppl10.exe' DiskId='1' Source='FoobarAppl10.exe' KeyPath='yes'> Shortcuts also have names and but also provide other important items like working folder and icon specifications. Note the difference between Directory (where the shortcut will be placed such as a Start menu or the desktop) and the WorkingDirectory (the place the shortcut points to). The second is optional; if omitted, it will default, as expected, to the folder the parent file will be installed into. The Icon attribute will allow us to specify the Id of an Icon tag specified somewhere else in the source rather than the actual filename (even if the .exe extension seems to suggest otherwise, the identifier has to have the same extension as the actual file it will refer to). You can observe that we already reused the INSTALLDIR property and, as expected, it will reference to the folder we're installing into, Program Files\\Acme\\Foobar 1.0. Description of other folders might come later in the source code. Shortcuts can be non-advertised (a simple link pointing to the file in the shortcut's Properties dialog) or advertised (with the link greyed out). This second form lets Windows Installer repair the installation by replacing any missing file the shortcut points to. <Shortcut Id=\"startmenuFoobar10\" Directory=\"ProgramMenuDir\" Name=\"Foobar 1.0\" WorkingDirectory='INSTALLDIR' Icon=\"Foobar10.exe\" IconIndex=\"0\" Advertise=\"yes\" /> <Shortcut Id=\"desktopFoobar10\" Directory=\"DesktopFolder\" Name=\"Foobar 1.0\" WorkingDirectory='INSTALLDIR' Icon=\"Foobar10.exe\" IconIndex=\"0\" Advertise=\"yes\" /> </File> </Component> Here come two other components, with their unique Id and Guid : <Component Id='HelperLibrary' Guid='YOURGUID-6BE3-460D-A14F-75658D16550B'> <File Id='HelperDLL' Name='Helper.dll' DiskId='1' Source='Helper.dll' KeyPath='yes' /> </Component> <Component Id='Manual' Guid='YOURGUID-574D-4A9A-A266-5B5EC2C022A4'> <File Id='Manual' Name='Manual.pdf' DiskId='1' Source='Manual.pdf' KeyPath='yes'> <Shortcut Id='startmenuManual' Directory='ProgramMenuDir' Name='Instruction Manual' Advertise='yes' /> </File> </Component> As you might expect, for an application with hundreds or even thousands of files, this will mean hundreds or thousands of components. Yes, this is normal, this is the expected way to do it. Don't be afraid, there will be no performance problems, the Windows Installer is prepared to handle this all right. Typing all those hundreds or thousands of components into the WiX source file presents another challenge, of course. The toolset has a small utility that can help with this (more about it later) but the real solution is a conceptual change. Stop considering the setup program as a separate application that has to be written in a rush when the main application is already finished. As the WiX source files and the toolset itself can be integrated into your development environment easily, you should keep them in sync all the time. As soon as you start working on a new module or add a new registry reference to your program, modify the corresponding WiX source file at the same time. This way, the setup will be finished together with the application itself and there will be no need to extract all the file and other pieces of information required for the installation later. As the WiX project can be modularized (more about this later), this approach works just as well if you have a large team working on the application rather than a single developer. And now, the closing tags for the directory elements---one less than what we started with because we're not yet finished. Remaining inside the first, TARGETDIR , directory tag, we specify two more full path folders, using predefined names of the Installer: one for our Start Menu shortcuts and another one for our Desktop icons. Only then will the outermost Directory tag be closed. </Directory> </Directory> </Directory> As we need to remove the program folder when the product is uninstalled, we need to create a fourth component as well. The RemoveFolder tag will describe our intention; the On attribute will determine when the folder will be removed (possible values are install , uninstall , and both ). As already mentioned, all components must have their own key path. In this case, this will be an extra RegistryValue tag. This tag is beyond the scope of this first lesson, we will return to it later. Putting the KeyPath attribute on the component or the folder might work, too, but that would result in a linker warning. So, please, accept this solution for now as something temporarily unexplained for the sake of avoiding any messages from the compiler and linker. <Directory Id=\"ProgramMenuFolder\" Name=\"Programs\"> <Directory Id=\"ProgramMenuDir\" Name=\"Foobar 1.0\"> <Component Id=\"ProgramMenuDir\" Guid=\"YOURGUID-7E98-44CE-B049-C477CC0A2B00\"> <RemoveFolder Id='ProgramMenuDir' On='uninstall' /> <RegistryValue Root='HKCU' Key='Software\\[Manufacturer]\\[ProductName]' Type='string' Value='' KeyPath='yes' /> </Component> </Directory> </Directory> <Directory Id=\"DesktopFolder\" Name=\"Desktop\" /> </Directory> Note the Id identifiers we used to identify these two folders, these are the names we used in our shortcut's Directory attribute earlier to make the connection between the location of the shortcut and the actual folder. Last but not least, we tell the installer which features we would like to install. Features are separated parts of the application that we offer the user to decide whether to install or not. The details will of course depend on your particular software package but a usual scheme might look like this: the basic executables necessary for the functioning of the program documentation, help files tutorials, sample files related utilities In our first sample, we won't have such features. First, because we could hardly divide the three files we plan to install into various features. Second, to do so, we would also need a user interface that the user can use to turn these features on or off. We'll return to that in the next lesson but for now, we will have one feature (because we have to have at least one). We refer back to the components we would like to install with this feature using their Id identifiers: <Feature Id='Complete' Level='1'> <ComponentRef Id='MainExecutable' /> <ComponentRef Id='HelperLibrary' /> <ComponentRef Id='Manual' /> <ComponentRef Id='ProgramMenuDir' /> </Feature> We also have to include the icon we want to use in the shortcuts. Note that the Id identifier has to carry the same extension as the target file, in this case, .exe : <Icon Id=\"Foobar10.exe\" SourceFile=\"FoobarAppl10.exe\" /> This will store the source file separately in the final installation package (so, if you refer to your main executable, you will end up with two copies). If the size of the file is large enough to cause concern, create a small .exe or .ico file containing nothing but the icons. <Shortcut Id=\"desktopFoobar10\" Directory=\"DesktopFolder\" Name=\"Foobar 1.0\" WorkingDirectory='INSTALLDIR' Icon=\"Foobar10.ico\" IconIndex=\"0\" /> ... <Icon Id=\"Foobar10.ico\" SourceFile=\"FoobarAppl10.ico\" /> All there's left to do is to provide the closing tags for the two tags we still have open: </Product> </Wix> To summarize: first, we provided the description of our application, both the human readable texts and the required GUIDs. Second, we specified the media we want to install from. Next, we specified the folder structure of our files to be installed. These files, together with their accompanying resources, all went into the appropriate components. And finally, we described the features we would like to install, referring back to the individual components.","title":"The Files Inside"},{"location":"language_learning/WiXTutorial/0_Getting_Started/2_The_Files_Inside/#the-files-inside","text":"In the next step, we have to specify the media we want to install from. In the days of CDs and DVDs, we'll hardly need installation files spanning media but the possibility is there (if you need to use it, you can later refer to the individual disks using the media Id supplied here. DiskPrompt can contain any textual description of the various units of installation media that makes it possible for the user to determine which one to insert, Windows Installer will use this description to prompt for it): <Media Id='1' Cabinet='Sample.cab' EmbedCab='yes' DiskPrompt='CD-ROM #1' /> <Property Id='DiskPrompt' Value=\"Acme's Foobar 1.0 Installation [1]\" /> Using the EmbedCab attribute, we can decide whether we want the cabinet (archive) of our installation files to become part of the .msi package file itself or to remain separate. Embedding is the usual decision for the final installation package (thus resulting in a single, self-contained file for download or shipment on media). If neither Cabinet nor EmbedCab is specified, the source files will be left untouched: they can then be copied directly on the distribution media, together with the installer .msi file. As we have stressed in the introduction, Windows Installer moved from the earlier programmatic approach to a declarative, descriptive one: we describe the hierarchical structure of our source folder structure using hierarchically nested XML structures, and expect the installer to recreate this structure during installation on the user machine. Windows Installer requires us to start with an outermost folder, the root destination folder for the whole installation. It has a predefined identifier of TARGETDIR and it will be set to our root directory that contains the source cabinet file or the source file tree of the installation package, which also have a predefined name: SourceDir . This provides the basic link between where to install from and where to install to : <Directory Id='TARGETDIR' Name='SourceDir'> Inside this root folder, we go on with our actual structure. According to established guidelines, installed files go into predetermined locations. For instance, applications should go under \\Program Files\\Company\\Product . Shortcuts, desktop icons, user preferences, and so forth all have their own predefined target locations. For our convenience, the installer environment provides predefined names for all of them, allowing us to refer to them very easily. This also frees us from localization issues because these folders might very well have different, localized names in non-English Windows versions. In our current example, we'll use three of these names: ProgramFilesFolder , ProgramMenuFolder , and DesktopFolder . Note that these predefined names refer to full paths: even if the Desktop folder is several folders deep in C:\\Users\\User\\Desktop , a single Directory tag is all it takes to refer to it. With our own nested folders, we have to specify each level separately: <Directory Id='ProgramFilesFolder' Name='PFiles'> <Directory Id='Acme' Name='Acme'> <Directory Id='INSTALLDIR' Name='Foobar 1.0'> Note that for each element (and this will be the case throughout the use of WiX) we have to provide an Id identifier. Most of the time, these identifiers must be unique because we will cross-reference them all across the WiX source file, so make sure you come up with a naming scheme that makes it easy to follow. In some cases (like ProgramFilesFolder ) we can use predefined names. In other cases, we use property names (roughly equivalent to a string variable), like INSTALLDIR . We will later refer to this property name again. The notion of components and the rules governing their use are probably the most important concepts of the Windows Installer technology and failing to observe these rules is the primary reason for failing setups. Thus, it is very important for us to get a good understanding of components before we can go on with our first sample. The component is the atomic unit of things to be installed. It consists of resources---files, registry keys, shortcuts, or anything else---that should always be installed as a single unit. Installing a component should never influence other components, removing one should never damage another component or leave any orphaned resource on the target machine. As a consequence, components cannot share files: the same file going to the same location must never be included in more than one component. It's not at the component level that you have to think about what files make up your product. If the product requires an EXE, three DLLs and a couple of data files, this doesn't mean they have to go into a single component, quite the opposite. Later on, we will decide at a higher level of the hierarchy what components belong together to form a standalone part of your product. Again, a component should only contain items that belong together so strongly that they always need to be installed or removed together. If this means a single file, then your components will contain a single file each. This is not only normal but exactly what you're expected to do. Don't be afraid, Windows Installer can efficiently handle thousands of components or more, if needed. So, we have a component consisting of three items, a file and two shortcuts pointing to it. A component has to have its own Id identifier as well as its own, unique GUID (the WiX compiler and linker will warn you if you happen to reuse any of these two). This is very important---these GUIDs are the only means for Windows Installer to keep track of the various components. Breaking the component rules will have dire consequences: resources can be left orphaned on the machine during removal, a shared resource might be erroneously removed while another application still needs it, reinstallation of an existing product might fail to restore the functionality, installing the new version of an application can break the previous one. <Component Id='MainExecutable' Guid='YOURGUID-83F1-4F22-985B-FDB3C8ABD471'> A file is specified by its name. Apart from the actual names, you can decorate the file with several other attributes. Vital , when set to no , tells the installer that installing this file is not of vital importance. Normally, if installing any file fails for any reason, the installation will be aborted, the user will not be allowed to ignore the problem. Other attributes include ReadOnly , Hidden , System , all making the file to have the appropriate attribute set when installed. Each component needs a key path. This is the item Windows Installer can later check to see whether the component is actually installed. Although this doesn't seem very important right now when we only learn to install it in the first place, it is important to specify such a key path for every component we use in order to support the uninstallation and repair functionality of the Installer. Besides, the compiler will complain if we don't specify one... <File Id='FoobarEXE' Name='FoobarAppl10.exe' DiskId='1' Source='FoobarAppl10.exe' KeyPath='yes'> Shortcuts also have names and but also provide other important items like working folder and icon specifications. Note the difference between Directory (where the shortcut will be placed such as a Start menu or the desktop) and the WorkingDirectory (the place the shortcut points to). The second is optional; if omitted, it will default, as expected, to the folder the parent file will be installed into. The Icon attribute will allow us to specify the Id of an Icon tag specified somewhere else in the source rather than the actual filename (even if the .exe extension seems to suggest otherwise, the identifier has to have the same extension as the actual file it will refer to). You can observe that we already reused the INSTALLDIR property and, as expected, it will reference to the folder we're installing into, Program Files\\Acme\\Foobar 1.0. Description of other folders might come later in the source code. Shortcuts can be non-advertised (a simple link pointing to the file in the shortcut's Properties dialog) or advertised (with the link greyed out). This second form lets Windows Installer repair the installation by replacing any missing file the shortcut points to. <Shortcut Id=\"startmenuFoobar10\" Directory=\"ProgramMenuDir\" Name=\"Foobar 1.0\" WorkingDirectory='INSTALLDIR' Icon=\"Foobar10.exe\" IconIndex=\"0\" Advertise=\"yes\" /> <Shortcut Id=\"desktopFoobar10\" Directory=\"DesktopFolder\" Name=\"Foobar 1.0\" WorkingDirectory='INSTALLDIR' Icon=\"Foobar10.exe\" IconIndex=\"0\" Advertise=\"yes\" /> </File> </Component> Here come two other components, with their unique Id and Guid : <Component Id='HelperLibrary' Guid='YOURGUID-6BE3-460D-A14F-75658D16550B'> <File Id='HelperDLL' Name='Helper.dll' DiskId='1' Source='Helper.dll' KeyPath='yes' /> </Component> <Component Id='Manual' Guid='YOURGUID-574D-4A9A-A266-5B5EC2C022A4'> <File Id='Manual' Name='Manual.pdf' DiskId='1' Source='Manual.pdf' KeyPath='yes'> <Shortcut Id='startmenuManual' Directory='ProgramMenuDir' Name='Instruction Manual' Advertise='yes' /> </File> </Component> As you might expect, for an application with hundreds or even thousands of files, this will mean hundreds or thousands of components. Yes, this is normal, this is the expected way to do it. Don't be afraid, there will be no performance problems, the Windows Installer is prepared to handle this all right. Typing all those hundreds or thousands of components into the WiX source file presents another challenge, of course. The toolset has a small utility that can help with this (more about it later) but the real solution is a conceptual change. Stop considering the setup program as a separate application that has to be written in a rush when the main application is already finished. As the WiX source files and the toolset itself can be integrated into your development environment easily, you should keep them in sync all the time. As soon as you start working on a new module or add a new registry reference to your program, modify the corresponding WiX source file at the same time. This way, the setup will be finished together with the application itself and there will be no need to extract all the file and other pieces of information required for the installation later. As the WiX project can be modularized (more about this later), this approach works just as well if you have a large team working on the application rather than a single developer. And now, the closing tags for the directory elements---one less than what we started with because we're not yet finished. Remaining inside the first, TARGETDIR , directory tag, we specify two more full path folders, using predefined names of the Installer: one for our Start Menu shortcuts and another one for our Desktop icons. Only then will the outermost Directory tag be closed. </Directory> </Directory> </Directory> As we need to remove the program folder when the product is uninstalled, we need to create a fourth component as well. The RemoveFolder tag will describe our intention; the On attribute will determine when the folder will be removed (possible values are install , uninstall , and both ). As already mentioned, all components must have their own key path. In this case, this will be an extra RegistryValue tag. This tag is beyond the scope of this first lesson, we will return to it later. Putting the KeyPath attribute on the component or the folder might work, too, but that would result in a linker warning. So, please, accept this solution for now as something temporarily unexplained for the sake of avoiding any messages from the compiler and linker. <Directory Id=\"ProgramMenuFolder\" Name=\"Programs\"> <Directory Id=\"ProgramMenuDir\" Name=\"Foobar 1.0\"> <Component Id=\"ProgramMenuDir\" Guid=\"YOURGUID-7E98-44CE-B049-C477CC0A2B00\"> <RemoveFolder Id='ProgramMenuDir' On='uninstall' /> <RegistryValue Root='HKCU' Key='Software\\[Manufacturer]\\[ProductName]' Type='string' Value='' KeyPath='yes' /> </Component> </Directory> </Directory> <Directory Id=\"DesktopFolder\" Name=\"Desktop\" /> </Directory> Note the Id identifiers we used to identify these two folders, these are the names we used in our shortcut's Directory attribute earlier to make the connection between the location of the shortcut and the actual folder. Last but not least, we tell the installer which features we would like to install. Features are separated parts of the application that we offer the user to decide whether to install or not. The details will of course depend on your particular software package but a usual scheme might look like this: the basic executables necessary for the functioning of the program documentation, help files tutorials, sample files related utilities In our first sample, we won't have such features. First, because we could hardly divide the three files we plan to install into various features. Second, to do so, we would also need a user interface that the user can use to turn these features on or off. We'll return to that in the next lesson but for now, we will have one feature (because we have to have at least one). We refer back to the components we would like to install with this feature using their Id identifiers: <Feature Id='Complete' Level='1'> <ComponentRef Id='MainExecutable' /> <ComponentRef Id='HelperLibrary' /> <ComponentRef Id='Manual' /> <ComponentRef Id='ProgramMenuDir' /> </Feature> We also have to include the icon we want to use in the shortcuts. Note that the Id identifier has to carry the same extension as the target file, in this case, .exe : <Icon Id=\"Foobar10.exe\" SourceFile=\"FoobarAppl10.exe\" /> This will store the source file separately in the final installation package (so, if you refer to your main executable, you will end up with two copies). If the size of the file is large enough to cause concern, create a small .exe or .ico file containing nothing but the icons. <Shortcut Id=\"desktopFoobar10\" Directory=\"DesktopFolder\" Name=\"Foobar 1.0\" WorkingDirectory='INSTALLDIR' Icon=\"Foobar10.ico\" IconIndex=\"0\" /> ... <Icon Id=\"Foobar10.ico\" SourceFile=\"FoobarAppl10.ico\" /> All there's left to do is to provide the closing tags for the two tags we still have open: </Product> </Wix> To summarize: first, we provided the description of our application, both the human readable texts and the required GUIDs. Second, we specified the media we want to install from. Next, we specified the folder structure of our files to be installed. These files, together with their accompanying resources, all went into the appropriate components. And finally, we described the features we would like to install, referring back to the individual components.","title":"The Files Inside"},{"location":"language_learning/WiXTutorial/0_Getting_Started/3_Putting_it_to_Use/","text":"Putting it to Use If you copy all these fragments together (or, to spare some elbow grease, download the SampleFirst archive ), you can build the installer package with the commands: candle.exe SampleFirst.wxs light.exe SampleFirst.wixobj You should get no error message from either tool, and you should find a SampleFirst.msi file in your folder upon completion. If not, check for typos everywhere. Please, also note that the required syntax of the .wxs files might undergo some minor changes as the WiX toolset develops. This tutorial always assumes the most current version of the WiX toolset and the samples should all compile without any error message straight out of the box (provided you correct the invalid GUIDs as described earlier). If you do receive compiler errors or warnings, please, compare your toolset version to the current one available for download. To test your first installer, simply click on it. It will not greet you or offer any options, just show a progress dialog for a few seconds. But as soon as it finishes without errors, you should be able to find your three files in Program Files\\Acme\\Foobar 1.0 all right. Note that the actual files deployed are 1-byte placeholder files, so the installed \"application\" will, naturally, refuse to run. To remove this huge application again, go to the Programs and Features Control Panel tool, find Foobar 1.0 in the list, click Remove . ( Change will accomplish nothing at this stage.) Both the three files and the Acme\\Foobar 1.0 folders will be removed. If you experience any problems---or just for fun---start the installer with logging turned on: msiexec /i SampleFirst.msi /l* SampleFirst.log or even msiexec /i SampleFirst.msi /l*v SampleFirst.log The log will be rather verbose (especially in the second case) but it will pinpoint the error that might cause the installation to fail. During testing, you might find it more convenient to remove the package without having to open the Programs and Features Control Panel tool. Just enter the command instead: msiexec /x SampleFirst.msi","title":"Putting it to Use"},{"location":"language_learning/WiXTutorial/0_Getting_Started/3_Putting_it_to_Use/#putting-it-to-use","text":"If you copy all these fragments together (or, to spare some elbow grease, download the SampleFirst archive ), you can build the installer package with the commands: candle.exe SampleFirst.wxs light.exe SampleFirst.wixobj You should get no error message from either tool, and you should find a SampleFirst.msi file in your folder upon completion. If not, check for typos everywhere. Please, also note that the required syntax of the .wxs files might undergo some minor changes as the WiX toolset develops. This tutorial always assumes the most current version of the WiX toolset and the samples should all compile without any error message straight out of the box (provided you correct the invalid GUIDs as described earlier). If you do receive compiler errors or warnings, please, compare your toolset version to the current one available for download. To test your first installer, simply click on it. It will not greet you or offer any options, just show a progress dialog for a few seconds. But as soon as it finishes without errors, you should be able to find your three files in Program Files\\Acme\\Foobar 1.0 all right. Note that the actual files deployed are 1-byte placeholder files, so the installed \"application\" will, naturally, refuse to run. To remove this huge application again, go to the Programs and Features Control Panel tool, find Foobar 1.0 in the list, click Remove . ( Change will accomplish nothing at this stage.) Both the three files and the Acme\\Foobar 1.0 folders will be removed. If you experience any problems---or just for fun---start the installer with logging turned on: msiexec /i SampleFirst.msi /l* SampleFirst.log or even msiexec /i SampleFirst.msi /l*v SampleFirst.log The log will be rather verbose (especially in the second case) but it will pinpoint the error that might cause the installation to fail. During testing, you might find it more convenient to remove the package without having to open the Programs and Features Control Panel tool. Just enter the command instead: msiexec /x SampleFirst.msi","title":"Putting it to Use"},{"location":"language_learning/WiXTutorial/0_Getting_Started/4_Useful_Extras/","text":"Useful Extras Needless to say, we can do much more than to simply copy a couple of files around. To start with, we can have launch conditions: we check for some global settings and stop the installation if our conditions are not met. Just add this line to our previous sample somewhere not within a feature (for instance, between the Package and Media tags) and it will refuse to run if you're not an administrator on your machine: <Condition Message=\"You need to be an administrator to install this product.\"> Privileged </Condition> On Vista, use: <Condition Message=\"You need to be an administrator to install this product.\"> AdminUser </Condition> Note that the messages will appear and the installation will be aborted if the condition between the starting and closing tags evaluates to false . In other words, don't specify the error condition, specify the case you want to proceed with the installation in: <Condition Message='This application only runs on Windows 95/98/ME.'> Version9X </Condition> There are quite a few standard properties you can use in similar conditions but the most important ones would be those specifying the version of Windows the setup is running on. Version9X is true on Windows 95, 98 and ME. VersionNT is true on NT 4.0 and later. VersionNT64 signals a 64-bit operating system. <Condition Message='Windows 95'>Version9X = 400</Condition> <Condition Message='Windows 95 OSR2.5'>Version9X = 400 AND WindowsBuild = 1111</Condition> <Condition Message='Windows 98'>Version9X = 410</Condition> <Condition Message='Windows 98 SE'>Version9X = 410 AND WindowsBuild = 2222</Condition> <Condition Message='Windows ME'>Version9X = 490</Condition> <Condition Message='Windows NT4'>VersionNT = 400</Condition> <Condition Message='Windows NT4 SPn'>VersionNT = 400 AND ServicePackLevel = n</Condition> <Condition Message='Windows 2000'>VersionNT = 500</Condition> <Condition Message='Windows 2000 SPn'>VersionNT = 500 AND ServicePackLevel = n</Condition> <Condition Message='Windows XP'>VersionNT = 501</Condition> <Condition Message='Windows XP SPn'>VersionNT = 501 AND ServicePackLevel = n</Condition> <Condition Message='Windows XP Home SPn'>VersionNT = 501 AND MsiNTSuitePersonal AND ServicePackLevel = n</Condition> <Condition Message='Windows Server 2003'>VersionNT = 502</Condition> <Condition Message='Windows Vista'>VersionNT = 600</Condition> <Condition Message='Windows Vista SP1'>VersionNT = 600 AND ServicePackLevel = 1</Condition> <Condition Message='Windows Server 2008'>VersionNT = 600 AND MsiNTProductType = 3</Condition> <Condition Message='Windows 7'>VersionNT = 601</Condition> There are many more properties like these to choose from. For instance, MsiNTProductType allows you to differentiate between Workstation, Domain Controller and Server. Be sure to check out the other MsiNT properties as well.","title":"Useful Extras"},{"location":"language_learning/WiXTutorial/0_Getting_Started/4_Useful_Extras/#useful-extras","text":"Needless to say, we can do much more than to simply copy a couple of files around. To start with, we can have launch conditions: we check for some global settings and stop the installation if our conditions are not met. Just add this line to our previous sample somewhere not within a feature (for instance, between the Package and Media tags) and it will refuse to run if you're not an administrator on your machine: <Condition Message=\"You need to be an administrator to install this product.\"> Privileged </Condition> On Vista, use: <Condition Message=\"You need to be an administrator to install this product.\"> AdminUser </Condition> Note that the messages will appear and the installation will be aborted if the condition between the starting and closing tags evaluates to false . In other words, don't specify the error condition, specify the case you want to proceed with the installation in: <Condition Message='This application only runs on Windows 95/98/ME.'> Version9X </Condition> There are quite a few standard properties you can use in similar conditions but the most important ones would be those specifying the version of Windows the setup is running on. Version9X is true on Windows 95, 98 and ME. VersionNT is true on NT 4.0 and later. VersionNT64 signals a 64-bit operating system. <Condition Message='Windows 95'>Version9X = 400</Condition> <Condition Message='Windows 95 OSR2.5'>Version9X = 400 AND WindowsBuild = 1111</Condition> <Condition Message='Windows 98'>Version9X = 410</Condition> <Condition Message='Windows 98 SE'>Version9X = 410 AND WindowsBuild = 2222</Condition> <Condition Message='Windows ME'>Version9X = 490</Condition> <Condition Message='Windows NT4'>VersionNT = 400</Condition> <Condition Message='Windows NT4 SPn'>VersionNT = 400 AND ServicePackLevel = n</Condition> <Condition Message='Windows 2000'>VersionNT = 500</Condition> <Condition Message='Windows 2000 SPn'>VersionNT = 500 AND ServicePackLevel = n</Condition> <Condition Message='Windows XP'>VersionNT = 501</Condition> <Condition Message='Windows XP SPn'>VersionNT = 501 AND ServicePackLevel = n</Condition> <Condition Message='Windows XP Home SPn'>VersionNT = 501 AND MsiNTSuitePersonal AND ServicePackLevel = n</Condition> <Condition Message='Windows Server 2003'>VersionNT = 502</Condition> <Condition Message='Windows Vista'>VersionNT = 600</Condition> <Condition Message='Windows Vista SP1'>VersionNT = 600 AND ServicePackLevel = 1</Condition> <Condition Message='Windows Server 2008'>VersionNT = 600 AND MsiNTProductType = 3</Condition> <Condition Message='Windows 7'>VersionNT = 601</Condition> There are many more properties like these to choose from. For instance, MsiNTProductType allows you to differentiate between Workstation, Domain Controller and Server. Be sure to check out the other MsiNT properties as well.","title":"Useful Extras"},{"location":"language_learning/WiXTutorial/0_Getting_Started/5_Where_to_Install/","text":"Where to Install? Standalone applications will be installed into their own folders under Program Files ---we've already seen how to accomplish this. But plugins, add-ons or similar additional products, not meant for standalone use but to accompany other programs already installed on the system (either your own or some third party) has to learn when and where to install themselves first. Asking the user to provide this information would be both inelegant and possibly dangerous in many cases, thus we need means of querying the registry, to consult .ini files already on the system or to look for actual folders and files to determine what to do. When we look for any of those items, the result will be stored in a property (a string variable). So, we start by specifying the property (note that the Id we use is the same name we've already used in our first sample, denoting the target folder we install to). Inside the Property tag, we launch a registry search. The attributes speak for themselves: <Property Id=\"INSTALLDIR\"> <RegistrySearch Id='AcmeFoobarRegistry' Type='raw' Root='HKLM' Key='Software\\Acme\\Foobar 1.0' Name='InstallDir' /> </Property> If the registry search was successful (that is, the registry entry specified does exist), its value will be assigned to our INSTALLDIR property, ready to be used for our purposes. To check this out, add this line after the Media tag in our previous sample and save it to SampleRegistry.wxs (or, just download it again). Compile it but before you start the installation, go into the registry and create the HKEY_LOCAL_MACHINE\\SOFTWARE\\Acme\\Foobar 1.0 key. Create a new string value named InstallDir and set it to an empty folder you've just created anywhere on your system. Run the installer with logging enabled. If you did everything right, our three sample files will appear in this new folder. Also note the shortcuts (in the Start Menu and on the Desktop) to point to this new location now. Similar information can come from other sources as well. Let's assume a \\Windows\\SampleRegistry.ini file (you can only read these files if they are located in the system folder): [Sample] InstallDir=C:\\InstallHere Replace the previous section with this new one: <Property Id=\"INSTALLDIR\"> <IniFileSearch Id='AcmeFoobarIniFile' Type='directory' Name='SampleRegistry.ini' Section='Sample' Key='InstallDir' /> </Property> There might be cases when simply knowing the folder is not enough: you have to look into the folder and make sure a given file exists there. Depth=n can be used to instruct the installer to look n levels deeper than the specified Path . Zero or a missing Depth attribute means only to look in the specified folder, not below it. We use square brackets in Path to tell the installer to use the value of the INSTALLDIR property---bracketed names will be looked up and if found, replaced with their actual value. If not found, the string will remain unchanged. <Property Id=\"FILEEXISTS\"> <DirectorySearch Id=\"CheckFileDir\" Path=\"[INSTALLDIR]\" Depth=\"0\"> <FileSearch Id=\"CheckFile\" Name=\"Lookfor.txt\" /> </DirectorySearch> </Property> If the file has been found, its full path will be assigned to the FILEEXISTS property, otherwise it will be left unassigned. You can check this if you build this sample (you need both the previous RegistrySearch and this fragment) and then run it with logging enabled. Observe that if you first put the file Lookfor.txt into the folder specified in the registry, the log will contain a reference to FILEEXISTS , with the full path of the file as its value. Although we don't yet have a user interface, it's already worth noting that properties meant to receive their value from any interaction with the user, passing that value to the installation logic (eg. destination folders or features selected by the user) need to be public properties. To ensure their public status, their name has to be in all uppercase letters. It is also worth noting that Windows Installer has better ways of upgrading your product than to look for specific registry entries of the previous installation. You should use these features whenever you can---but you need some patience until we reach them during our discussion.","title":"Where to Install?"},{"location":"language_learning/WiXTutorial/0_Getting_Started/5_Where_to_Install/#where-to-install","text":"Standalone applications will be installed into their own folders under Program Files ---we've already seen how to accomplish this. But plugins, add-ons or similar additional products, not meant for standalone use but to accompany other programs already installed on the system (either your own or some third party) has to learn when and where to install themselves first. Asking the user to provide this information would be both inelegant and possibly dangerous in many cases, thus we need means of querying the registry, to consult .ini files already on the system or to look for actual folders and files to determine what to do. When we look for any of those items, the result will be stored in a property (a string variable). So, we start by specifying the property (note that the Id we use is the same name we've already used in our first sample, denoting the target folder we install to). Inside the Property tag, we launch a registry search. The attributes speak for themselves: <Property Id=\"INSTALLDIR\"> <RegistrySearch Id='AcmeFoobarRegistry' Type='raw' Root='HKLM' Key='Software\\Acme\\Foobar 1.0' Name='InstallDir' /> </Property> If the registry search was successful (that is, the registry entry specified does exist), its value will be assigned to our INSTALLDIR property, ready to be used for our purposes. To check this out, add this line after the Media tag in our previous sample and save it to SampleRegistry.wxs (or, just download it again). Compile it but before you start the installation, go into the registry and create the HKEY_LOCAL_MACHINE\\SOFTWARE\\Acme\\Foobar 1.0 key. Create a new string value named InstallDir and set it to an empty folder you've just created anywhere on your system. Run the installer with logging enabled. If you did everything right, our three sample files will appear in this new folder. Also note the shortcuts (in the Start Menu and on the Desktop) to point to this new location now. Similar information can come from other sources as well. Let's assume a \\Windows\\SampleRegistry.ini file (you can only read these files if they are located in the system folder): [Sample] InstallDir=C:\\InstallHere Replace the previous section with this new one: <Property Id=\"INSTALLDIR\"> <IniFileSearch Id='AcmeFoobarIniFile' Type='directory' Name='SampleRegistry.ini' Section='Sample' Key='InstallDir' /> </Property> There might be cases when simply knowing the folder is not enough: you have to look into the folder and make sure a given file exists there. Depth=n can be used to instruct the installer to look n levels deeper than the specified Path . Zero or a missing Depth attribute means only to look in the specified folder, not below it. We use square brackets in Path to tell the installer to use the value of the INSTALLDIR property---bracketed names will be looked up and if found, replaced with their actual value. If not found, the string will remain unchanged. <Property Id=\"FILEEXISTS\"> <DirectorySearch Id=\"CheckFileDir\" Path=\"[INSTALLDIR]\" Depth=\"0\"> <FileSearch Id=\"CheckFile\" Name=\"Lookfor.txt\" /> </DirectorySearch> </Property> If the file has been found, its full path will be assigned to the FILEEXISTS property, otherwise it will be left unassigned. You can check this if you build this sample (you need both the previous RegistrySearch and this fragment) and then run it with logging enabled. Observe that if you first put the file Lookfor.txt into the folder specified in the registry, the log will contain a reference to FILEEXISTS , with the full path of the file as its value. Although we don't yet have a user interface, it's already worth noting that properties meant to receive their value from any interaction with the user, passing that value to the installation logic (eg. destination folders or features selected by the user) need to be public properties. To ensure their public status, their name has to be in all uppercase letters. It is also worth noting that Windows Installer has better ways of upgrading your product than to look for specific registry entries of the previous installation. You should use these features whenever you can---but you need some patience until we reach them during our discussion.","title":"Where to Install?"},{"location":"language_learning/WiXTutorial/0_Getting_Started/6_Conditional_Installation/","text":"We've already covered launch conditions. Using them will abort the whole installation if the specified condition is false. There are finer uses of conditions, too, when they don't disable the whole process, only help us determine what to do. To make room for that, we divide the previous single feature into two separate ones---then we can use our conditions to decide which one to install. <Feature Id='Complete' Level='1'> <Feature Id='MainProgram' Level='1'> <ComponentRef Id='MainExecutable' /> </Feature> <Feature Id='Documentation' Level='1'> <ComponentRef Id='Manual' /> </Feature> </Feature> Building this sample as it is now wouldn't result in anything interesting, the MainProgram feature would install the EXE and the DLL, plus the associated shortcuts while the Documentation feature would do the rest, the PDF and its associated shortcut. So, in the end, the same files are installed. But if you note the Level attribute we haven't discussed so far, a non-zero value means install while a zero value means that the parent feature of the condition (the Feature tag directly enclosing the condition) will not be installed: <Feature Id='Documentation' Level='0'> <ComponentRef Id='Manual' /> <Condition Level=\"1\">FILEEXISTS</Condition> </Feature> The PDF and its shortcut will only be installed if the file Lookfor.txt can be found in the folder referenced by our registry entry. To try this out on your computer, download SampleCondition . You can use all the conditions we have already seen as well, for instance, to disable the feature for a non-administrator user: <Feature Id='Documentation' Level='0'> <ComponentRef Id='Manual' /> <Condition Level=\"1\">Privileged</Condition> </Feature>","title":"6 Conditional Installation"},{"location":"language_learning/WiXTutorial/0_Getting_Started/7_Beyond_Files/","text":"Beyond Files In the real life out there, you'll probably need more to do than to copy files into their final repository. To create a registry keys, include them inside a RegistryKey in the component: <RegistryKey Id='FoobarRegInstallDir' Root='HKLM' Key='Software\\Acme\\Foobar 1.0' Action='createAndRemoveOnUninstall'> <RegistryValue Type='string' Name='InstallDir' Value='[INSTALLDIR]'/> <RegistryValue Type='integer' Name='Flag' Value='0'/> </RegistryKey> The Action attribute can be either create or createAndRemoveOnUninstall . Type can be string , integer , binary , expandable , or multiString . If the Name attribute is omitted, the default key will be created. In the case of a multiString, use one or more RegistryValue children to specify the individual strings: <RegistryKey Id='FoobarRegInstallDir' Root='HKLM' Key='Software\\Acme\\Foobar 1.0' Action='createAndRemoveOnUninstall'> <RegistryValue Type='multiString' Name='InstallDir' Value='[TARGETDIR]'/> <RegistryValue Type='multiString' Name='InstallDir' Value='[INSTALLDIR]' Action='append'/> <RegistryValue Type='multiString' Name='InstallDir' Value='[ProgramFilesFolder]' Action='append'/> </RegistryKey> If your application handles its own file data type, you will need to register a file association for it. Put a ProgId inside your component. FileId should refer to the Id attribute of the File element describing the file meant to handle the files of this extension: <ProgId Id='AcmeFoobar.xyzfile' Description='Acme Foobar data file'> <Extension Id='xyz' ContentType='application/xyz'> <Verb Id='open' Command='Open' TargetFile='FileId' Argument='\"%1\"' /> </Extension> </ProgId> To assign an icon to this file type, you have to specify where the icon should come from: <ProgId Id='AcmeFoobar.xyzfile' Description='Acme Foobar data file' Icon='Foobar.ico'> or, if the icon comes from an executable or resource file containing several icons, you can specify which one: <ProgId Id='AcmeFoobar.xyzfile' Description='Acme Foobar data file' Icon='Foobar.exe' IconIndex='1'> And finally, if you want to write an .ini file---although the registry is more in vogue these days---this is what you need in your component. The file will always be created in the system folder, not in the installation target one: <IniFile Id=\"WriteIntoIniFile\" Action=\"addLine\" Key=\"InstallDir\" Name=\"Foobar.ini\" Section=\"Paths\" Value=\"[INSTALLDIR]\" /> In the next lesson we'll see how to implement a user interface so that the user can get a chance to decide what and where to install.","title":"Beyond Files"},{"location":"language_learning/WiXTutorial/0_Getting_Started/7_Beyond_Files/#beyond-files","text":"In the real life out there, you'll probably need more to do than to copy files into their final repository. To create a registry keys, include them inside a RegistryKey in the component: <RegistryKey Id='FoobarRegInstallDir' Root='HKLM' Key='Software\\Acme\\Foobar 1.0' Action='createAndRemoveOnUninstall'> <RegistryValue Type='string' Name='InstallDir' Value='[INSTALLDIR]'/> <RegistryValue Type='integer' Name='Flag' Value='0'/> </RegistryKey> The Action attribute can be either create or createAndRemoveOnUninstall . Type can be string , integer , binary , expandable , or multiString . If the Name attribute is omitted, the default key will be created. In the case of a multiString, use one or more RegistryValue children to specify the individual strings: <RegistryKey Id='FoobarRegInstallDir' Root='HKLM' Key='Software\\Acme\\Foobar 1.0' Action='createAndRemoveOnUninstall'> <RegistryValue Type='multiString' Name='InstallDir' Value='[TARGETDIR]'/> <RegistryValue Type='multiString' Name='InstallDir' Value='[INSTALLDIR]' Action='append'/> <RegistryValue Type='multiString' Name='InstallDir' Value='[ProgramFilesFolder]' Action='append'/> </RegistryKey> If your application handles its own file data type, you will need to register a file association for it. Put a ProgId inside your component. FileId should refer to the Id attribute of the File element describing the file meant to handle the files of this extension: <ProgId Id='AcmeFoobar.xyzfile' Description='Acme Foobar data file'> <Extension Id='xyz' ContentType='application/xyz'> <Verb Id='open' Command='Open' TargetFile='FileId' Argument='\"%1\"' /> </Extension> </ProgId> To assign an icon to this file type, you have to specify where the icon should come from: <ProgId Id='AcmeFoobar.xyzfile' Description='Acme Foobar data file' Icon='Foobar.ico'> or, if the icon comes from an executable or resource file containing several icons, you can specify which one: <ProgId Id='AcmeFoobar.xyzfile' Description='Acme Foobar data file' Icon='Foobar.exe' IconIndex='1'> And finally, if you want to write an .ini file---although the registry is more in vogue these days---this is what you need in your component. The file will always be created in the system folder, not in the installation target one: <IniFile Id=\"WriteIntoIniFile\" Action=\"addLine\" Key=\"InstallDir\" Name=\"Foobar.ini\" Section=\"Paths\" Value=\"[INSTALLDIR]\" /> In the next lesson we'll see how to implement a user interface so that the user can get a chance to decide what and where to install.","title":"Beyond Files"},{"location":"language_learning/WiXTutorial/0_Getting_Started/8_Orphaned_on_Removal/","text":"Orphaned on Removal The application might create files during its functioning that were not present in the installation package originally (user data file, user settings, log files, etc). You might need to remove them when the product is uninstalled. To remove individual files, use RemoveFile: <Component> ... <RemoveFile Id='LogFile' On='uninstall' Name='Foobar10User.log' /> </Component> The On attribute will determine when the file will be removed (possible values are install , uninstall and both ). The Name can contain wildcard characters, too. The file or files should be located in the same folder as the component itself. To override this folder, you can use either the Directory or the Property attribute. The second will allow us to remove files from a folder we don't yet know at the time of creating the installation package. We have already seen how to signal the removal of folders during uninstallation. For folders created by the application rather than the installer, we will need to specify them separately: <Component> ... <RemoveFolder Id='LogFolder' On='uninstall' /> </Component> Again, Directory or Property can be used to specify the folder if it is not the one of the component itself.","title":"Orphaned on Removal"},{"location":"language_learning/WiXTutorial/0_Getting_Started/8_Orphaned_on_Removal/#orphaned-on-removal","text":"The application might create files during its functioning that were not present in the installation package originally (user data file, user settings, log files, etc). You might need to remove them when the product is uninstalled. To remove individual files, use RemoveFile: <Component> ... <RemoveFile Id='LogFile' On='uninstall' Name='Foobar10User.log' /> </Component> The On attribute will determine when the file will be removed (possible values are install , uninstall and both ). The Name can contain wildcard characters, too. The file or files should be located in the same folder as the component itself. To override this folder, you can use either the Directory or the Property attribute. The second will allow us to remove files from a folder we don't yet know at the time of creating the installation package. We have already seen how to signal the removal of folders during uninstallation. For folders created by the application rather than the installer, we will need to specify them separately: <Component> ... <RemoveFolder Id='LogFolder' On='uninstall' /> </Component> Again, Directory or Property can be used to specify the folder if it is not the one of the component itself.","title":"Orphaned on Removal"},{"location":"language_learning/WiXTutorial/1_User_Interface/0_User_Interface/","text":"User Interface In the previous lesson we have learned how to describe the files we want to be installed. Although we saw some simple implementations of automated installer logic to determine whether a given product has already been installed previously, everything went without the customary user interface giving the user a chance to say anything about the installation. So this is the topic we will be treating in this installment. \u4e0a\u4e00\u8282\u4e2d\u5df2\u7ecf\u5b66\u5230\u5982\u4f55\u53bb\u63cf\u8ff0\u6211\u4eec\u60f3\u8981\u5b89\u88c5\u7684\u6587\u4ef6\u3002\u867d\u7136\u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e9b\u4f7f\u7528\u81ea\u52a8\u5b89\u88c5\u903b\u8f91\u7684\u7b80\u5355\u5e94\u7528\uff0c\u5b83\u4eec\u51b3\u5b9a\u5373\u5c06\u5b89\u88c5\u7684\u4ea7\u54c1\u662f\u5426\u5728\u6b64\u4e4b\u524d\u5df2\u7ecf\u5b89\u88c5\u4e86\uff0c\u4f46\u662f\uff0c\u5e76\u6ca1\u6709\u901a\u8fc7\u7528\u6237\u754c\u9762\u7ed9\u7528\u6237\u4e00\u4e2a\u673a\u4f1a\u53c2\u4e0e\u5230\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u3002\u56e0\u6b64\u6211\u4eec\u6253\u7b97\u5728\u672c\u6b21\u4e3b\u9898\u7684\u5b89\u88c5\u8bb2\u89e3\u4e2d\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 The Windows Installer doesn't have its built-in user interface (except for a simple progress dialog we've already seen and a few message boxes popping up to inform the user about various errors). Installer packages have to define their own user interface, compile it and carry it around inside their own .msi file. This makes this file somewhat larger (an .msi file with a typical user interface will start just below 300KB, although this will also depend on the size of the icons and other graphical elements inside) but, in return to this size, will be perfectly customizable to every possible need. Windows Installer \u6ca1\u6709\u5185\u7f6e\u7684UI\uff08\u9664\u4e86\u7b80\u5355\u7684\u8fdb\u5ea6\u5bf9\u8bdd\u6846\uff0c\u63d0\u793a\u7528\u6237\u7684\u9519\u8bef\u6d88\u606f\u7684\u6d88\u606f\u5f39\u51fa\u6846\uff09\u3002\u56e0\u6b64\uff0c\u5b89\u88c5\u5305\u5fc5\u987b\u81ea\u5df1\u6307\u5b9a\u5e76\u7f16\u8bd1UI\u4ee3\u7801\uff0c\u6700\u8fd1\u968f\u7740.msi\u6587\u4ef6\u4e00\u8d77\u53d1\u5e03\u3002\u8fd9\u4f1a\u4f7f\u5f97\u5b89\u88c5\u5305\u663e\u5f97\u6709\u4e9b\u5927\uff08\u4e00\u4e2a\u5e26\u6709\u5178\u578b UI \u7684 .msi \u6587\u4ef6\u81f3\u5c11300KB\uff0c\u867d\u7136\u8fd9\u4e5f\u4f9d\u8d56\u4e8e\u56fe\u6807\u548c\u5176\u4ed6\u56fe\u7247\u7684\u5927\u5c0f\uff09\uff0c\u4f46\uff0c\u629b\u5f00\u5927\u5c0f\u4e0d\u8c08\uff0c\u4f60\u53ef\u4ee5\u5b8c\u7f8e\u81ea\u5b9a\u4e49\u6bcf\u4e00\u79cd\u60f3\u8981\u5b9e\u73b0\u7684\u9700\u6c42\u3002 It wouldn't be too much fun to start to develop a complete user interface for ourselves. Fortunately, there is no need to do that. The WiX toolset comes with a standard user interface library, WixUI. This user interface is based on the prefabricated interface in the MSI SDK . The WixUI library provides the complete user interface of a standard installer package, including all standard wizard pages: license agreement, customer information, typical/custom/complete setup types, customization of install target folder, calculation of disk usage requirements, modify/repair/remove and rollback. The only difference is that---for sake of individuality---its dominant color is reddish instead of bluish. However, it only takes to modify a couple of bitmaps and icons if you want to customize that. \u76ee\u524d\u6211\u4eec\u81ea\u5df1\u5e76\u4e0d\u80fd\u5f00\u53d1\u4e00\u4e2a\u5b8c\u6574\u7684UI\uff0c\u6240\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e5f\u6ca1\u6709\u5fc5\u8981\u8fd9\u6837\u505a\u3002WiX \u81ea\u5e26\u6709\u4e00\u4e2a\u6807\u51c6UI\u5e93\u2014\u2014WixUI\uff0c\u5b83\u57fa\u4e8e MSI SDK \u4e2d\u9884\u5236\u7684\u754c\u9762\u3002WixUI \u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5b89\u88c5\u5305\u6240\u9700\u7684\u5b8c\u6574UI\uff0c\u5305\u62ec\u6240\u6709\u6807\u51c6\u5411\u5bfc\u9875\uff1a\u8bb8\u53ef\u9875\u9762\u3001\u7528\u6237\u4fe1\u606f\u3001\u5178\u578b/\u81ea\u5b9a\u4e49/\u5b8c\u6574\u5b89\u88c5\u7c7b\u578b\u3001\u6307\u5b9a\u5b89\u88c5\u76ee\u5f55\u3001\u8ba1\u7b97\u78c1\u76d8\u4f7f\u7528\u8981\u6c42\u3001\u4fee\u6539/\u4fee\u590d/\u79fb\u9664/\u56de\u6eda\u3002\u552f\u4e00\u4e0d\u540c\u5c31\u662f\uff0c\u5b83\u7684\u4e3b\u9898\u8272\u662f\u6de1\u7ea2\u8272\u800c\u4e0d\u662f\u84dd\u8272\u3002\u5982\u679c\u4f60\u60f3\u53bb\u81ea\u5b9a\u4e49\u5b83\uff0c\u53ea\u80fd\u4fee\u6539\u4e00\u4e9b\u56fe\u7247\u548c\u56fe\u6807\u3002 Pages in this Chapter First Steps Custom Settings UI Wizardry Do You Speak English? New Link in the Chain Think Localized","title":"User Interface"},{"location":"language_learning/WiXTutorial/1_User_Interface/0_User_Interface/#user-interface","text":"In the previous lesson we have learned how to describe the files we want to be installed. Although we saw some simple implementations of automated installer logic to determine whether a given product has already been installed previously, everything went without the customary user interface giving the user a chance to say anything about the installation. So this is the topic we will be treating in this installment. \u4e0a\u4e00\u8282\u4e2d\u5df2\u7ecf\u5b66\u5230\u5982\u4f55\u53bb\u63cf\u8ff0\u6211\u4eec\u60f3\u8981\u5b89\u88c5\u7684\u6587\u4ef6\u3002\u867d\u7136\u6211\u4eec\u770b\u5230\u4e86\u4e00\u4e9b\u4f7f\u7528\u81ea\u52a8\u5b89\u88c5\u903b\u8f91\u7684\u7b80\u5355\u5e94\u7528\uff0c\u5b83\u4eec\u51b3\u5b9a\u5373\u5c06\u5b89\u88c5\u7684\u4ea7\u54c1\u662f\u5426\u5728\u6b64\u4e4b\u524d\u5df2\u7ecf\u5b89\u88c5\u4e86\uff0c\u4f46\u662f\uff0c\u5e76\u6ca1\u6709\u901a\u8fc7\u7528\u6237\u754c\u9762\u7ed9\u7528\u6237\u4e00\u4e2a\u673a\u4f1a\u53c2\u4e0e\u5230\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u3002\u56e0\u6b64\u6211\u4eec\u6253\u7b97\u5728\u672c\u6b21\u4e3b\u9898\u7684\u5b89\u88c5\u8bb2\u89e3\u4e2d\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 The Windows Installer doesn't have its built-in user interface (except for a simple progress dialog we've already seen and a few message boxes popping up to inform the user about various errors). Installer packages have to define their own user interface, compile it and carry it around inside their own .msi file. This makes this file somewhat larger (an .msi file with a typical user interface will start just below 300KB, although this will also depend on the size of the icons and other graphical elements inside) but, in return to this size, will be perfectly customizable to every possible need. Windows Installer \u6ca1\u6709\u5185\u7f6e\u7684UI\uff08\u9664\u4e86\u7b80\u5355\u7684\u8fdb\u5ea6\u5bf9\u8bdd\u6846\uff0c\u63d0\u793a\u7528\u6237\u7684\u9519\u8bef\u6d88\u606f\u7684\u6d88\u606f\u5f39\u51fa\u6846\uff09\u3002\u56e0\u6b64\uff0c\u5b89\u88c5\u5305\u5fc5\u987b\u81ea\u5df1\u6307\u5b9a\u5e76\u7f16\u8bd1UI\u4ee3\u7801\uff0c\u6700\u8fd1\u968f\u7740.msi\u6587\u4ef6\u4e00\u8d77\u53d1\u5e03\u3002\u8fd9\u4f1a\u4f7f\u5f97\u5b89\u88c5\u5305\u663e\u5f97\u6709\u4e9b\u5927\uff08\u4e00\u4e2a\u5e26\u6709\u5178\u578b UI \u7684 .msi \u6587\u4ef6\u81f3\u5c11300KB\uff0c\u867d\u7136\u8fd9\u4e5f\u4f9d\u8d56\u4e8e\u56fe\u6807\u548c\u5176\u4ed6\u56fe\u7247\u7684\u5927\u5c0f\uff09\uff0c\u4f46\uff0c\u629b\u5f00\u5927\u5c0f\u4e0d\u8c08\uff0c\u4f60\u53ef\u4ee5\u5b8c\u7f8e\u81ea\u5b9a\u4e49\u6bcf\u4e00\u79cd\u60f3\u8981\u5b9e\u73b0\u7684\u9700\u6c42\u3002 It wouldn't be too much fun to start to develop a complete user interface for ourselves. Fortunately, there is no need to do that. The WiX toolset comes with a standard user interface library, WixUI. This user interface is based on the prefabricated interface in the MSI SDK . The WixUI library provides the complete user interface of a standard installer package, including all standard wizard pages: license agreement, customer information, typical/custom/complete setup types, customization of install target folder, calculation of disk usage requirements, modify/repair/remove and rollback. The only difference is that---for sake of individuality---its dominant color is reddish instead of bluish. However, it only takes to modify a couple of bitmaps and icons if you want to customize that. \u76ee\u524d\u6211\u4eec\u81ea\u5df1\u5e76\u4e0d\u80fd\u5f00\u53d1\u4e00\u4e2a\u5b8c\u6574\u7684UI\uff0c\u6240\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e5f\u6ca1\u6709\u5fc5\u8981\u8fd9\u6837\u505a\u3002WiX \u81ea\u5e26\u6709\u4e00\u4e2a\u6807\u51c6UI\u5e93\u2014\u2014WixUI\uff0c\u5b83\u57fa\u4e8e MSI SDK \u4e2d\u9884\u5236\u7684\u754c\u9762\u3002WixUI \u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5b89\u88c5\u5305\u6240\u9700\u7684\u5b8c\u6574UI\uff0c\u5305\u62ec\u6240\u6709\u6807\u51c6\u5411\u5bfc\u9875\uff1a\u8bb8\u53ef\u9875\u9762\u3001\u7528\u6237\u4fe1\u606f\u3001\u5178\u578b/\u81ea\u5b9a\u4e49/\u5b8c\u6574\u5b89\u88c5\u7c7b\u578b\u3001\u6307\u5b9a\u5b89\u88c5\u76ee\u5f55\u3001\u8ba1\u7b97\u78c1\u76d8\u4f7f\u7528\u8981\u6c42\u3001\u4fee\u6539/\u4fee\u590d/\u79fb\u9664/\u56de\u6eda\u3002\u552f\u4e00\u4e0d\u540c\u5c31\u662f\uff0c\u5b83\u7684\u4e3b\u9898\u8272\u662f\u6de1\u7ea2\u8272\u800c\u4e0d\u662f\u84dd\u8272\u3002\u5982\u679c\u4f60\u60f3\u53bb\u81ea\u5b9a\u4e49\u5b83\uff0c\u53ea\u80fd\u4fee\u6539\u4e00\u4e9b\u56fe\u7247\u548c\u56fe\u6807\u3002","title":"User Interface"},{"location":"language_learning/WiXTutorial/1_User_Interface/0_User_Interface/#pages-in-this-chapter","text":"First Steps Custom Settings UI Wizardry Do You Speak English? New Link in the Chain Think Localized","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/1_User_Interface/1_First_Steps/","text":"First Steps We will expand our previous sample with a nice user interface. But before we delve into details, download SampleWixUI . Compile and run it to get a feeling about what it can do. Build it with the following commands (we will discuss the new linker command line argument later): candle.exe SampleWixUI.wxs light.exe -ext WixUIExtension SampleWixUI.wixobj Try the Custom installation and try to change the target folder you install to. When done, start the installation package again, this time it will allow you to modify or remove the program (the same as you can do in the Programs and Features Control Panel tool by clicking on Change). Let's see how we could achieve all this functionality. The first part remains the same---after all, we want to install the same product, the same files, same components, same features: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Name='Foobar 1.0' Id='YOURGUID-86C7-4D14-AEC0-86416A69ABDE' UpgradeCode='YOURGUID-7349-453F-94F6-BCB5110BA4FD' Language='1033' Codepage='1252' Version='1.0.0' Manufacturer='Acme Ltd.'> <Package Id='*' Keywords='Installer' Description=\"Acme's Foobar 1.0 Installer\" Comments='Foobar is a registered trademark of Acme Ltd.' Manufacturer='Acme Ltd.' InstallerVersion='100' Languages='1033' Compressed='yes' SummaryCodepage='1252' /> ... <Directory Id=\"DesktopFolder\" Name=\"Desktop\" /> </Directory> No surprise so far. The structure of the following segment will also look familiar but we have a couple of new attributes: <Feature Id='Complete' Title='Foobar 1.0' Description='The complete package.' Display='expand' Level='1' ConfigurableDirectory='INSTALLDIR'> <Feature Id='MainProgram' Title='Program' Description='The main executable.' Level='1'> <ComponentRef Id='MainExecutable' /> <ComponentRef Id='HelperLibrary' /> <ComponentRef Id='ProgramMenuDir' /> </Feature> <Feature Id='Documentation' Title='Description' Description='The instruction manual.' Level='1000'> <ComponentRef Id='Manual' /> </Feature> </Feature> We will have a user interface now, so we need to display something to the user, to inform them about the choice of features they have. Hence the need for some human readable descriptions. Start the compiled installer package again and navigate to the custom setup so that you can see where and how the various UI texts appear. The contents of the Title attributes are used to populate the treeview on the left of the dialog. The Description texts will appear on the right side inside the rectangle when you click on an item in the tree. The Display attribute (possible values are collapse , expand , and hidden ) determines whether the specified tree part will be displayed collapsed or expanded initially, or will not be displayed at all. Level allows us to decide which features will be installed. The usual scenario is to offer three choices to the user: Typical , Complete , and Custom . The last two are simple ( Complete includes everything and Custom will allow the user to specify everything in finer details) but we have to specify what belongs to Typical . Or, if necessary, we can have more choices. When the installer runs, there will be a prefabricated property called INSTALLLEVEL that can have any value between 1 and 32,767. A feature will be installed if its level is non-zero and not higher than the current value of INSTALLLEVEL . In our user interface, we will set this INSTALLLEVEL to 3 for a Typical installation and to 1,000 for a Complete one (this second number is rather arbitrary, we could use any other available number). Consequently, we have to mark those features we don't want to include in a Typical with this level. As INSTALLLEVEL will be 3 during such an installation, only those features having a level of 1 to 3 will be installed, anything above that---including our Level=1000 features---will be left alone. And finally, the most important part: ConfigurableDirectory. By including this attribute and making it refer to INSTALLDIR , thus creating the link to the intended target directory as specified in the innermost Directory tag a few lines earlier, we allow the user to change our originally intended target. If we don't use this attribute, the user can enable and disable the various features the same way but won't be able to modify the installation directory.","title":"First Steps"},{"location":"language_learning/WiXTutorial/1_User_Interface/1_First_Steps/#first-steps","text":"We will expand our previous sample with a nice user interface. But before we delve into details, download SampleWixUI . Compile and run it to get a feeling about what it can do. Build it with the following commands (we will discuss the new linker command line argument later): candle.exe SampleWixUI.wxs light.exe -ext WixUIExtension SampleWixUI.wixobj Try the Custom installation and try to change the target folder you install to. When done, start the installation package again, this time it will allow you to modify or remove the program (the same as you can do in the Programs and Features Control Panel tool by clicking on Change). Let's see how we could achieve all this functionality. The first part remains the same---after all, we want to install the same product, the same files, same components, same features: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Name='Foobar 1.0' Id='YOURGUID-86C7-4D14-AEC0-86416A69ABDE' UpgradeCode='YOURGUID-7349-453F-94F6-BCB5110BA4FD' Language='1033' Codepage='1252' Version='1.0.0' Manufacturer='Acme Ltd.'> <Package Id='*' Keywords='Installer' Description=\"Acme's Foobar 1.0 Installer\" Comments='Foobar is a registered trademark of Acme Ltd.' Manufacturer='Acme Ltd.' InstallerVersion='100' Languages='1033' Compressed='yes' SummaryCodepage='1252' /> ... <Directory Id=\"DesktopFolder\" Name=\"Desktop\" /> </Directory> No surprise so far. The structure of the following segment will also look familiar but we have a couple of new attributes: <Feature Id='Complete' Title='Foobar 1.0' Description='The complete package.' Display='expand' Level='1' ConfigurableDirectory='INSTALLDIR'> <Feature Id='MainProgram' Title='Program' Description='The main executable.' Level='1'> <ComponentRef Id='MainExecutable' /> <ComponentRef Id='HelperLibrary' /> <ComponentRef Id='ProgramMenuDir' /> </Feature> <Feature Id='Documentation' Title='Description' Description='The instruction manual.' Level='1000'> <ComponentRef Id='Manual' /> </Feature> </Feature> We will have a user interface now, so we need to display something to the user, to inform them about the choice of features they have. Hence the need for some human readable descriptions. Start the compiled installer package again and navigate to the custom setup so that you can see where and how the various UI texts appear. The contents of the Title attributes are used to populate the treeview on the left of the dialog. The Description texts will appear on the right side inside the rectangle when you click on an item in the tree. The Display attribute (possible values are collapse , expand , and hidden ) determines whether the specified tree part will be displayed collapsed or expanded initially, or will not be displayed at all. Level allows us to decide which features will be installed. The usual scenario is to offer three choices to the user: Typical , Complete , and Custom . The last two are simple ( Complete includes everything and Custom will allow the user to specify everything in finer details) but we have to specify what belongs to Typical . Or, if necessary, we can have more choices. When the installer runs, there will be a prefabricated property called INSTALLLEVEL that can have any value between 1 and 32,767. A feature will be installed if its level is non-zero and not higher than the current value of INSTALLLEVEL . In our user interface, we will set this INSTALLLEVEL to 3 for a Typical installation and to 1,000 for a Complete one (this second number is rather arbitrary, we could use any other available number). Consequently, we have to mark those features we don't want to include in a Typical with this level. As INSTALLLEVEL will be 3 during such an installation, only those features having a level of 1 to 3 will be installed, anything above that---including our Level=1000 features---will be left alone. And finally, the most important part: ConfigurableDirectory. By including this attribute and making it refer to INSTALLDIR , thus creating the link to the intended target directory as specified in the innermost Directory tag a few lines earlier, we allow the user to change our originally intended target. If we don't use this attribute, the user can enable and disable the various features the same way but won't be able to modify the installation directory.","title":"First Steps"},{"location":"language_learning/WiXTutorial/1_User_Interface/2_Custom_Settings/","text":"Custom Settings In this treeview, each entry will have an associated context menu, allowing the user to decide which features should be installed and how. The menu defaults to the following entries: This feature will be installed on local hard drive. This feature, and all subfeatures, will be installed on local hard drive. This feature will be installed to run from network.* This feature, and all subfeatures, will be installed to run from network.* This feature will be installed when required. This feature will not be available. * There seems to be a bug in Windows Installer. With features having no files inside, this entry will appear in the context menu even if you use the attributes outlined above to remove it. In this case, add an empty component (with no files inside) to the feature. Using various attributes of Feature , some of these items can be removed or modified, leaving only those that make sense for the feature in question. Basically, there are five possibilities: to install the feature on the local hard drive, to let it run from the installation media, to run it from the network, to install on demand (the feature will be installed when the user tries to activate it for the first time; this is only supported on more recent operating systems) and to not install it at all. AllowAdvertise='no' : This feature will be installed when required will be removed from the context menu. The user is not allowed to install this feature on demand. AllowAdvertise='yes' : This feature will be installed when required will appear in the context menu. The user is allowed to install this feature on demand. AllowAdvertise='system' : This feature will be installed when required will only appear in the context menu, allowing the user to install the feature on demand, if the operating system supports this. InstallDefault='local' : This feature, [and all subfeatures,] will be installed on local hard drive will appear in the context menu. InstallDefault='source' : This feature, [and all subfeatures,] will be installed to run from CD will appear in the context menu instead of the original entry ...installed on local hard drive . InstallDefault='followParent' : The actual state (either local or source ) will follow the one set in the parent feature. Absent='allow' : This feature will not be available will appear in the context menu. The user can decide whether to install this feature or not. Absent='disallow' : This feature will not be available will be removed from the context menu. The feature is always required, the user is not allowed to turn its installation off.","title":"Custom Settings"},{"location":"language_learning/WiXTutorial/1_User_Interface/2_Custom_Settings/#custom-settings","text":"In this treeview, each entry will have an associated context menu, allowing the user to decide which features should be installed and how. The menu defaults to the following entries: This feature will be installed on local hard drive. This feature, and all subfeatures, will be installed on local hard drive. This feature will be installed to run from network.* This feature, and all subfeatures, will be installed to run from network.* This feature will be installed when required. This feature will not be available. * There seems to be a bug in Windows Installer. With features having no files inside, this entry will appear in the context menu even if you use the attributes outlined above to remove it. In this case, add an empty component (with no files inside) to the feature. Using various attributes of Feature , some of these items can be removed or modified, leaving only those that make sense for the feature in question. Basically, there are five possibilities: to install the feature on the local hard drive, to let it run from the installation media, to run it from the network, to install on demand (the feature will be installed when the user tries to activate it for the first time; this is only supported on more recent operating systems) and to not install it at all. AllowAdvertise='no' : This feature will be installed when required will be removed from the context menu. The user is not allowed to install this feature on demand. AllowAdvertise='yes' : This feature will be installed when required will appear in the context menu. The user is allowed to install this feature on demand. AllowAdvertise='system' : This feature will be installed when required will only appear in the context menu, allowing the user to install the feature on demand, if the operating system supports this. InstallDefault='local' : This feature, [and all subfeatures,] will be installed on local hard drive will appear in the context menu. InstallDefault='source' : This feature, [and all subfeatures,] will be installed to run from CD will appear in the context menu instead of the original entry ...installed on local hard drive . InstallDefault='followParent' : The actual state (either local or source ) will follow the one set in the parent feature. Absent='allow' : This feature will not be available will appear in the context menu. The user can decide whether to install this feature or not. Absent='disallow' : This feature will not be available will be removed from the context menu. The feature is always required, the user is not allowed to turn its installation off.","title":"Custom Settings"},{"location":"language_learning/WiXTutorial/1_User_Interface/3_UI_Wizardry/","text":"UI Wizardry And here comes the real magic. WixUI has five different flavors, depending on how sophisticated you want your user interface to be: WixUI_Mondo offers the complete interface, welcome page, license agreement, setup type (typical, custom and complete), allows for feature customization, browsing for the target directory and offers disk costing. Maintenance mode dialogs are also included. You should use this flavor when some of your product's features shouldn't be installed by default (in other words, there is a significant and meaningful difference between typical and complete installs). WixUI_FeatureTree is similar to the full set but it doesn't allow the user to chose between setup types. It always assumes Custom and goes directly to the feature customization dialog after the user has accepted the license agreement. WixUI_InstallDir allows the user to select a destination directory but without presenting the usual customized features page. After having selected the directory, the installation will proceed automatically*. WixUI_Minimal features a simplistic user interface with a single dialog combining the welcome and license agreement pages. After that, the installation goes on automatically without allowing the user to customize anything. Use it when your application has no optional features to install. WixUI_Advanced is rather similar to WixUI_Minimal as it offers a simple, one-click install but it also allows selecting features and folders if the user chooses to do so. *Note that if you use the WixUI_InstallDir dialog set, you'll have to provide an extra property somewhere in your source: <Property Id=\"WIXUI_INSTALLDIR\" Value=\"INSTALLDIR\" /> In order to get a full user interface, all we have to do is to add two lines to include the WixUI interface library into our project: <UIRef Id=\"WixUI_Mondo\" /> <UIRef Id=\"WixUI_ErrorProgressText\" /> The first reference includes the appropriate user interface library but it doesn't automatically use the localized (or modified, in case of English) error and action texts in the language files. Without the second reference, the installer package will be slightly smaller and will use the stock messages inside Windows Installer. And, finally, we finish it just like in our earlier samples: <Icon Id=\"Foobar10.exe\" SourceFile=\"FoobarAppl10.exe\" /> </Product> </Wix> All the user interface variants come in a common precompiled library. We simply link against this extension library using the command line switch we have already mentioned. When working inside an integrated development environment, we have to add a reference to this library to achieve the same effect. candle.exe SampleWixUI.wxs light.exe -ext WixUIExtension SampleWixUI.wixobj You can customize some visual aspects of the user interface by simply providing replacement files. The default ones reside inside the toolset but you're allowed to create your own replacement bitmaps, icons and license text there. You can also replace selected files, not all of them. Their paths are stored in variables that you can specify either on the command line or directly in the source code: <WixVariable Id=\"WixUILicenseRtf\" Value=\"path\\License.rtf\" /> <WixVariable Id=\"WixUIBannerBmp\" Value=\"path\\banner.bmp\" /> <WixVariable Id=\"WixUIDialogBmp\" Value=\"path\\dialog.bmp\" /> <WixVariable Id=\"WixUIExclamationIco\" Value=\"path\\exclamation.ico\" /> <WixVariable Id=\"WixUIInfoIco\" Value=\"path\\information.ico\" /> <WixVariable Id=\"WixUINewIco\" Value=\"path\\new.ico\" /> <WixVariable Id=\"WixUIUpIco\" Value=\"path\\up.ico\" /> Their meaning and details are: WixUIBannerBmp 493 by 58 pixels, this bitmap will appear at the top of all but the first page of the installer. WixUIDialogBmp 493 by 312 pixels, this bitmap will appear on the first page of the installer. WixUIExclamationIco 32 by 32 pixels, exclamation mark icon. WixUIInfoIco 32 by 32 pixels, information sign icon. WixUINewIco 16 by 16 pixels, new folder icon. WixUIUpIco 16 by 16 pixels, parent folder icon. WixUILicenseRtf Preferably, use a simple editor like Wordpad to create it, or if you insist on overly complex applications like Word, consider resaving the final version from Wordpad, anyway. The RTF will be less complicated and smaller.","title":"UI Wizardry"},{"location":"language_learning/WiXTutorial/1_User_Interface/3_UI_Wizardry/#ui-wizardry","text":"And here comes the real magic. WixUI has five different flavors, depending on how sophisticated you want your user interface to be: WixUI_Mondo offers the complete interface, welcome page, license agreement, setup type (typical, custom and complete), allows for feature customization, browsing for the target directory and offers disk costing. Maintenance mode dialogs are also included. You should use this flavor when some of your product's features shouldn't be installed by default (in other words, there is a significant and meaningful difference between typical and complete installs). WixUI_FeatureTree is similar to the full set but it doesn't allow the user to chose between setup types. It always assumes Custom and goes directly to the feature customization dialog after the user has accepted the license agreement. WixUI_InstallDir allows the user to select a destination directory but without presenting the usual customized features page. After having selected the directory, the installation will proceed automatically*. WixUI_Minimal features a simplistic user interface with a single dialog combining the welcome and license agreement pages. After that, the installation goes on automatically without allowing the user to customize anything. Use it when your application has no optional features to install. WixUI_Advanced is rather similar to WixUI_Minimal as it offers a simple, one-click install but it also allows selecting features and folders if the user chooses to do so. *Note that if you use the WixUI_InstallDir dialog set, you'll have to provide an extra property somewhere in your source: <Property Id=\"WIXUI_INSTALLDIR\" Value=\"INSTALLDIR\" /> In order to get a full user interface, all we have to do is to add two lines to include the WixUI interface library into our project: <UIRef Id=\"WixUI_Mondo\" /> <UIRef Id=\"WixUI_ErrorProgressText\" /> The first reference includes the appropriate user interface library but it doesn't automatically use the localized (or modified, in case of English) error and action texts in the language files. Without the second reference, the installer package will be slightly smaller and will use the stock messages inside Windows Installer. And, finally, we finish it just like in our earlier samples: <Icon Id=\"Foobar10.exe\" SourceFile=\"FoobarAppl10.exe\" /> </Product> </Wix> All the user interface variants come in a common precompiled library. We simply link against this extension library using the command line switch we have already mentioned. When working inside an integrated development environment, we have to add a reference to this library to achieve the same effect. candle.exe SampleWixUI.wxs light.exe -ext WixUIExtension SampleWixUI.wixobj You can customize some visual aspects of the user interface by simply providing replacement files. The default ones reside inside the toolset but you're allowed to create your own replacement bitmaps, icons and license text there. You can also replace selected files, not all of them. Their paths are stored in variables that you can specify either on the command line or directly in the source code: <WixVariable Id=\"WixUILicenseRtf\" Value=\"path\\License.rtf\" /> <WixVariable Id=\"WixUIBannerBmp\" Value=\"path\\banner.bmp\" /> <WixVariable Id=\"WixUIDialogBmp\" Value=\"path\\dialog.bmp\" /> <WixVariable Id=\"WixUIExclamationIco\" Value=\"path\\exclamation.ico\" /> <WixVariable Id=\"WixUIInfoIco\" Value=\"path\\information.ico\" /> <WixVariable Id=\"WixUINewIco\" Value=\"path\\new.ico\" /> <WixVariable Id=\"WixUIUpIco\" Value=\"path\\up.ico\" /> Their meaning and details are: WixUIBannerBmp 493 by 58 pixels, this bitmap will appear at the top of all but the first page of the installer. WixUIDialogBmp 493 by 312 pixels, this bitmap will appear on the first page of the installer. WixUIExclamationIco 32 by 32 pixels, exclamation mark icon. WixUIInfoIco 32 by 32 pixels, information sign icon. WixUINewIco 16 by 16 pixels, new folder icon. WixUIUpIco 16 by 16 pixels, parent folder icon. WixUILicenseRtf Preferably, use a simple editor like Wordpad to create it, or if you insist on overly complex applications like Word, consider resaving the final version from Wordpad, anyway. The RTF will be less complicated and smaller.","title":"UI Wizardry"},{"location":"language_learning/WiXTutorial/1_User_Interface/4_Do_You_Speak_English/","text":"Do You Speak English? The languages below are currently supported by WiX: ar-SA bg-BG ca-ES cs-CZ da-DK de-DE el-GR en-US es-ES et-EE fi-FI fr-FR he-IL hi-IN hr-HR hu-HU it-IT ja-JP kk-KZ ko-KR lt-LT lv-LV nb-NO nl-NL pl-PL pt-BR pt-PT ro-RO ru-RU sk-SK sl-SI sr-LA sv-SE th-TH tr-TR uk-UA zh-CN zh-HK zh-TW","title":"Do You Speak English?"},{"location":"language_learning/WiXTutorial/1_User_Interface/4_Do_You_Speak_English/#do-you-speak-english","text":"The languages below are currently supported by WiX: ar-SA bg-BG ca-ES cs-CZ da-DK de-DE el-GR en-US es-ES et-EE fi-FI fr-FR he-IL hi-IN hr-HR hu-HU it-IT ja-JP kk-KZ ko-KR lt-LT lv-LV nb-NO nl-NL pl-PL pt-BR pt-PT ro-RO ru-RU sk-SK sl-SI sr-LA sv-SE th-TH tr-TR uk-UA zh-CN zh-HK zh-TW","title":"Do You Speak English?"},{"location":"language_learning/WiXTutorial/1_User_Interface/5_New_Link_in_the_Chain/","text":"New Link in the Chain Although the WixUI interface libraries can handle most usual setup scenarios, modifications or additions are sometimes required. To handle these cases, the WiX source code has to be downloaded, too, because we will need to take a peek at some source files. In our sample , we will modify the WixUI_Mondo library, adding a new dialog to collect registration information (name, organization, serial number) from the user. The new dialog will appear between the License Agreement and Setup Type dialogs. To achieve this, we have to provide a new UserRegistrationDlg.wxs file describing this new dialog. You can start with an existing dialog, modifying it, or writing your dialog from scratch. A later lesson describes how to create dialogs and use various interface elements in WiX. Here we only mention a few remarks: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\"> We have to author the new dialog as a separate fragment: <Fragment> <UI> <Dialog Id=\"UserRegistrationDlg\" Width=\"370\" Height=\"270\" Title=\"[ProductName] Setup\" NoMinimize=\"yes\"> <Control Id=\"NameLabel\" Type=\"Text\" X=\"45\" Y=\"73\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"&amp;User Name:\" /> <Control Id=\"NameEdit\" Type=\"Edit\" X=\"45\" Y=\"85\" Width=\"220\" Height=\"18\" Property=\"USERNAME\" Text=\"{80}\" /> <Control Id=\"OrganizationLabel\" Type=\"Text\" X=\"45\" Y=\"110\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"&amp;Organization:\" /> <Control Id=\"OrganizationEdit\" Type=\"Edit\" X=\"45\" Y=\"122\" Width=\"220\" Height=\"18\" Property=\"COMPANYNAME\" Text=\"{80}\" /> <Control Id=\"CDKeyLabel\" Type=\"Text\" X=\"45\" Y=\"147\" Width=\"50\" Height=\"10\" TabSkip=\"no\"> <Text>CD &amp;Key:</Text> </Control> <Control Id=\"CDKeyEdit\" Type=\"MaskedEdit\" X=\"45\" Y=\"159\" Width=\"250\" Height=\"16\" Property=\"PIDKEY\" Text=\"[PIDTemplate]\" /> The dialog will be inserted into the original chain of dialogs. We have to specify which dialogs it will step forward or backward to in this chain: License Agreement and Setup Type. We can learn the actual identifiers of these dialogs if we look into the source file of WixUI_Mondo : src\\ext\\UIExtension\\wixlib\\WixUI_Mondo.wxs in the download source package. The names are LicenseAgreementDlg and SetupTypeDlg , so this is how we refer to them from this new dialog: <Control Id=\"Back\" Type=\"PushButton\" X=\"180\" Y=\"243\" Width=\"56\" Height=\"17\" Text=\"&amp;Back\"> <Publish Event=\"NewDialog\" Value=\"LicenseAgreementDlg\">1</Publish> </Control> <Control Id=\"Next\" Type=\"PushButton\" X=\"236\" Y=\"243\" Width=\"56\" Height=\"17\" Default=\"yes\" Text=\"&amp;Next\"> <Publish Event=\"ValidateProductID\" Value=\"0\">1</Publish> <Publish Event=\"SpawnWaitDialog\" Value=\"WaitForCostingDlg\">CostingComplete = 1</Publish> <Publish Event=\"NewDialog\" Value=\"SetupTypeDlg\">ProductID</Publish> </Control> <Control Id=\"Cancel\" Type=\"PushButton\" X=\"304\" Y=\"243\" Width=\"56\" Height=\"17\" Cancel=\"yes\" Text=\"Cancel\"> <Publish Event=\"SpawnDialog\" Value=\"CancelDlg\">1</Publish> </Control> <Control Id=\"BannerBitmap\" Type=\"Bitmap\" X=\"0\" Y=\"0\" Width=\"370\" Height=\"44\" TabSkip=\"no\" Text=\"WixUI_Bmp_Banner\" /> <Control Id=\"Description\" Type=\"Text\" X=\"25\" Y=\"23\" Width=\"280\" Height=\"15\" Transparent=\"yes\" NoPrefix=\"yes\"> <Text>Please enter your customer information</Text> </Control> <Control Id=\"BottomLine\" Type=\"Line\" X=\"0\" Y=\"234\" Width=\"370\" Height=\"0\" /> <Control Id=\"Title\" Type=\"Text\" X=\"15\" Y=\"6\" Width=\"200\" Height=\"15\" Transparent=\"yes\" NoPrefix=\"yes\"> <Text>{\\WixUI_Font_Title}Customer Information</Text> </Control> <Control Id=\"BannerLine\" Type=\"Line\" X=\"0\" Y=\"44\" Width=\"370\" Height=\"0\" /> </Dialog> </UI> </Fragment> </Wix> It is rather easy to incorporate the dialog into the original user interface. Instead of simply referencing WixUI_Mondo as we did earlier, we build our own interface with the UI tag. However, we still want to use the bulk of WixUI_Mondo , so we start by calling it with UIRef and only add our modifications: first, we refer to our new UserRegistrationDlg dialog. Then we have to specify the remaining two links. The License Agreement dialog used to point to the Setup Type dialog as its successor and vice versa. Now that our own dialog is inserted between them, we have to modify their Next and Back links correspondingly. The easy way is to copy the relevant Publish tags from WixUI_Mondo.wxs and modify the Value attribute to point to our new dialog, without changing anything else: <UI Id=\"MyWixUI_Mondo\"> <UIRef Id=\"WixUI_Mondo\" /> <UIRef Id=\"WixUI_ErrorProgressText\" /> <DialogRef Id=\"UserRegistrationDlg\" /> <Publish Dialog=\"LicenseAgreementDlg\" Control=\"Next\" Event=\"NewDialog\" Value=\"UserRegistrationDlg\" Order=\"3\">LicenseAccepted = \"1\"</Publish> <Publish Dialog=\"SetupTypeDlg\" Control=\"Back\" Event=\"NewDialog\" Value=\"UserRegistrationDlg\">1</Publish> </UI> The main file will need to define the property we referred to. MaskedEdit controls use various characters to determine what and how will appear in the control, what kind of input the control will accept and how the final data assigned to the receiving property will be formed. <Property Id=\"PIDTemplate\"><![CDATA[12345<### ###>@@@@@]]></Property> And this is all there is to it. Now we can build our modified installer with the following commands: candle.exe SampleWixUIAddDlg.wxs UserRegistrationDlg.wxs light.exe -ext WixUIExtension -out SampleWixUIAddDlg.msi SampleWixUIAddDlg.wixobj UserRegistrationDlg.wixobj","title":"New Link in the Chain"},{"location":"language_learning/WiXTutorial/1_User_Interface/5_New_Link_in_the_Chain/#new-link-in-the-chain","text":"Although the WixUI interface libraries can handle most usual setup scenarios, modifications or additions are sometimes required. To handle these cases, the WiX source code has to be downloaded, too, because we will need to take a peek at some source files. In our sample , we will modify the WixUI_Mondo library, adding a new dialog to collect registration information (name, organization, serial number) from the user. The new dialog will appear between the License Agreement and Setup Type dialogs. To achieve this, we have to provide a new UserRegistrationDlg.wxs file describing this new dialog. You can start with an existing dialog, modifying it, or writing your dialog from scratch. A later lesson describes how to create dialogs and use various interface elements in WiX. Here we only mention a few remarks: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\"> We have to author the new dialog as a separate fragment: <Fragment> <UI> <Dialog Id=\"UserRegistrationDlg\" Width=\"370\" Height=\"270\" Title=\"[ProductName] Setup\" NoMinimize=\"yes\"> <Control Id=\"NameLabel\" Type=\"Text\" X=\"45\" Y=\"73\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"&amp;User Name:\" /> <Control Id=\"NameEdit\" Type=\"Edit\" X=\"45\" Y=\"85\" Width=\"220\" Height=\"18\" Property=\"USERNAME\" Text=\"{80}\" /> <Control Id=\"OrganizationLabel\" Type=\"Text\" X=\"45\" Y=\"110\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"&amp;Organization:\" /> <Control Id=\"OrganizationEdit\" Type=\"Edit\" X=\"45\" Y=\"122\" Width=\"220\" Height=\"18\" Property=\"COMPANYNAME\" Text=\"{80}\" /> <Control Id=\"CDKeyLabel\" Type=\"Text\" X=\"45\" Y=\"147\" Width=\"50\" Height=\"10\" TabSkip=\"no\"> <Text>CD &amp;Key:</Text> </Control> <Control Id=\"CDKeyEdit\" Type=\"MaskedEdit\" X=\"45\" Y=\"159\" Width=\"250\" Height=\"16\" Property=\"PIDKEY\" Text=\"[PIDTemplate]\" /> The dialog will be inserted into the original chain of dialogs. We have to specify which dialogs it will step forward or backward to in this chain: License Agreement and Setup Type. We can learn the actual identifiers of these dialogs if we look into the source file of WixUI_Mondo : src\\ext\\UIExtension\\wixlib\\WixUI_Mondo.wxs in the download source package. The names are LicenseAgreementDlg and SetupTypeDlg , so this is how we refer to them from this new dialog: <Control Id=\"Back\" Type=\"PushButton\" X=\"180\" Y=\"243\" Width=\"56\" Height=\"17\" Text=\"&amp;Back\"> <Publish Event=\"NewDialog\" Value=\"LicenseAgreementDlg\">1</Publish> </Control> <Control Id=\"Next\" Type=\"PushButton\" X=\"236\" Y=\"243\" Width=\"56\" Height=\"17\" Default=\"yes\" Text=\"&amp;Next\"> <Publish Event=\"ValidateProductID\" Value=\"0\">1</Publish> <Publish Event=\"SpawnWaitDialog\" Value=\"WaitForCostingDlg\">CostingComplete = 1</Publish> <Publish Event=\"NewDialog\" Value=\"SetupTypeDlg\">ProductID</Publish> </Control> <Control Id=\"Cancel\" Type=\"PushButton\" X=\"304\" Y=\"243\" Width=\"56\" Height=\"17\" Cancel=\"yes\" Text=\"Cancel\"> <Publish Event=\"SpawnDialog\" Value=\"CancelDlg\">1</Publish> </Control> <Control Id=\"BannerBitmap\" Type=\"Bitmap\" X=\"0\" Y=\"0\" Width=\"370\" Height=\"44\" TabSkip=\"no\" Text=\"WixUI_Bmp_Banner\" /> <Control Id=\"Description\" Type=\"Text\" X=\"25\" Y=\"23\" Width=\"280\" Height=\"15\" Transparent=\"yes\" NoPrefix=\"yes\"> <Text>Please enter your customer information</Text> </Control> <Control Id=\"BottomLine\" Type=\"Line\" X=\"0\" Y=\"234\" Width=\"370\" Height=\"0\" /> <Control Id=\"Title\" Type=\"Text\" X=\"15\" Y=\"6\" Width=\"200\" Height=\"15\" Transparent=\"yes\" NoPrefix=\"yes\"> <Text>{\\WixUI_Font_Title}Customer Information</Text> </Control> <Control Id=\"BannerLine\" Type=\"Line\" X=\"0\" Y=\"44\" Width=\"370\" Height=\"0\" /> </Dialog> </UI> </Fragment> </Wix> It is rather easy to incorporate the dialog into the original user interface. Instead of simply referencing WixUI_Mondo as we did earlier, we build our own interface with the UI tag. However, we still want to use the bulk of WixUI_Mondo , so we start by calling it with UIRef and only add our modifications: first, we refer to our new UserRegistrationDlg dialog. Then we have to specify the remaining two links. The License Agreement dialog used to point to the Setup Type dialog as its successor and vice versa. Now that our own dialog is inserted between them, we have to modify their Next and Back links correspondingly. The easy way is to copy the relevant Publish tags from WixUI_Mondo.wxs and modify the Value attribute to point to our new dialog, without changing anything else: <UI Id=\"MyWixUI_Mondo\"> <UIRef Id=\"WixUI_Mondo\" /> <UIRef Id=\"WixUI_ErrorProgressText\" /> <DialogRef Id=\"UserRegistrationDlg\" /> <Publish Dialog=\"LicenseAgreementDlg\" Control=\"Next\" Event=\"NewDialog\" Value=\"UserRegistrationDlg\" Order=\"3\">LicenseAccepted = \"1\"</Publish> <Publish Dialog=\"SetupTypeDlg\" Control=\"Back\" Event=\"NewDialog\" Value=\"UserRegistrationDlg\">1</Publish> </UI> The main file will need to define the property we referred to. MaskedEdit controls use various characters to determine what and how will appear in the control, what kind of input the control will accept and how the final data assigned to the receiving property will be formed. <Property Id=\"PIDTemplate\"><![CDATA[12345<### ###>@@@@@]]></Property> And this is all there is to it. Now we can build our modified installer with the following commands: candle.exe SampleWixUIAddDlg.wxs UserRegistrationDlg.wxs light.exe -ext WixUIExtension -out SampleWixUIAddDlg.msi SampleWixUIAddDlg.wixobj UserRegistrationDlg.wixobj","title":"New Link in the Chain"},{"location":"language_learning/WiXTutorial/1_User_Interface/6_Think_Localized/","text":"Think Localized If we add our own dialogs to WixUI, we might want them to be localized as well. That doesn't require too much extra work. The main source file stays the same, we only have to modify our new dialog in UserRegistrationDlg.wxs . Instead of hardwired texts we will use localizable string references: <Fragment> ... <Dialog Id=\"UserRegistrationDlg\" Width=\"370\" Height=\"270\" Title=\"!(loc.UserRegistrationDlg_Title)\" NoMinimize=\"yes\"> <Control Id=\"NameLabel\" Type=\"Text\" X=\"45\" Y=\"73\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"!(loc.UserRegistrationDlg_UserName)\" /> <Control Id=\"OrganizationLabel\" Type=\"Text\" X=\"45\" Y=\"110\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"!(loc.UserRegistrationDlg_Organization)\" /> ... </Fragment> Next, create localization files listing these strings in the appropriate culture. Let's call our file UserRegistrationDlg.fr-fr.wxl (the name is up to you, the extension is fixed). In the WixLocalization tag you have to specify the culture and its codepage. Create parallel copies for other languages you want to localize to. <?xml version=\"1.0\" encoding=\"utf-8\"?> <WixLocalization Culture=\"fr-fr\" Codepage=\"1252\" xmlns=\"http://schemas.microsoft.com/wix/2006/localization\"> <String Id=\"UserRegistrationDlg_Title\" Overridable=\"yes\">???</String> <String Id=\"UserRegistrationDlg_UserName\" Overridable=\"yes\">???</String> <String Id=\"UserRegistrationDlg_Organization\" Overridable=\"yes\">???</String> ... </WixLocalization> To build the installer from the source , we also need to reference the localization file. In the integrated environment, just include the file in your project and it will be used automatically. candle.exe SampleWixUIAddDlgLoc.wxs UserRegistrationDlg.wxs light.exe -ext WixUIExtension -cultures:fr-fr -loc UserRegistrationDlg.fr-fr.wxl -out SampleWixUIAddDlgLoc.msi SampleWixUIAddDlgLoc.wixobj UserRegistrationDlg.wixobj","title":"Think Localized"},{"location":"language_learning/WiXTutorial/1_User_Interface/6_Think_Localized/#think-localized","text":"If we add our own dialogs to WixUI, we might want them to be localized as well. That doesn't require too much extra work. The main source file stays the same, we only have to modify our new dialog in UserRegistrationDlg.wxs . Instead of hardwired texts we will use localizable string references: <Fragment> ... <Dialog Id=\"UserRegistrationDlg\" Width=\"370\" Height=\"270\" Title=\"!(loc.UserRegistrationDlg_Title)\" NoMinimize=\"yes\"> <Control Id=\"NameLabel\" Type=\"Text\" X=\"45\" Y=\"73\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"!(loc.UserRegistrationDlg_UserName)\" /> <Control Id=\"OrganizationLabel\" Type=\"Text\" X=\"45\" Y=\"110\" Width=\"100\" Height=\"15\" TabSkip=\"no\" Text=\"!(loc.UserRegistrationDlg_Organization)\" /> ... </Fragment> Next, create localization files listing these strings in the appropriate culture. Let's call our file UserRegistrationDlg.fr-fr.wxl (the name is up to you, the extension is fixed). In the WixLocalization tag you have to specify the culture and its codepage. Create parallel copies for other languages you want to localize to. <?xml version=\"1.0\" encoding=\"utf-8\"?> <WixLocalization Culture=\"fr-fr\" Codepage=\"1252\" xmlns=\"http://schemas.microsoft.com/wix/2006/localization\"> <String Id=\"UserRegistrationDlg_Title\" Overridable=\"yes\">???</String> <String Id=\"UserRegistrationDlg_UserName\" Overridable=\"yes\">???</String> <String Id=\"UserRegistrationDlg_Organization\" Overridable=\"yes\">???</String> ... </WixLocalization> To build the installer from the source , we also need to reference the localization file. In the integrated environment, just include the file in your project and it will be used automatically. candle.exe SampleWixUIAddDlgLoc.wxs UserRegistrationDlg.wxs light.exe -ext WixUIExtension -cultures:fr-fr -loc UserRegistrationDlg.fr-fr.wxl -out SampleWixUIAddDlgLoc.msi SampleWixUIAddDlgLoc.wixobj UserRegistrationDlg.wixobj","title":"Think Localized"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/0_Events_and_Actions/","text":"Events and Actions In the previous lesson we learned how to create a fully customizable, rich installer package with the usual look and feel, bitmaps, icons, license agreement---everything we have seen in other people's installer packages. The vast majority of installation tasks can be solved with our accumulated knowledge. Still, there are times when we need a little bit more, something not found in the standard package. \u4e0a\u4e00\u8282\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u5b8c\u5168\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b89\u88c5\u5305\u2014\u2014\u89c2\u611f\u6b63\u5e38\u3001\u8d34\u56fe\u3001\u56fe\u6807\u3001\u8bb8\u53ef\u534f\u8bae\uff0c\u770b\u8d77\u6765\u4e0e\u5176\u4ed6\u5e38\u89c1\u7684\u5b89\u88c5\u5305\u76f8\u540c\u3002\u968f\u7740\u6211\u4eec\u7d2f\u79ef\u7684\u77e5\u8bc6\u8d8a\u591a\uff0c\u7edd\u5927\u591a\u6570\u5b89\u88c5\u4efb\u52a1\u90fd\u53ef\u88ab\u89e3\u51b3\u6389\u3002\u4f46\u662f\uff0c\u6709\u65f6\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u6807\u51c6\u5305\u4e2d\u6ca1\u6709\u7684\uff0c\u54ea\u6015\u662f\u4e00\u4e01\u70b9\u3002 Pages in this Chapter Queueing Up Extra Actions What's Not in the Book Control Your Controls How to Manage? At a Later Stage","title":"Events and Actions"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/0_Events_and_Actions/#events-and-actions","text":"In the previous lesson we learned how to create a fully customizable, rich installer package with the usual look and feel, bitmaps, icons, license agreement---everything we have seen in other people's installer packages. The vast majority of installation tasks can be solved with our accumulated knowledge. Still, there are times when we need a little bit more, something not found in the standard package. \u4e0a\u4e00\u8282\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u5b8c\u5168\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b89\u88c5\u5305\u2014\u2014\u89c2\u611f\u6b63\u5e38\u3001\u8d34\u56fe\u3001\u56fe\u6807\u3001\u8bb8\u53ef\u534f\u8bae\uff0c\u770b\u8d77\u6765\u4e0e\u5176\u4ed6\u5e38\u89c1\u7684\u5b89\u88c5\u5305\u76f8\u540c\u3002\u968f\u7740\u6211\u4eec\u7d2f\u79ef\u7684\u77e5\u8bc6\u8d8a\u591a\uff0c\u7edd\u5927\u591a\u6570\u5b89\u88c5\u4efb\u52a1\u90fd\u53ef\u88ab\u89e3\u51b3\u6389\u3002\u4f46\u662f\uff0c\u6709\u65f6\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4e00\u4e9b\u6807\u51c6\u5305\u4e2d\u6ca1\u6709\u7684\uff0c\u54ea\u6015\u662f\u4e00\u4e01\u70b9\u3002","title":"Events and Actions"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/0_Events_and_Actions/#pages-in-this-chapter","text":"Queueing Up Extra Actions What's Not in the Book Control Your Controls How to Manage? At a Later Stage","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/1_Queueing_Up/","text":"Queueing Up There are many steps, so-called actions the Windows Installer carries out during an installation. The basic ones and those additional items required by the specific installer (this depends on the features you use, registry searches, user interface, etc) are automatically scheduled, in other words, their sequence is predetermined by the toolset when it creates the installer database. For a common .msi file, this might look like: AppSearch LaunchConditions ValidateProductID CostInitialize FileCost CostFinalize InstallValidate InstallInitialize ProcessComponents UnpublishFeatures RemoveShortcuts RemoveFiles InstallFiles CreateShortcuts RegisterUser RegisterProduct PublishFeatures PublishProduct InstallFinalize RemoveExistingProducts You can check out the actual action sequence in an installer using Orca, an MSI editor from the Windows Installer SDK . Reordering these events can be done using the appropriate tags. Actually, we have as many as four of them: AdminUISequence InstallUISequence AdminExecuteSequence InstallExecuteSequence The ones starting with Admin refer to administrative installs (launched using msiexec /a ). These type of installations create a source image of the application onto the network so that users in the workgroup can later install from this source image instead of the original media. This functionality comes for free, we've never bothered with it so far, yet our previous samples can all be installed this way (try it!). So, for the moment, this only leaves two tags. InstallExecuteSequence is always consulted by the installer to determine the actions, InstallUISequence is only considered when the installer runs in full or reduced UI mode (yet another functionality to experiment with, try msiexec 's /qn , /qb and /qr switches). Because we need to schedule our registry search before the launch condition in all UI cases, insert that line into both tags. Compile and run, it should work now, keep renaming the registry key to check. You can see the sequence order numbers in Orca. Although you can use these numbers as well, it is much easier not to bother with them, just tell WiX the relative sequence of your actions: simply specify which sequence your action should come Before or After . To remove an action from the chain of execution, use the Suppress=yes attribute. <InstallExecuteSequence> <LaunchConditions After='AppSearch' /> <RemoveExistingProducts After='InstallFinalize' /> </InstallExecuteSequence>","title":"Queueing Up"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/1_Queueing_Up/#queueing-up","text":"There are many steps, so-called actions the Windows Installer carries out during an installation. The basic ones and those additional items required by the specific installer (this depends on the features you use, registry searches, user interface, etc) are automatically scheduled, in other words, their sequence is predetermined by the toolset when it creates the installer database. For a common .msi file, this might look like: AppSearch LaunchConditions ValidateProductID CostInitialize FileCost CostFinalize InstallValidate InstallInitialize ProcessComponents UnpublishFeatures RemoveShortcuts RemoveFiles InstallFiles CreateShortcuts RegisterUser RegisterProduct PublishFeatures PublishProduct InstallFinalize RemoveExistingProducts You can check out the actual action sequence in an installer using Orca, an MSI editor from the Windows Installer SDK . Reordering these events can be done using the appropriate tags. Actually, we have as many as four of them: AdminUISequence InstallUISequence AdminExecuteSequence InstallExecuteSequence The ones starting with Admin refer to administrative installs (launched using msiexec /a ). These type of installations create a source image of the application onto the network so that users in the workgroup can later install from this source image instead of the original media. This functionality comes for free, we've never bothered with it so far, yet our previous samples can all be installed this way (try it!). So, for the moment, this only leaves two tags. InstallExecuteSequence is always consulted by the installer to determine the actions, InstallUISequence is only considered when the installer runs in full or reduced UI mode (yet another functionality to experiment with, try msiexec 's /qn , /qb and /qr switches). Because we need to schedule our registry search before the launch condition in all UI cases, insert that line into both tags. Compile and run, it should work now, keep renaming the registry key to check. You can see the sequence order numbers in Orca. Although you can use these numbers as well, it is much easier not to bother with them, just tell WiX the relative sequence of your actions: simply specify which sequence your action should come Before or After . To remove an action from the chain of execution, use the Suppress=yes attribute. <InstallExecuteSequence> <LaunchConditions After='AppSearch' /> <RemoveExistingProducts After='InstallFinalize' /> </InstallExecuteSequence>","title":"Queueing Up"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/2_Extra_Actions/","text":"Extra Actions There are many other standard actions available but not scheduled by default. ScheduleReboot, for instance, will instruct the user to reboot after the installation: <InstallExecuteSequence> <ScheduleReboot After='InstallFinalize' /> </InstallExecuteSequence> If the need to reboot depends on a condition (for instance, the operating system the installer is running on), use a condition: <InstallExecuteSequence> <ScheduleReboot After='InstallFinalize'>Version9X</ScheduleReboot> </InstallExecuteSequence> It's not only these so-called standard actions that you can schedule and re-schedule. There are a couple of custom actions as well ( custom here means that they don't appear in the standard course of events but you can use them wherever and whenever you like). A very common need is to launch the application you've just installed. Custom actions need to be mentioned in two places in the source file. First as a child of the Product tag (for instance, between the closing Feature and the UI tag). This CustomAction tag will specify what to do. To launch an executable we've just installed, refer to it using the Id identifier of the File tag specifying the file. You also have to provide a command line, although it can be left empty if not needed: <CustomAction Id='LaunchFile' FileKey='FoobarEXE' ExeCommand='' Return='asyncNoWait' /> Second, we have to schedule the action the usual way. The link between the action and the scheduling entry is provided by the matching Id / Action attribute pair. If the execution of the custom action is conditional, we can specify the condition inside the Custom tag. We need the condition here so that we only launch the executable when we make an installation but not when we remove the product: <InstallExecuteSequence> ... <Custom Action='LaunchFile' After='InstallFinalize'>NOT Installed</Custom> </InstallExecuteSequence> In some cases, we want to start a helper utility we carry along in the installation package but we don't install on the user's machine (for instance, a readme file viewer or a special configuration utility). Instead of the File, we refer to the identifier in a Binary tag. The scheduling is the same: <CustomAction Id='LaunchFile' BinaryKey='FoobarEXE' ExeCommand='' Return='asyncNoWait' /> We can also launch any other executable on the user's machine if we provide its name in a property: <Property Id='NOTEPAD'>Notepad.exe</Property> <CustomAction Id='LaunchFile' Property='NOTEPAD' ExeCommand='[SourceDir]Readme.txt' Return='asyncNoWait' /> Custom actions can also specify how their return will be handled, using a Return attribute. Possible values are: check will wait for the custom action to finish and check its return value, ignore will wait for the action but the return value will be ignored, asyncWait will run asynchronously but the installer will wait for the return value at the end of the scheduling sequence and asyncNoWait will simply launch the action and then leave it alone, the action might still be running after the installer finishes. This last value is the one we use when we want to launch an application or a readme file after the installation. If we encounter an error the normal machinery can't report, we can display an error message and terminate the installation. The Error attribute can contain either the actual message text or the Id identifier of an Error tag: <CustomAction Id='AbortError' Error='Cannot solve this riddle. Giving up.' /> There is no direct way to assign the value of a property to another one but a custom action can bridge this gap. The Value attribute can be a formatted string, thus we can perform some string manipulation, too (note that path references always have their trailing backslash automatically, there is no need to add an extra one): <CustomAction Id='PropertyAssign' Property='PathProperty' Value='[INSTALLDIR][FilenameProperty].[ExtensionProperty]' /> A directory can also be set to a similarly formatted string representing a path: <CustomAction Id='PropertyAssign' Directory='INSTALLDIR' Value='[TARGETDIR]\\Program Files\\Acme\\Foobar 1.0\\bin' />","title":"Extra Actions"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/2_Extra_Actions/#extra-actions","text":"There are many other standard actions available but not scheduled by default. ScheduleReboot, for instance, will instruct the user to reboot after the installation: <InstallExecuteSequence> <ScheduleReboot After='InstallFinalize' /> </InstallExecuteSequence> If the need to reboot depends on a condition (for instance, the operating system the installer is running on), use a condition: <InstallExecuteSequence> <ScheduleReboot After='InstallFinalize'>Version9X</ScheduleReboot> </InstallExecuteSequence> It's not only these so-called standard actions that you can schedule and re-schedule. There are a couple of custom actions as well ( custom here means that they don't appear in the standard course of events but you can use them wherever and whenever you like). A very common need is to launch the application you've just installed. Custom actions need to be mentioned in two places in the source file. First as a child of the Product tag (for instance, between the closing Feature and the UI tag). This CustomAction tag will specify what to do. To launch an executable we've just installed, refer to it using the Id identifier of the File tag specifying the file. You also have to provide a command line, although it can be left empty if not needed: <CustomAction Id='LaunchFile' FileKey='FoobarEXE' ExeCommand='' Return='asyncNoWait' /> Second, we have to schedule the action the usual way. The link between the action and the scheduling entry is provided by the matching Id / Action attribute pair. If the execution of the custom action is conditional, we can specify the condition inside the Custom tag. We need the condition here so that we only launch the executable when we make an installation but not when we remove the product: <InstallExecuteSequence> ... <Custom Action='LaunchFile' After='InstallFinalize'>NOT Installed</Custom> </InstallExecuteSequence> In some cases, we want to start a helper utility we carry along in the installation package but we don't install on the user's machine (for instance, a readme file viewer or a special configuration utility). Instead of the File, we refer to the identifier in a Binary tag. The scheduling is the same: <CustomAction Id='LaunchFile' BinaryKey='FoobarEXE' ExeCommand='' Return='asyncNoWait' /> We can also launch any other executable on the user's machine if we provide its name in a property: <Property Id='NOTEPAD'>Notepad.exe</Property> <CustomAction Id='LaunchFile' Property='NOTEPAD' ExeCommand='[SourceDir]Readme.txt' Return='asyncNoWait' /> Custom actions can also specify how their return will be handled, using a Return attribute. Possible values are: check will wait for the custom action to finish and check its return value, ignore will wait for the action but the return value will be ignored, asyncWait will run asynchronously but the installer will wait for the return value at the end of the scheduling sequence and asyncNoWait will simply launch the action and then leave it alone, the action might still be running after the installer finishes. This last value is the one we use when we want to launch an application or a readme file after the installation. If we encounter an error the normal machinery can't report, we can display an error message and terminate the installation. The Error attribute can contain either the actual message text or the Id identifier of an Error tag: <CustomAction Id='AbortError' Error='Cannot solve this riddle. Giving up.' /> There is no direct way to assign the value of a property to another one but a custom action can bridge this gap. The Value attribute can be a formatted string, thus we can perform some string manipulation, too (note that path references always have their trailing backslash automatically, there is no need to add an extra one): <CustomAction Id='PropertyAssign' Property='PathProperty' Value='[INSTALLDIR][FilenameProperty].[ExtensionProperty]' /> A directory can also be set to a similarly formatted string representing a path: <CustomAction Id='PropertyAssign' Directory='INSTALLDIR' Value='[TARGETDIR]\\Program Files\\Acme\\Foobar 1.0\\bin' />","title":"Extra Actions"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/3_What's_Not_in_the_Book/","text":"What's Not in the Book For very specialized actions that the Windows Installer provides no solution for (eg. checking the validity and integrity of the registration key entered by the user), we can use yet another type of custom action: a DLL we write. For our example, we use a simplistic approach: we will accept the user key if its first digit is '1'. The following source can be directly compiled with Visual C++ but minimal modifications, if any, will be required to compile it with a different compiler. The msi.h and msiquery.h header files can be acquired from the MSI SDK. You also have to link against msi.lib. #include <windows.h> #include <msi.h> #include <msiquery.h> #pragma comment(linker, \"/EXPORT:CheckPID=_CheckPID@4\") extern \"C\" UINT __stdcall CheckPID (MSIHANDLE hInstall) { char Pid[MAX_PATH]; DWORD PidLen = MAX_PATH; MsiGetProperty(hInstall, \"PIDKEY\", Pid, &PidLen); MsiSetProperty(hInstall, \"PIDACCEPTED\", Pid[0] == '1' ? \"1\" : \"0\"); return ERROR_SUCCESS; } To use this DLL, add the following lines to the appropriate places (now, nearing the end of the third lesson, you might be able to do this yourself but if you want to cheat, download SampleCA. <Condition Message='This installation can only run in full UI mode.'> <![CDATA[UILevel = 5]]> </Condition> <CustomAction Id='CheckingPID' BinaryKey='CheckPID' DllEntry='CheckPID' /> <CustomAction Id='RefusePID' Error='Invalid key. Installation aborted.' /> <InstallExecuteSequence> <Custom Action='CheckingPID' After='CostFinalize' /> <Custom Action='RefusePID' After='CheckingPID'>PIDACCEPTED = \"0\" AND NOT Installed</Custom> </InstallExecuteSequence> <Binary Id='CheckPID' SourceFile='CheckPID.dll' /> To summarize: first, we won't allow the installer to run with reduced or no UI because the user can't enter a registration key in those cases. The reason for the ugly CDATA wrapper is that XML attributes special meaning to some characters, most notably < and > . Wherever they appear in a different context, meaning less-than or greater-than , we have to escape them by wrapping the whole expression into a CDATA. Although this actual case could get away without it because it only checks for equality, it is a good habit to learn to wrap all similar conditional values just in case we need to modify them later, introducing such XML conflicts. Then, we have a custom action named CheckingPID running after CostFinalize , when we instruct the installer to start the actual installation after having specified which features we need and where we want to install. This action will call the CheckPID function in our CheckPID.dll , bundled with the installer. The DLL sets the PIDACCEPTED property to either 1 or 0, according to its decision on the validity of the user key entered and stored into the PIDKEY property by the control involved. Note that using properties (with all uppercase names, otherwise Windows Installer will not treat them as public properties) is the only way to pass arguments to and from the custom action. We have a second custom action named RefusePID , scheduled to run after the previous action. This is a conditional custom action, only run if the returned PIDACCEPTED property is found to be zero. In this case, the custom action will display an error message and abort the installation. But we will only be interested in this value during the installation, not while we're uninstalling the product. To get an understanding of how these actions are called and how they relate to each other, we might run the installer with verbose logging. As it will be verbose, using a text editor and searching for our property and custom action names (\"PID\" will do just fine) might help locate what's really happening. msiexec /i SampleCA.msi /l*v SampleCA.log If the DLL we need to call has been installed rather than just included in the package, we can use: <CustomAction Id='CheckingPID' FileKey='HelperDLL' DllEntry='CheckPID' />","title":"What's Not in the Book"},{"location":"language_learning/WiXTutorial/2_Events_and_Actions/3_What's_Not_in_the_Book/#whats-not-in-the-book","text":"For very specialized actions that the Windows Installer provides no solution for (eg. checking the validity and integrity of the registration key entered by the user), we can use yet another type of custom action: a DLL we write. For our example, we use a simplistic approach: we will accept the user key if its first digit is '1'. The following source can be directly compiled with Visual C++ but minimal modifications, if any, will be required to compile it with a different compiler. The msi.h and msiquery.h header files can be acquired from the MSI SDK. You also have to link against msi.lib. #include <windows.h> #include <msi.h> #include <msiquery.h> #pragma comment(linker, \"/EXPORT:CheckPID=_CheckPID@4\") extern \"C\" UINT __stdcall CheckPID (MSIHANDLE hInstall) { char Pid[MAX_PATH]; DWORD PidLen = MAX_PATH; MsiGetProperty(hInstall, \"PIDKEY\", Pid, &PidLen); MsiSetProperty(hInstall, \"PIDACCEPTED\", Pid[0] == '1' ? \"1\" : \"0\"); return ERROR_SUCCESS; } To use this DLL, add the following lines to the appropriate places (now, nearing the end of the third lesson, you might be able to do this yourself but if you want to cheat, download SampleCA. <Condition Message='This installation can only run in full UI mode.'> <![CDATA[UILevel = 5]]> </Condition> <CustomAction Id='CheckingPID' BinaryKey='CheckPID' DllEntry='CheckPID' /> <CustomAction Id='RefusePID' Error='Invalid key. Installation aborted.' /> <InstallExecuteSequence> <Custom Action='CheckingPID' After='CostFinalize' /> <Custom Action='RefusePID' After='CheckingPID'>PIDACCEPTED = \"0\" AND NOT Installed</Custom> </InstallExecuteSequence> <Binary Id='CheckPID' SourceFile='CheckPID.dll' /> To summarize: first, we won't allow the installer to run with reduced or no UI because the user can't enter a registration key in those cases. The reason for the ugly CDATA wrapper is that XML attributes special meaning to some characters, most notably < and > . Wherever they appear in a different context, meaning less-than or greater-than , we have to escape them by wrapping the whole expression into a CDATA. Although this actual case could get away without it because it only checks for equality, it is a good habit to learn to wrap all similar conditional values just in case we need to modify them later, introducing such XML conflicts. Then, we have a custom action named CheckingPID running after CostFinalize , when we instruct the installer to start the actual installation after having specified which features we need and where we want to install. This action will call the CheckPID function in our CheckPID.dll , bundled with the installer. The DLL sets the PIDACCEPTED property to either 1 or 0, according to its decision on the validity of the user key entered and stored into the PIDKEY property by the control involved. Note that using properties (with all uppercase names, otherwise Windows Installer will not treat them as public properties) is the only way to pass arguments to and from the custom action. We have a second custom action named RefusePID , scheduled to run after the previous action. This is a conditional custom action, only run if the returned PIDACCEPTED property is found to be zero. In this case, the custom action will display an error message and abort the installation. But we will only be interested in this value during the installation, not while we're uninstalling the product. To get an understanding of how these actions are called and how they relate to each other, we might run the installer with verbose logging. As it will be verbose, using a text editor and searching for our property and custom action names (\"PID\" will do just fine) might help locate what's really happening. msiexec /i SampleCA.msi /l*v SampleCA.log If the DLL we need to call has been installed rather than just included in the package, we can use: <CustomAction Id='CheckingPID' FileKey='HelperDLL' DllEntry='CheckPID' />","title":"What's Not in the Book"},{"location":"language_learning/WiXTutorial/3_Upgrades_and_Modularization/0_Upgrades_and_Modularization/","text":"Upgrades and Modularization At the end of the previous lesson, we have already learned how to do everything that can be thought of when it comes to installation packages, right? After all, even if Windows Installer doesn't provide an immediate solution, we just fire up our trusty old compiler and write it for ourselves, right? In a way, yes. And in a way, no. We know how to assemble our original installation package but what shall we do when it comes to shipping an upgrade? Or a patch? Shall we ask the user to uninstall the previous version and reinstall the new one? And what happens to the settings our user has made during the use of the software? Shall they start everything from scratch again? Of course not. So, let's see how Windows Installer can help solve such problems. It divides product changes into three categories: Small updates mean small changes to one or a few files where the change doesn't warrant changing the product version (major.minor.build) or product ID GUID. Note that you always have to change the Package GUID when you create a new .msi file that is different from the previous ones in any respect. The Installer keeps track of your installed programs and finds them when the user wants to change or remove the installation using these GUIDs. Using the same GUID for different packages will confuse the Installer. Minor upgrades denote changes where the product version will already change. Modify the Version attribute of the Product tag. The product will remain the same, so you don't need to change the Product GUID but, of course, get a new Package GUID. Major upgrades denote significant changes like going from one full version to another. Change everything: Version attribute, Product and Package GUIDs. There are cases when the Windows Installer forces you to use a major upgrade (in other words, to change the Product GUID). You have to when you expect the old and new versions to coexist on the user's computer. You have to when you change the name of the .msi file for any reason. You have to when you need to change any Component GUID in the package. You have to when a component has been removed. You have to when there are any changes in the feature hierarchy (child feature moving out of a parent, or a parent feature getting a new child). So, major upgrades are a clear cut but the line between small updates and minor upgrades can be blurred. Think about it this way: if you'll ever need to differentiate between the current and the new versions in your future products, vote for the minor upgrade. In most of the usual cases, however, unless the product is rather large and downloading and deploying it again would be out of question, major upgrades are the safest because they provide the smoothest solution without the risks of the other two variants. When you change GUIDs, keep track of the old ones. You will need them to use the sophisticated upgrade features of Windows Installer. Pages in this Chapter Checking for Oldies Replacing Ourselves Patchwork Fragments Mergers","title":"Upgrades and Modularization"},{"location":"language_learning/WiXTutorial/3_Upgrades_and_Modularization/0_Upgrades_and_Modularization/#upgrades-and-modularization","text":"At the end of the previous lesson, we have already learned how to do everything that can be thought of when it comes to installation packages, right? After all, even if Windows Installer doesn't provide an immediate solution, we just fire up our trusty old compiler and write it for ourselves, right? In a way, yes. And in a way, no. We know how to assemble our original installation package but what shall we do when it comes to shipping an upgrade? Or a patch? Shall we ask the user to uninstall the previous version and reinstall the new one? And what happens to the settings our user has made during the use of the software? Shall they start everything from scratch again? Of course not. So, let's see how Windows Installer can help solve such problems. It divides product changes into three categories: Small updates mean small changes to one or a few files where the change doesn't warrant changing the product version (major.minor.build) or product ID GUID. Note that you always have to change the Package GUID when you create a new .msi file that is different from the previous ones in any respect. The Installer keeps track of your installed programs and finds them when the user wants to change or remove the installation using these GUIDs. Using the same GUID for different packages will confuse the Installer. Minor upgrades denote changes where the product version will already change. Modify the Version attribute of the Product tag. The product will remain the same, so you don't need to change the Product GUID but, of course, get a new Package GUID. Major upgrades denote significant changes like going from one full version to another. Change everything: Version attribute, Product and Package GUIDs. There are cases when the Windows Installer forces you to use a major upgrade (in other words, to change the Product GUID). You have to when you expect the old and new versions to coexist on the user's computer. You have to when you change the name of the .msi file for any reason. You have to when you need to change any Component GUID in the package. You have to when a component has been removed. You have to when there are any changes in the feature hierarchy (child feature moving out of a parent, or a parent feature getting a new child). So, major upgrades are a clear cut but the line between small updates and minor upgrades can be blurred. Think about it this way: if you'll ever need to differentiate between the current and the new versions in your future products, vote for the minor upgrade. In most of the usual cases, however, unless the product is rather large and downloading and deploying it again would be out of question, major upgrades are the safest because they provide the smoothest solution without the risks of the other two variants. When you change GUIDs, keep track of the old ones. You will need them to use the sophisticated upgrade features of Windows Installer.","title":"Upgrades and Modularization"},{"location":"language_learning/WiXTutorial/3_Upgrades_and_Modularization/0_Upgrades_and_Modularization/#pages-in-this-chapter","text":"Checking for Oldies Replacing Ourselves Patchwork Fragments Mergers","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/3_Upgrades_and_Modulization/0_Upgrades_and_Modularization/","text":"Upgrades and Modularization At the end of the previous lesson, we have already learned how to do everything that can be thought of when it comes to installation packages, right? After all, even if Windows Installer doesn't provide an immediate solution, we just fire up our trusty old compiler and write it for ourselves, right? In a way, yes. And in a way, no. We know how to assemble our original installation package but what shall we do when it comes to shipping an upgrade? Or a patch? Shall we ask the user to uninstall the previous version and reinstall the new one? And what happens to the settings our user has made during the use of the software? Shall they start everything from scratch again? Of course not. So, let's see how Windows Installer can help solve such problems. It divides product changes into three categories: Small updates mean small changes to one or a few files where the change doesn't warrant changing the product version (major.minor.build) or product ID GUID. Note that you always have to change the Package GUID when you create a new .msi file that is different from the previous ones in any respect. The Installer keeps track of your installed programs and finds them when the user wants to change or remove the installation using these GUIDs. Using the same GUID for different packages will confuse the Installer. Minor upgrades denote changes where the product version will already change. Modify the Version attribute of the Product tag. The product will remain the same, so you don't need to change the Product GUID but, of course, get a new Package GUID. Major upgrades denote significant changes like going from one full version to another. Change everything: Version attribute, Product and Package GUIDs. There are cases when the Windows Installer forces you to use a major upgrade (in other words, to change the Product GUID). You have to when you expect the old and new versions to coexist on the user's computer. You have to when you change the name of the .msi file for any reason. You have to when you need to change any Component GUID in the package. You have to when a component has been removed. You have to when there are any changes in the feature hierarchy (child feature moving out of a parent, or a parent feature getting a new child). So, major upgrades are a clear cut but the line between small updates and minor upgrades can be blurred. Think about it this way: if you'll ever need to differentiate between the current and the new versions in your future products, vote for the minor upgrade. In most of the usual cases, however, unless the product is rather large and downloading and deploying it again would be out of question, major upgrades are the safest because they provide the smoothest solution without the risks of the other two variants. When you change GUIDs, keep track of the old ones. You will need them to use the sophisticated upgrade features of Windows Installer. Pages in this Chapter Checking for Oldies Replacing Ourselves Patchwork Fragments Mergers","title":"Upgrades and Modularization"},{"location":"language_learning/WiXTutorial/3_Upgrades_and_Modulization/0_Upgrades_and_Modularization/#upgrades-and-modularization","text":"At the end of the previous lesson, we have already learned how to do everything that can be thought of when it comes to installation packages, right? After all, even if Windows Installer doesn't provide an immediate solution, we just fire up our trusty old compiler and write it for ourselves, right? In a way, yes. And in a way, no. We know how to assemble our original installation package but what shall we do when it comes to shipping an upgrade? Or a patch? Shall we ask the user to uninstall the previous version and reinstall the new one? And what happens to the settings our user has made during the use of the software? Shall they start everything from scratch again? Of course not. So, let's see how Windows Installer can help solve such problems. It divides product changes into three categories: Small updates mean small changes to one or a few files where the change doesn't warrant changing the product version (major.minor.build) or product ID GUID. Note that you always have to change the Package GUID when you create a new .msi file that is different from the previous ones in any respect. The Installer keeps track of your installed programs and finds them when the user wants to change or remove the installation using these GUIDs. Using the same GUID for different packages will confuse the Installer. Minor upgrades denote changes where the product version will already change. Modify the Version attribute of the Product tag. The product will remain the same, so you don't need to change the Product GUID but, of course, get a new Package GUID. Major upgrades denote significant changes like going from one full version to another. Change everything: Version attribute, Product and Package GUIDs. There are cases when the Windows Installer forces you to use a major upgrade (in other words, to change the Product GUID). You have to when you expect the old and new versions to coexist on the user's computer. You have to when you change the name of the .msi file for any reason. You have to when you need to change any Component GUID in the package. You have to when a component has been removed. You have to when there are any changes in the feature hierarchy (child feature moving out of a parent, or a parent feature getting a new child). So, major upgrades are a clear cut but the line between small updates and minor upgrades can be blurred. Think about it this way: if you'll ever need to differentiate between the current and the new versions in your future products, vote for the minor upgrade. In most of the usual cases, however, unless the product is rather large and downloading and deploying it again would be out of question, major upgrades are the safest because they provide the smoothest solution without the risks of the other two variants. When you change GUIDs, keep track of the old ones. You will need them to use the sophisticated upgrade features of Windows Installer.","title":"Upgrades and Modularization"},{"location":"language_learning/WiXTutorial/3_Upgrades_and_Modulization/0_Upgrades_and_Modularization/#pages-in-this-chapter","text":"Checking for Oldies Replacing Ourselves Patchwork Fragments Mergers","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/4_Net_and_.NET/0_Net_and_.NET/","text":"Net and .NET When you plan to distribute programs based on the .NET Framework, you have to make sure the user has the framework installed. Microsoft allows you to redistribute their framework but only in its original form (see their description ). This also means that you can't build the framework into your own .msi package. There is no merge module or similar available. You have to provide a separate bootstrap installer, Setup.exe, that looks for the installed framework and starts your .NET Framework redistributable (or, alternatively, downloads and installs it from the Net). When finished, it will call your own installation package. However, you don't have to write such a bootstrap installer yourself. Starting with WiX v3.6, you can use the Burn chainer to install .NET Framework . Pages in this Chapter Framed by .NET Bootstrapping Launch the Internet Web Directory Services Rendered","title":"Net and .NET"},{"location":"language_learning/WiXTutorial/4_Net_and_.NET/0_Net_and_.NET/#net-and-net","text":"When you plan to distribute programs based on the .NET Framework, you have to make sure the user has the framework installed. Microsoft allows you to redistribute their framework but only in its original form (see their description ). This also means that you can't build the framework into your own .msi package. There is no merge module or similar available. You have to provide a separate bootstrap installer, Setup.exe, that looks for the installed framework and starts your .NET Framework redistributable (or, alternatively, downloads and installs it from the Net). When finished, it will call your own installation package. However, you don't have to write such a bootstrap installer yourself. Starting with WiX v3.6, you can use the Burn chainer to install .NET Framework .","title":"Net and .NET"},{"location":"language_learning/WiXTutorial/4_Net_and_.NET/0_Net_and_.NET/#pages-in-this-chapter","text":"Framed by .NET Bootstrapping Launch the Internet Web Directory Services Rendered","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/6_SQL/0_SQL/","text":"SQL Pages in this Chapter Creating a Database \u672c\u7ae0\u5185\u5bb9 \u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93","title":"SQL"},{"location":"language_learning/WiXTutorial/6_SQL/0_SQL/#sql","text":"","title":"SQL"},{"location":"language_learning/WiXTutorial/6_SQL/0_SQL/#pages-in-this-chapter","text":"Creating a Database","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/6_SQL/0_SQL/#_1","text":"\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93","title":"\u672c\u7ae0\u5185\u5bb9"},{"location":"language_learning/WiXTutorial/6_SQL/1_Creating_a_Database/","text":"Creating a Database To create an SQL database, we first need a user with the proper credentials. The user name and password are stored in properties, you can use any usual UI elements or custom actions to set them. Note that this is the same User tag we used to create a new user account but it was used inside a Component tag then. Outside any component, it will not create the user, it only will define the credentials for other operations to use. As the tags, as well as the SQL functionality, are present in extension modules, we have to mention them in the opening tag of the source file: <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi' xmlns:util='http://schemas.microsoft.com/wix/UtilExtension' xmlns:sql='http://schemas.microsoft.com/wix/SqlExtension'> Also, because they belong the their own namespace, we have to decorate them during use: <util:User Id='SQLUser' Name='[SQLUSER]' Password='[SQLPASSWORD]' /> The creation of the database itself goes into a component, as usual. SqlDatabase refers to the previous User declaration, specifies the database name, server and instance. Not specifying Server will make it install on the SQL Server running on the target machine. Other attributes specify how to proceed in different situations. ConfirmOverwrite determines what to do if the database already exists and the CreateOnInstall , CreateOnUninstall , DropOnInstall , and DropOnUninstall attributes dictate the required behavior on install and uninstall. The nested SqlScript tag will determine what to do with the empty database just created. We can execute any valid SQL script here, residing in a separate file. The BinaryKey attribute will provide the link to the .sql script file. Other attributes will specify the behavior if an error occurs ( ContinueOnError ) or will determine when to execute the script ( ExecuteOnInstall , ExecuteOnUninstall , RollbackOnInstall , RollbackOnUninstall ). With more than one script present for execution, they can be sequenced using the Sequence attribute. <Component Id='SqlComponent' Guid='YOURGUID-D8C7-4102-BA84-9702188FA316'> <sql:SqlDatabase Id='SqlDatabase' Database='Foobar' User='SQLUser' Server='[SQLSERVER]' CreateOnInstall='yes' DropOnUninstall='yes' ContinueOnError='yes'> <sql:SqlScript Id='CreateTable' BinaryKey='CreateTable' ExecuteOnInstall='yes' /> </sql:SqlDatabase> </Component> All that remains is to include the .sql file: <Binary Id='CreateTable' SourceFile='CreateTable.sql' /> The file it refers to will contain usual SQL commands to create a database table: CREATE TABLE Test (Value1 CHAR(50), Value2 INTEGER) CREATE INDEX TestIndex ON Test (Value1) When building the installation package, you have to link it against the appropriate WiX modules: candle.exe -ext WixUtilExtension -ext WixSqlExtension SampleSQL.wxs light.exe -ext WixUtilExtension -ext WixSqlExtension SampleSQL.wixobj You can download the complete SampleSQL .","title":"Creating a Database"},{"location":"language_learning/WiXTutorial/6_SQL/1_Creating_a_Database/#creating-a-database","text":"To create an SQL database, we first need a user with the proper credentials. The user name and password are stored in properties, you can use any usual UI elements or custom actions to set them. Note that this is the same User tag we used to create a new user account but it was used inside a Component tag then. Outside any component, it will not create the user, it only will define the credentials for other operations to use. As the tags, as well as the SQL functionality, are present in extension modules, we have to mention them in the opening tag of the source file: <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi' xmlns:util='http://schemas.microsoft.com/wix/UtilExtension' xmlns:sql='http://schemas.microsoft.com/wix/SqlExtension'> Also, because they belong the their own namespace, we have to decorate them during use: <util:User Id='SQLUser' Name='[SQLUSER]' Password='[SQLPASSWORD]' /> The creation of the database itself goes into a component, as usual. SqlDatabase refers to the previous User declaration, specifies the database name, server and instance. Not specifying Server will make it install on the SQL Server running on the target machine. Other attributes specify how to proceed in different situations. ConfirmOverwrite determines what to do if the database already exists and the CreateOnInstall , CreateOnUninstall , DropOnInstall , and DropOnUninstall attributes dictate the required behavior on install and uninstall. The nested SqlScript tag will determine what to do with the empty database just created. We can execute any valid SQL script here, residing in a separate file. The BinaryKey attribute will provide the link to the .sql script file. Other attributes will specify the behavior if an error occurs ( ContinueOnError ) or will determine when to execute the script ( ExecuteOnInstall , ExecuteOnUninstall , RollbackOnInstall , RollbackOnUninstall ). With more than one script present for execution, they can be sequenced using the Sequence attribute. <Component Id='SqlComponent' Guid='YOURGUID-D8C7-4102-BA84-9702188FA316'> <sql:SqlDatabase Id='SqlDatabase' Database='Foobar' User='SQLUser' Server='[SQLSERVER]' CreateOnInstall='yes' DropOnUninstall='yes' ContinueOnError='yes'> <sql:SqlScript Id='CreateTable' BinaryKey='CreateTable' ExecuteOnInstall='yes' /> </sql:SqlDatabase> </Component> All that remains is to include the .sql file: <Binary Id='CreateTable' SourceFile='CreateTable.sql' /> The file it refers to will contain usual SQL commands to create a database table: CREATE TABLE Test (Value1 CHAR(50), Value2 INTEGER) CREATE INDEX TestIndex ON Test (Value1) When building the installation package, you have to link it against the appropriate WiX modules: candle.exe -ext WixUtilExtension -ext WixSqlExtension SampleSQL.wxs light.exe -ext WixUtilExtension -ext WixSqlExtension SampleSQL.wixobj You can download the complete SampleSQL .","title":"Creating a Database"},{"location":"language_learning/WiXTutorial/8_Transforms/0_Transforms/","text":"Transforms Transforms are used to change one installer into another. A transform applied to an already existing installer can alter any of the tables inside, modifying the behavior of the installer accordingly. One thing a transform cannot do is to modify the files embedded in the package. Pages in this Chapter Morphing Installers","title":"Transforms"},{"location":"language_learning/WiXTutorial/8_Transforms/0_Transforms/#transforms","text":"Transforms are used to change one installer into another. A transform applied to an already existing installer can alter any of the tables inside, modifying the behavior of the installer accordingly. One thing a transform cannot do is to modify the files embedded in the package.","title":"Transforms"},{"location":"language_learning/WiXTutorial/8_Transforms/0_Transforms/#pages-in-this-chapter","text":"Morphing Installers","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/8_Transforms/1_Morphing_Installers/","text":"Morphing Installers One interesting reason to use transforms is to modify the user interface strings to another language. As we have already discussed earlier, WiX allows the WixUI interface languages to be localized. Using that, we could provide installers in various languages. But if we need more than one language, this simpler solution only allows us to create parallel installers, all of them in their own language all right but storing all files to be deployed several times. Transforms can help us in this case. We can start with our basic installer (this could be English or anything else). Each language we add will practically be an on-the-fly patch, called by Windows Installer before the first page appears, to translate the UI strings to a specific language. Thus, all languages will share the same installation package, the files to be installed only appearing once, and each new language will only add a small amount to the package size. We can start our installation with a small bootstrapper. The bootstrapper can list the available languages, maybe defaulting to the language of the operating system it is running on but allowing the user to chose any language. When finished, the bootstrapper can launch the actual installation specifying which transform to apply. To create such a multi-language installer, there is surprisingly little to change: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Name='Foobar 1.0' Id='YOURGUID-86C7-4D14-AEC0-86416A69ABDE' UpgradeCode='YOURGUID-7349-453F-94F6-BCB5110BA4FD' Language='1033' Codepage='$(var.codepage)' Version='1.0.0' Manufacturer='Acme Ltd.'> <Package Id='*' Keywords='Installer' Description=\"Acme's Foobar 1.0 Installer\" Comments='Foobar is a registered trademark of Acme Ltd.' Manufacturer='Acme Ltd.' InstallerVersion='100' Languages='1033' Compressed='yes' SummaryCodepage='$(var.codepage)' /> ... </Wix> As the first step, we will build these separate localized installers, much like before but each file should have the appropriate codepage specified, as shown in the table of supported languages: candle.exe SampleMulti.wxs -dcodepage=1252 light.exe -ext WixUIExtension -cultures:en-us -out SampleMulti.msi SampleMulti.wixobj candle.exe SampleMulti.wxs -dcodepage=1250 light.exe -ext WixUIExtension -cultures:hu-hu -out Sample_Hu-hu.msi SampleMulti.wixobj candle.exe SampleMulti.wxs -dcodepage=1252 light.exe -ext WixUIExtension -cultures:fr-fr -out Sample_Fr-fr.msi SampleMulti.wixobj Then WiX's transform tool, Torch, compares each localized installer to the base one (SampleMulti.msi) and creates an .mst transform file in turn comprising the differences between the two: torch.exe -p -t language SampleMulti.msi Sample_Hu-hu.msi -out hu-hu.mst torch.exe -p -t language SampleMulti.msi Sample_Fr-fr.msi -out fr-fr.mst Our bootstrap installer can then call the base installer package with the appropriate language package specified: msiexec /i SampleMulti.msi TRANSFORMS=\"fr-fr.mst\" Apart from the need for the bootstrapper, we also need to distribute the transform files separately. A better approach (not currently supported by WiX but available with the EmbedTransform tool is to embed the transforms into the original package: EmbedTransform.exe SampleMulti.msi hu-hu.mst EmbedTransform.exe SampleMulti.msi fr-fr.mst The only difference in its use is that a colon preceding the name instructs Windows Installer to look for the transform file inside the package: msiexec /i SampleMulti.msi TRANSFORMS=\":fr-fr.mst\"","title":"Morphing Installers"},{"location":"language_learning/WiXTutorial/8_Transforms/1_Morphing_Installers/#morphing-installers","text":"One interesting reason to use transforms is to modify the user interface strings to another language. As we have already discussed earlier, WiX allows the WixUI interface languages to be localized. Using that, we could provide installers in various languages. But if we need more than one language, this simpler solution only allows us to create parallel installers, all of them in their own language all right but storing all files to be deployed several times. Transforms can help us in this case. We can start with our basic installer (this could be English or anything else). Each language we add will practically be an on-the-fly patch, called by Windows Installer before the first page appears, to translate the UI strings to a specific language. Thus, all languages will share the same installation package, the files to be installed only appearing once, and each new language will only add a small amount to the package size. We can start our installation with a small bootstrapper. The bootstrapper can list the available languages, maybe defaulting to the language of the operating system it is running on but allowing the user to chose any language. When finished, the bootstrapper can launch the actual installation specifying which transform to apply. To create such a multi-language installer, there is surprisingly little to change: <?xml version='1.0' encoding='windows-1252'?> <Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'> <Product Name='Foobar 1.0' Id='YOURGUID-86C7-4D14-AEC0-86416A69ABDE' UpgradeCode='YOURGUID-7349-453F-94F6-BCB5110BA4FD' Language='1033' Codepage='$(var.codepage)' Version='1.0.0' Manufacturer='Acme Ltd.'> <Package Id='*' Keywords='Installer' Description=\"Acme's Foobar 1.0 Installer\" Comments='Foobar is a registered trademark of Acme Ltd.' Manufacturer='Acme Ltd.' InstallerVersion='100' Languages='1033' Compressed='yes' SummaryCodepage='$(var.codepage)' /> ... </Wix> As the first step, we will build these separate localized installers, much like before but each file should have the appropriate codepage specified, as shown in the table of supported languages: candle.exe SampleMulti.wxs -dcodepage=1252 light.exe -ext WixUIExtension -cultures:en-us -out SampleMulti.msi SampleMulti.wixobj candle.exe SampleMulti.wxs -dcodepage=1250 light.exe -ext WixUIExtension -cultures:hu-hu -out Sample_Hu-hu.msi SampleMulti.wixobj candle.exe SampleMulti.wxs -dcodepage=1252 light.exe -ext WixUIExtension -cultures:fr-fr -out Sample_Fr-fr.msi SampleMulti.wixobj Then WiX's transform tool, Torch, compares each localized installer to the base one (SampleMulti.msi) and creates an .mst transform file in turn comprising the differences between the two: torch.exe -p -t language SampleMulti.msi Sample_Hu-hu.msi -out hu-hu.mst torch.exe -p -t language SampleMulti.msi Sample_Fr-fr.msi -out fr-fr.mst Our bootstrap installer can then call the base installer package with the appropriate language package specified: msiexec /i SampleMulti.msi TRANSFORMS=\"fr-fr.mst\" Apart from the need for the bootstrapper, we also need to distribute the transform files separately. A better approach (not currently supported by WiX but available with the EmbedTransform tool is to embed the transforms into the original package: EmbedTransform.exe SampleMulti.msi hu-hu.mst EmbedTransform.exe SampleMulti.msi fr-fr.mst The only difference in its use is that a colon preceding the name instructs Windows Installer to look for the transform file inside the package: msiexec /i SampleMulti.msi TRANSFORMS=\":fr-fr.mst\"","title":"Morphing Installers"},{"location":"language_learning/WiXTutorial/9_Standard_Libraries/0_Standard_Libraries/","text":"Standard Libraries There are a few additional libraries bundled with WiX helping us, installer developers to accomplish common tasks. We will examine them in detail but let's start with a simple sample first. WiX \u4e2d\u8fd8\u6709\u4e00\u4e9b\u989d\u5916\u7684\u5e93\u53ef\u4ee5\u5e2e\u52a9\u5b89\u88c5\u5305\u5f00\u53d1\u4eba\u5458\u5b8c\u6210\u5e38\u89c1\u4efb\u52a1\u3002\u672c\u7ae0\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u4f46\u9996\u5148\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5165\u624b\u3002 Pages in this Chapter Custom Actions and User Interface Silence, Please! \u672c\u7ae0\u5185\u5bb9 \u81ea\u5b9a\u4e49\u884c\u4e3a\u548c\u7528\u6237\u754c\u9762 \u8bf7\u5b89\u9759\uff01","title":"Standard Libraries"},{"location":"language_learning/WiXTutorial/9_Standard_Libraries/0_Standard_Libraries/#standard-libraries","text":"There are a few additional libraries bundled with WiX helping us, installer developers to accomplish common tasks. We will examine them in detail but let's start with a simple sample first. WiX \u4e2d\u8fd8\u6709\u4e00\u4e9b\u989d\u5916\u7684\u5e93\u53ef\u4ee5\u5e2e\u52a9\u5b89\u88c5\u5305\u5f00\u53d1\u4eba\u5458\u5b8c\u6210\u5e38\u89c1\u4efb\u52a1\u3002\u672c\u7ae0\u5c06\u5bf9\u4ed6\u4eec\u8fdb\u884c\u8be6\u7ec6\u7684\u89e3\u91ca\uff0c\u4f46\u9996\u5148\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5165\u624b\u3002","title":"Standard Libraries"},{"location":"language_learning/WiXTutorial/9_Standard_Libraries/0_Standard_Libraries/#pages-in-this-chapter","text":"Custom Actions and User Interface Silence, Please!","title":"Pages in this Chapter"},{"location":"language_learning/WiXTutorial/9_Standard_Libraries/0_Standard_Libraries/#_1","text":"\u81ea\u5b9a\u4e49\u884c\u4e3a\u548c\u7528\u6237\u754c\u9762 \u8bf7\u5b89\u9759\uff01","title":"\u672c\u7ae0\u5185\u5bb9"},{"location":"language_learning/git/git/","text":"\u5b89\u88c5\u4e0e\u914d\u7f6e \u5b89\u88c5 Windows\u4e0a\u5b89\u88c5Git\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u4e0b\u8f7d\u5e76\u5b89\u88c5 Git\u5b89\u88c5\u7a0b\u5e8f \uff0c\u6309\u9ed8\u8ba4\u9009\u9879\u5b89\u88c5\u5373\u53ef\u3002\u5b89\u88c5\u6210\u529f\u540e\uff0c\u5728\u4efb\u610f\u6587\u4ef6\u5939\u4e0b\u53f3\u952e\u83dc\u5355\u4e2d\u53ef\u4ee5\u770b\u5230 Git Bash Here \u548c Git GUI Here \u3002 \u7528\u6237\u914d\u7f6e Git \u81ea\u5e26\u4e00\u4e2a git config \u7684\u5de5\u5177\u6765\u5e2e\u52a9\u8bbe\u7f6e\u63a7\u5236 Git \u5916\u89c2\u548c\u884c\u4e3a\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5b58\u50a8\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\uff1a - /etc/gitconfig \u6587\u4ef6: \u5305\u542b\u7cfb\u7edf\u4e0a\u6bcf\u4e00\u4e2a\u7528\u6237\u53ca\u4ed6\u4eec\u4ed3\u5e93\u7684\u901a\u7528\u914d\u7f6e\u3002 \u5982\u679c\u4f7f\u7528\u5e26\u6709 --system \u9009\u9879\u7684 git config \u65f6\uff0c\u5b83\u4f1a\u4ece\u6b64\u6587\u4ef6\u8bfb\u5199\u914d\u7f6e\u53d8\u91cf\u3002 - ~/.gitconfig \u6216 ~/.config/git/config \u6587\u4ef6\uff1a\u53ea\u9488\u5bf9\u5f53\u524d\u7528\u6237\u3002 \u53ef\u4ee5\u4f20\u9012 --global \u9009\u9879\u8ba9 Git \u8bfb\u5199\u6b64\u6587\u4ef6\u3002 - \u5f53\u524d\u4f7f\u7528\u4ed3\u5e93\u7684 Git \u76ee\u5f55\u4e2d\u7684 config \u6587\u4ef6\uff08\u5c31\u662f .git/config\uff09\uff1a\u9488\u5bf9\u8be5\u4ed3\u5e93\u3002 \u6bcf\u4e00\u4e2a\u7ea7\u522b\u8986\u76d6\u4e0a\u4e00\u7ea7\u522b\u7684\u914d\u7f6e\uff0c\u6240\u4ee5 .git/config \u7684\u914d\u7f6e\u53d8\u91cf\u4f1a\u8986\u76d6 /etc/gitconfig \u4e2d\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u5728 Windows \u7cfb\u7edf\u4e2d\uff0cGit \u4f1a\u67e5\u627e $HOME \u76ee\u5f55\u4e0b\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u662f C:\\Users\\$USER\uff09\u7684 .gitconfig \u6587\u4ef6\u3002 Git \u540c\u6837\u4e5f\u4f1a\u5bfb\u627e /etc/gitconfig \u6587\u4ef6\uff0c\u4f46\u53ea\u9650\u4e8e MSys \u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u5373\u5b89\u88c5 Git \u65f6\u6240\u9009\u7684\u76ee\u6807\u4f4d\u7f6e\u3002 \u5f53\u5b89\u88c5\u5b8c Git \u5e94\u8be5\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u8bbe\u7f6e\u4f60\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u3002 \u8fd9\u6837\u505a\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a Git \u7684\u63d0\u4ea4\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u4e14\u5b83\u4f1a\u5199\u5165\u5230\u4f60\u7684\u6bcf\u4e00\u6b21\u63d0\u4ea4\u4e2d\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6253\u5f00 Git Bash Here \u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a $ git config --global user.name \"your name\" $ git config --global user.email \"your email\" \u518d\u6b21\u5f3a\u8c03\uff0c\u5982\u679c\u4f7f\u7528\u4e86 --global \u9009\u9879\uff0c\u90a3\u4e48\u8be5\u547d\u4ee4\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u6b21\uff0c\u56e0\u4e3a\u4e4b\u540e\u65e0\u8bba\u4f60\u5728\u8be5\u7cfb\u7edf\u4e0a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c Git \u90fd\u4f1a\u4f7f\u7528\u90a3\u4e9b\u4fe1\u606f\u3002 \u5f53\u4f60\u60f3\u9488\u5bf9\u7279\u5b9a\u9879\u76ee\u4f7f\u7528\u4e0d\u540c\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u65f6\uff0c\u53ef\u4ee5\u5728\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c\u6ca1\u6709 --global \u9009\u9879\u7684\u547d\u4ee4\u6765\u914d\u7f6e\u3002 \u67e5\u770b\u914d\u7f6e\u4fe1\u606f \u5982\u679c\u60f3\u8981\u68c0\u67e5\u4f60\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 git config --list \u547d\u4ee4\u6765\u5217\u51fa\u6240\u6709 Git \u5f53\u65f6\u80fd\u627e\u5230\u7684\u914d\u7f6e\u3002 $ git config --list \u4f60\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165 git config <key> \uff1a \u6765\u68c0\u67e5 Git \u7684\u67d0\u4e00\u9879\u914d\u7f6e $ git config user.name \u57fa\u672c\u672f\u8bed Workspace \uff1a\u5de5\u4f5c\u533a\uff0c\u4ee3\u7801\u5e93\u7684\u6240\u6709\u6587\u4ef6\u4f46\u4e0d\u5305\u62ec\u7248\u672c\u5e93( .git \u6587\u4ef6\u5939\u5185\u6240\u6709\u6587\u4ef6) Index/Stage \uff1a\u6682\u5b58\u533a\uff0c\u4e5f\u53eb\u7d22\u5f15\uff0c\u7528\u4e8e\u8fdb\u884c\u63d0\u4ea4\u524d\u7684\u7f13\u5b58\u533a\u57df\uff0c\u6dfb\u52a0\u7684\u4fee\u6539,\u90fd\u662f\u8fdb\u5165\u5230\u6682\u5b58\u533a\u4e86\uff0c\u8089\u773c\u4e0d\u53ef\u89c1 \u901a\u8fc7 git status \u53ef\u4ee5\u770b\u5230\u4fee\u6539\u7684\u72b6\u6001\u3002 Repository \uff1a\u4ed3\u5e93\u533a\uff08\u6216\u672c\u5730\u4ed3\u5e93\uff09\uff0c\u4e5f\u5b58\u50a8\u5e93\uff0c\u63d0\u4ea4\u7684\u76ee\u6807\u5e93 Remote \uff1a\u8fdc\u7a0b\u4ed3\u5e93 \u672c\u5730\u7248\u672c\u7ba1\u7406 - \u57fa\u7840\u7bc7 1. \u83b7\u53d6Git\u4ed3\u5e93 1.1 \u5728\u73b0\u6709\u76ee\u5f55\u4e2d\u521d\u59cb\u5316\u4ed3\u5e93 $ mkdir git_test $ cd git_test $ pwd $ git init # \u5c06\u5f53\u524d\u6587\u4ef6\u5939\u8bbe\u4e3a\u4ed3\u5e93 $ Initialized empty Git repository in /Users/my-pc/testcms/.git/ $ git init project-dir # \u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u521b\u5efaproject-dir\u4ed3\u5e93 \u77ac\u95f4Git\u5c31\u628a\u4ed3\u5e93\u5efa\u597d\u4e86\uff0c\u800c\u4e14\u544a\u8bc9\u4f60\u662f\u4e00\u4e2a\u7a7a\u7684\u4ed3\u5e93\uff08empty Git repository\uff09\uff0c\u7ec6\u5fc3\u7684\u5f00\u53d1\u8005\u53ef\u4ee5\u53d1\u73b0\u5f53\u524d\u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a.git\u7684\u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u662fGit\u6765\u8ddf\u8e2a\u7ba1\u7406\u7248\u672c\u5e93\u7684\uff0c\u6ca1\u4e8b\u5343\u4e07\u4e0d\u8981\u624b\u52a8\u4fee\u6539\u8fd9\u4e2a\u76ee\u5f55\u91cc\u9762\u7684\u6587\u4ef6\uff0c\u4e0d\u7136\u6539\u4e71\u4e86\uff0c\u5c31\u628aGit\u4ed3\u5e93\u7ed9\u7834\u574f\u4e86\u3002 1.2 \u514b\u9686\u5df2\u6709\u4ed3\u5e93 \u514b\u9686\u672c\u5730\u4ed3\u5e93 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer \u83b7\u53d6\u6307\u5b9a\u5386\u53f2\u7248\u672c\u6e90\u4ee3\u7801 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer $ git checkout fd9269a \u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93 $ git clone http://xxx.xxx 2. \u6dfb\u52a0\u4fee\u6539\uff08\u5c06\u4ee3\u7801\u4fee\u6539\u4ece\u5de5\u4f5c\u533a\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff09 \u5e38\u7528\u547d\u4ee4 $ git add -A # \u63d0\u4ea4\u6240\u6709\u53d8\u5316\uff0c\u4e5f\u53ef\u4f7f\u7528--all $ git add -u # \u63d0\u4ea4\u88ab\u4fee\u6539(modified)\u548c\u88ab\u5220\u9664(deleted)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u65b0\u6587\u4ef6(new) $ git add . # \u63d0\u4ea4\u65b0\u6587\u4ef6(new)\u548c\u88ab\u4fee\u6539(modified)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664(deleted)\u6587\u4ef6 $ git add dir # \u63d0\u4ea4\u6587\u4ef6\u5939 \u6dfb\u52a0 .gitignore \u5ffd\u7565\u67d0\u4e9b\u6587\u4ef6\u907f\u514d\u63d0\u4ea4 #ignore these files ./src/test/ ./Test/ temp.txt *.xml 4. \u63d0\u4ea4\u4ee3\u7801\uff08 \u5c06\u6682\u5b58\u533a\u5185\u5bb9\u6dfb\u52a0\u5230\u672c\u5730\u4ed3\u5e93\uff09 $ git commit -m \"\u81ea\u5df1\u5199\u6ce8\u91ca\u4ee5\u5907\u540e\u671f\u67e5\u770b\u63d0\u4ea4\u5185\u5bb9\" 5. \u67e5\u770b\u72b6\u6001\u548c\u65e5\u5fd7 $ git status $ git log 6. \u5220\u9664\u6587\u4ef6 $ git rm <files> $ git add -A $ git commit -m 'remove <files>' \u672c\u5730\u7248\u672c\u7ba1\u7406 - \u9ad8\u7ea7\u7bc7 \u7248\u672c\u56de\u9000 \u5f53\u524d\u7248\u672cHEAD\uff0c\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^\uff0c\u4e0a\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^^\uff0c\u5f53\u7136\u5f80\u4e0a100\u4e2a\u7248\u672c\u5199100\u4e2a^\u6bd4\u8f83\u5bb9\u6613\u6570\u4e0d\u8fc7\u6765\uff0c\u6240\u4ee5\u5199\u6210HEAD~100\u3002 $ git log $ git log --pretty=oneline $ git reset --hard HEAD^ # \u56de\u9000\u5230\u65b0\u7248\u672c $ git reflog $ git reset --hard commit-id \u7ba1\u7406\u4fee\u6539 \u8fdc\u7a0b\u7248\u672c\u7ba1\u7406 \u4e0a\u4f20\u672c\u5730\u4ee3\u7801 1. \u521b\u5efaGithub\u4ed3\u5e93\uff08\u8fdc\u7a0b\u4ed3\u5e93\uff09 \u767b\u9646 Github \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ed3\u5e93 Create a new repository \uff0c 2. \u83b7\u53d6git\u5730\u5740 https://GitHub.com/xxx/xxx.git # \u6216\u8005 git@github.com:xxx/xxx.git 3. \u5173\u8054\u8fdc\u7a0b\u5e93 \u514b\u9686 Github \u4ed3\u5e93 $ git clone https://GitHub.com/xxx/xxx.git # \u6216\u8005 $ git clone origin git@github.com:lsx-123/xxx.git # \u901f\u5ea6\u5feb\u4e00\u4e9b \u5173\u8054\u672c\u5730\u5df2\u5b58\u5728\u5e93 $ git remote add origin git@github.com:lsx-123/xxx.git 4. \u521b\u5efa\u672c\u5730\u4ee3\u7801\uff08\u5982\u6709\u4ee3\u7801\u76f4\u63a5\u62f7\u8d1d\u81f3\u672c\u5730\u6587\u4ef6\u5939\u5185\uff09 5. \u4e0a\u4f20\u672c\u5730\u4ee3\u7801 $ git add . $ git commit -m \"\u9996\u6b21\u4e0a\u4f20xxx\u4ee3\u7801\" $ git push -u origin master # \u7b2c\u4e00\u6b21\u4f7f\u7528 -u\uff0c\u540e\u9762\u5c31\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8be5\u53c2\u6570\u4e86 6. \u4e0b\u8f7d\u8fdc\u7a0b\u4ee3\u7801 $ git pull \u64cd\u4f5c\u547d\u4ee4 Git diff \u7528\u4e8e\u6bd4\u8f83\u4e24\u6b21\u4fee\u6539\u7684\u5dee\u5f02 1.1 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a git diff \u4e0d\u52a0\u53c2\u6570\u5373\u9ed8\u8ba4\u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a 1.2 \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93\uff08\u672c\u5730\u5e93\u4e2d\u6700\u8fd1\u4e00\u6b21commit\u7684\u5185\u5bb9\uff09 git diff --cached [ ...] 1.3 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93 git diff HEAD [ ...] \u5982\u679cHEAD\u6307\u5411\u7684\u662fmaster\u5206\u652f\uff0c\u90a3\u4e48HEAD\u8fd8\u53ef\u4ee5\u6362\u6210master 1.4 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6307\u5b9acommit-id\u7684\u5dee\u5f02 git diff commit-id [ ...] 1.5 \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6307\u5b9acommit-id\u7684\u5dee\u5f02 git diff --cached [ ] [ ...] 1.6 \u6bd4\u8f83\u4e24\u4e2acommit-id\u4e4b\u95f4\u7684\u5dee\u5f02 git diff [ ] [ ] 1.7 \u4f7f\u7528git diff\u6253\u8865\u4e01 git diff > patch //patch\u7684\u547d\u540d\u662f\u968f\u610f\u7684\uff0c\u4e0d\u52a0\u5176\u4ed6\u53c2\u6570\u65f6\u4f5c\u7528\u662f\u5f53\u6211\u4eec\u5e0c\u671b\u5c06\u6211\u4eec\u672c\u4ed3\u5e93\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u62f7\u8d1d\u4e00\u4efd\u5230\u5176\u4ed6\u673a\u5668\u4e0a\u4f7f\u7528\uff0c\u4f46\u662f\u4fee\u6539\u7684\u6587\u4ef6\u6bd4\u8f83\u591a\uff0c\u62f7\u8d1d\u91cf\u6bd4\u8f83\u5927\uff0c \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5c06\u4fee\u6539\u7684\u4ee3\u7801\u505a\u6210\u8865\u4e01\uff0c\u4e4b\u540e\u5728\u5176\u4ed6\u673a\u5668\u4e0a\u5bf9\u5e94\u76ee\u5f55\u4e0b\u4f7f\u7528 git apply patch \u5c06\u8865\u4e01\u6253\u4e0a\u5373\u53ef git diff --cached > patch //\u662f\u5c06\u6211\u4eec\u6682\u5b58\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 git diff --HEAD > patch //\u662f\u5c06\u5de5\u4f5c\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 git diff Testfile > patch//\u5c06\u5355\u4e2a\u6587\u4ef6\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u8865\u4e01 \u62d3\u5c55\uff1agit apply patch \u5e94\u7528\u8865\u4e01\uff0c\u5e94\u7528\u8865\u4e01\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u5148\u68c0\u9a8c\u4e00\u4e0b\u8865\u4e01\u80fd\u5426\u5e94\u7528\uff0cgit apply --check patch \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u90a3\u4e48\u8868\u793a\u53ef\u4ee5\u987a\u5229\u63a5\u53d7\u8fd9\u4e2a\u8865\u4e01 \u53e6\u5916\u53ef\u4ee5\u4f7f\u7528git apply --reject patch\u5c06\u80fd\u6253\u7684\u8865\u4e01\u5148\u6253\u4e0a\uff0c\u6709\u51b2\u7a81\u7684\u4f1a\u751f\u6210.rej\u6587\u4ef6\uff0c\u6b64\u65f6\u53ef\u4ee5\u627e\u5230\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c\u624b\u52a8\u6253\u8865\u4e01 Git FAQ git push\u5230GitHub\u7684\u65f6\u5019\u9047\u5230! [rejected] master -> master (non-fast-forward)\u7684\u95ee\u9898 \u540d\u4e3a\u7684manage\u9879\u76ee\u64cd\u4f5c\u8fc7\u7a0b\uff1a 1. \u5728manage\u6587\u4ef6\u5939\u91cc\u6253\u5f00git\uff0c\u8f93\u5165git init\u521d\u59cb\u5316\u672c\u5730\u4ed3\u5e93\uff0cGitHub\u521b\u5efa\u8fdc\u7a0b\u4ed3\u5e93manage 2. \u5728GitHub\u4e0a\u65b0\u5efa\u4ed3manage 3. \u4ee5\u4e0b\u547d\u4ee4\u5173\u8054\u672c\u5730\u548c\u8fdc\u7a0b\u4ed3\u5e93\uff0c*****\u4e3a\u6211\u7684\u7528\u6237\u540d $ git remote add origin git@github.com:******/manage.git 4. \u672c\u5730\u5df2\u7ecf\u6709\u9879\u76ee\u4ee3\u7801\u4e86\u5728add\u548ccommit\u4e4b\u540e\uff0c\u60f3\u8981push\u5230\u8fdc\u7a0b\u4ed3\u5e93 $ git push origin master \u6b64\u65f6\u62a5\u9519\uff1a ! [rejected] master -> master (non-fast forward) \u2026\u2026\u2026\u2026 \u2026\u2026\u2026\u2026 \u5728\u7f51\u4e0a\u641c\u4e86\u597d\u4e45\uff0c\u8f93\u5165\u4e86\u5404\u79cd\u65e0\u6548\u548c\u9519\u8bef\u7684\u547d\u4ee4\u540e\uff0c\u7ec8\u4e8e\u627e\u5230\u4e86\u89e3\u51b3\u529e\u6cd5\uff1a 1. \u628a\u8fdc\u7a0b\u4ed3\u5e93\u548c\u672c\u5730\u540c\u6b65\uff0c\u6d88\u9664\u5dee\u5f02 $ git pull origin master --allow-unrelated-histories 2. \u91cd\u65b0\u63a8\u9001\u8fdc\u7a0b\u4ed3 $ git push -u origin master Visual Studio\u4f7f\u7528Git\u7ba1\u7406\u9879\u76ee VS2015 \u81ea\u5e26\u4ee3\u7801\u7248\u672c\u7ba1\u7406\u5de5\u5177 git \u53c2\u8003\u6587\u732e \u5ed6\u96ea\u5cf0\uff0c Git\u6559\u7a0b Git\u5b98\u7f51\u6559\u7a0b","title":"Git"},{"location":"language_learning/git/git/#_1","text":"","title":"\u5b89\u88c5\u4e0e\u914d\u7f6e"},{"location":"language_learning/git/git/#_2","text":"Windows\u4e0a\u5b89\u88c5Git\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u4e0b\u8f7d\u5e76\u5b89\u88c5 Git\u5b89\u88c5\u7a0b\u5e8f \uff0c\u6309\u9ed8\u8ba4\u9009\u9879\u5b89\u88c5\u5373\u53ef\u3002\u5b89\u88c5\u6210\u529f\u540e\uff0c\u5728\u4efb\u610f\u6587\u4ef6\u5939\u4e0b\u53f3\u952e\u83dc\u5355\u4e2d\u53ef\u4ee5\u770b\u5230 Git Bash Here \u548c Git GUI Here \u3002","title":"\u5b89\u88c5"},{"location":"language_learning/git/git/#_3","text":"Git \u81ea\u5e26\u4e00\u4e2a git config \u7684\u5de5\u5177\u6765\u5e2e\u52a9\u8bbe\u7f6e\u63a7\u5236 Git \u5916\u89c2\u548c\u884c\u4e3a\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5b58\u50a8\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\uff1a - /etc/gitconfig \u6587\u4ef6: \u5305\u542b\u7cfb\u7edf\u4e0a\u6bcf\u4e00\u4e2a\u7528\u6237\u53ca\u4ed6\u4eec\u4ed3\u5e93\u7684\u901a\u7528\u914d\u7f6e\u3002 \u5982\u679c\u4f7f\u7528\u5e26\u6709 --system \u9009\u9879\u7684 git config \u65f6\uff0c\u5b83\u4f1a\u4ece\u6b64\u6587\u4ef6\u8bfb\u5199\u914d\u7f6e\u53d8\u91cf\u3002 - ~/.gitconfig \u6216 ~/.config/git/config \u6587\u4ef6\uff1a\u53ea\u9488\u5bf9\u5f53\u524d\u7528\u6237\u3002 \u53ef\u4ee5\u4f20\u9012 --global \u9009\u9879\u8ba9 Git \u8bfb\u5199\u6b64\u6587\u4ef6\u3002 - \u5f53\u524d\u4f7f\u7528\u4ed3\u5e93\u7684 Git \u76ee\u5f55\u4e2d\u7684 config \u6587\u4ef6\uff08\u5c31\u662f .git/config\uff09\uff1a\u9488\u5bf9\u8be5\u4ed3\u5e93\u3002 \u6bcf\u4e00\u4e2a\u7ea7\u522b\u8986\u76d6\u4e0a\u4e00\u7ea7\u522b\u7684\u914d\u7f6e\uff0c\u6240\u4ee5 .git/config \u7684\u914d\u7f6e\u53d8\u91cf\u4f1a\u8986\u76d6 /etc/gitconfig \u4e2d\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \u5728 Windows \u7cfb\u7edf\u4e2d\uff0cGit \u4f1a\u67e5\u627e $HOME \u76ee\u5f55\u4e0b\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\u662f C:\\Users\\$USER\uff09\u7684 .gitconfig \u6587\u4ef6\u3002 Git \u540c\u6837\u4e5f\u4f1a\u5bfb\u627e /etc/gitconfig \u6587\u4ef6\uff0c\u4f46\u53ea\u9650\u4e8e MSys \u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u5373\u5b89\u88c5 Git \u65f6\u6240\u9009\u7684\u76ee\u6807\u4f4d\u7f6e\u3002 \u5f53\u5b89\u88c5\u5b8c Git \u5e94\u8be5\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u8bbe\u7f6e\u4f60\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u3002 \u8fd9\u6837\u505a\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u6bcf\u4e00\u4e2a Git \u7684\u63d0\u4ea4\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5e76\u4e14\u5b83\u4f1a\u5199\u5165\u5230\u4f60\u7684\u6bcf\u4e00\u6b21\u63d0\u4ea4\u4e2d\uff0c\u4e0d\u53ef\u66f4\u6539\uff0c\u6253\u5f00 Git Bash Here \u8fdb\u884c\u5982\u4e0b\u914d\u7f6e\uff1a $ git config --global user.name \"your name\" $ git config --global user.email \"your email\" \u518d\u6b21\u5f3a\u8c03\uff0c\u5982\u679c\u4f7f\u7528\u4e86 --global \u9009\u9879\uff0c\u90a3\u4e48\u8be5\u547d\u4ee4\u53ea\u9700\u8981\u8fd0\u884c\u4e00\u6b21\uff0c\u56e0\u4e3a\u4e4b\u540e\u65e0\u8bba\u4f60\u5728\u8be5\u7cfb\u7edf\u4e0a\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c Git \u90fd\u4f1a\u4f7f\u7528\u90a3\u4e9b\u4fe1\u606f\u3002 \u5f53\u4f60\u60f3\u9488\u5bf9\u7279\u5b9a\u9879\u76ee\u4f7f\u7528\u4e0d\u540c\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u65f6\uff0c\u53ef\u4ee5\u5728\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c\u6ca1\u6709 --global \u9009\u9879\u7684\u547d\u4ee4\u6765\u914d\u7f6e\u3002","title":"\u7528\u6237\u914d\u7f6e"},{"location":"language_learning/git/git/#_4","text":"\u5982\u679c\u60f3\u8981\u68c0\u67e5\u4f60\u7684\u914d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 git config --list \u547d\u4ee4\u6765\u5217\u51fa\u6240\u6709 Git \u5f53\u65f6\u80fd\u627e\u5230\u7684\u914d\u7f6e\u3002 $ git config --list \u4f60\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165 git config <key> \uff1a \u6765\u68c0\u67e5 Git \u7684\u67d0\u4e00\u9879\u914d\u7f6e $ git config user.name","title":"\u67e5\u770b\u914d\u7f6e\u4fe1\u606f"},{"location":"language_learning/git/git/#_5","text":"Workspace \uff1a\u5de5\u4f5c\u533a\uff0c\u4ee3\u7801\u5e93\u7684\u6240\u6709\u6587\u4ef6\u4f46\u4e0d\u5305\u62ec\u7248\u672c\u5e93( .git \u6587\u4ef6\u5939\u5185\u6240\u6709\u6587\u4ef6) Index/Stage \uff1a\u6682\u5b58\u533a\uff0c\u4e5f\u53eb\u7d22\u5f15\uff0c\u7528\u4e8e\u8fdb\u884c\u63d0\u4ea4\u524d\u7684\u7f13\u5b58\u533a\u57df\uff0c\u6dfb\u52a0\u7684\u4fee\u6539,\u90fd\u662f\u8fdb\u5165\u5230\u6682\u5b58\u533a\u4e86\uff0c\u8089\u773c\u4e0d\u53ef\u89c1 \u901a\u8fc7 git status \u53ef\u4ee5\u770b\u5230\u4fee\u6539\u7684\u72b6\u6001\u3002 Repository \uff1a\u4ed3\u5e93\u533a\uff08\u6216\u672c\u5730\u4ed3\u5e93\uff09\uff0c\u4e5f\u5b58\u50a8\u5e93\uff0c\u63d0\u4ea4\u7684\u76ee\u6807\u5e93 Remote \uff1a\u8fdc\u7a0b\u4ed3\u5e93","title":"\u57fa\u672c\u672f\u8bed"},{"location":"language_learning/git/git/#-","text":"","title":"\u672c\u5730\u7248\u672c\u7ba1\u7406 - \u57fa\u7840\u7bc7"},{"location":"language_learning/git/git/#1-git","text":"","title":"1. \u83b7\u53d6Git\u4ed3\u5e93"},{"location":"language_learning/git/git/#11","text":"$ mkdir git_test $ cd git_test $ pwd $ git init # \u5c06\u5f53\u524d\u6587\u4ef6\u5939\u8bbe\u4e3a\u4ed3\u5e93 $ Initialized empty Git repository in /Users/my-pc/testcms/.git/ $ git init project-dir # \u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u521b\u5efaproject-dir\u4ed3\u5e93 \u77ac\u95f4Git\u5c31\u628a\u4ed3\u5e93\u5efa\u597d\u4e86\uff0c\u800c\u4e14\u544a\u8bc9\u4f60\u662f\u4e00\u4e2a\u7a7a\u7684\u4ed3\u5e93\uff08empty Git repository\uff09\uff0c\u7ec6\u5fc3\u7684\u5f00\u53d1\u8005\u53ef\u4ee5\u53d1\u73b0\u5f53\u524d\u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a.git\u7684\u76ee\u5f55\uff0c\u8fd9\u4e2a\u76ee\u5f55\u662fGit\u6765\u8ddf\u8e2a\u7ba1\u7406\u7248\u672c\u5e93\u7684\uff0c\u6ca1\u4e8b\u5343\u4e07\u4e0d\u8981\u624b\u52a8\u4fee\u6539\u8fd9\u4e2a\u76ee\u5f55\u91cc\u9762\u7684\u6587\u4ef6\uff0c\u4e0d\u7136\u6539\u4e71\u4e86\uff0c\u5c31\u628aGit\u4ed3\u5e93\u7ed9\u7834\u574f\u4e86\u3002","title":"1.1 \u5728\u73b0\u6709\u76ee\u5f55\u4e2d\u521d\u59cb\u5316\u4ed3\u5e93"},{"location":"language_learning/git/git/#12","text":"\u514b\u9686\u672c\u5730\u4ed3\u5e93 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer \u83b7\u53d6\u6307\u5b9a\u5386\u53f2\u7248\u672c\u6e90\u4ee3\u7801 $ git clone /d/Work/MakeSmartLabInstaller /f/make_installer $ git checkout fd9269a \u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93 $ git clone http://xxx.xxx","title":"1.2 \u514b\u9686\u5df2\u6709\u4ed3\u5e93"},{"location":"language_learning/git/git/#2","text":"\u5e38\u7528\u547d\u4ee4 $ git add -A # \u63d0\u4ea4\u6240\u6709\u53d8\u5316\uff0c\u4e5f\u53ef\u4f7f\u7528--all $ git add -u # \u63d0\u4ea4\u88ab\u4fee\u6539(modified)\u548c\u88ab\u5220\u9664(deleted)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u65b0\u6587\u4ef6(new) $ git add . # \u63d0\u4ea4\u65b0\u6587\u4ef6(new)\u548c\u88ab\u4fee\u6539(modified)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664(deleted)\u6587\u4ef6 $ git add dir # \u63d0\u4ea4\u6587\u4ef6\u5939 \u6dfb\u52a0 .gitignore \u5ffd\u7565\u67d0\u4e9b\u6587\u4ef6\u907f\u514d\u63d0\u4ea4 #ignore these files ./src/test/ ./Test/ temp.txt *.xml","title":"2. \u6dfb\u52a0\u4fee\u6539\uff08\u5c06\u4ee3\u7801\u4fee\u6539\u4ece\u5de5\u4f5c\u533a\u6dfb\u52a0\u5230\u6682\u5b58\u533a\uff09"},{"location":"language_learning/git/git/#4","text":"$ git commit -m \"\u81ea\u5df1\u5199\u6ce8\u91ca\u4ee5\u5907\u540e\u671f\u67e5\u770b\u63d0\u4ea4\u5185\u5bb9\"","title":"4. \u63d0\u4ea4\u4ee3\u7801\uff08 \u5c06\u6682\u5b58\u533a\u5185\u5bb9\u6dfb\u52a0\u5230\u672c\u5730\u4ed3\u5e93\uff09"},{"location":"language_learning/git/git/#5","text":"$ git status $ git log","title":"5. \u67e5\u770b\u72b6\u6001\u548c\u65e5\u5fd7"},{"location":"language_learning/git/git/#6","text":"$ git rm <files> $ git add -A $ git commit -m 'remove <files>'","title":"6. \u5220\u9664\u6587\u4ef6"},{"location":"language_learning/git/git/#-_1","text":"","title":"\u672c\u5730\u7248\u672c\u7ba1\u7406 - \u9ad8\u7ea7\u7bc7"},{"location":"language_learning/git/git/#_6","text":"\u5f53\u524d\u7248\u672cHEAD\uff0c\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^\uff0c\u4e0a\u4e0a\u4e00\u4e2a\u7248\u672c\u5c31\u662fHEAD^^\uff0c\u5f53\u7136\u5f80\u4e0a100\u4e2a\u7248\u672c\u5199100\u4e2a^\u6bd4\u8f83\u5bb9\u6613\u6570\u4e0d\u8fc7\u6765\uff0c\u6240\u4ee5\u5199\u6210HEAD~100\u3002 $ git log $ git log --pretty=oneline $ git reset --hard HEAD^ # \u56de\u9000\u5230\u65b0\u7248\u672c $ git reflog $ git reset --hard commit-id","title":"\u7248\u672c\u56de\u9000"},{"location":"language_learning/git/git/#_7","text":"","title":"\u7ba1\u7406\u4fee\u6539"},{"location":"language_learning/git/git/#_8","text":"","title":"\u8fdc\u7a0b\u7248\u672c\u7ba1\u7406"},{"location":"language_learning/git/git/#_9","text":"","title":"\u4e0a\u4f20\u672c\u5730\u4ee3\u7801"},{"location":"language_learning/git/git/#1-github","text":"\u767b\u9646 Github \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ed3\u5e93 Create a new repository \uff0c","title":"1. \u521b\u5efaGithub\u4ed3\u5e93\uff08\u8fdc\u7a0b\u4ed3\u5e93\uff09"},{"location":"language_learning/git/git/#2-git","text":"https://GitHub.com/xxx/xxx.git # \u6216\u8005 git@github.com:xxx/xxx.git","title":"2. \u83b7\u53d6git\u5730\u5740"},{"location":"language_learning/git/git/#3","text":"\u514b\u9686 Github \u4ed3\u5e93 $ git clone https://GitHub.com/xxx/xxx.git # \u6216\u8005 $ git clone origin git@github.com:lsx-123/xxx.git # \u901f\u5ea6\u5feb\u4e00\u4e9b \u5173\u8054\u672c\u5730\u5df2\u5b58\u5728\u5e93 $ git remote add origin git@github.com:lsx-123/xxx.git","title":"3. \u5173\u8054\u8fdc\u7a0b\u5e93"},{"location":"language_learning/git/git/#4_1","text":"","title":"4. \u521b\u5efa\u672c\u5730\u4ee3\u7801\uff08\u5982\u6709\u4ee3\u7801\u76f4\u63a5\u62f7\u8d1d\u81f3\u672c\u5730\u6587\u4ef6\u5939\u5185\uff09"},{"location":"language_learning/git/git/#5_1","text":"$ git add . $ git commit -m \"\u9996\u6b21\u4e0a\u4f20xxx\u4ee3\u7801\" $ git push -u origin master # \u7b2c\u4e00\u6b21\u4f7f\u7528 -u\uff0c\u540e\u9762\u5c31\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8be5\u53c2\u6570\u4e86","title":"5. \u4e0a\u4f20\u672c\u5730\u4ee3\u7801"},{"location":"language_learning/git/git/#6_1","text":"$ git pull","title":"6. \u4e0b\u8f7d\u8fdc\u7a0b\u4ee3\u7801"},{"location":"language_learning/git/git/#_10","text":"","title":"\u64cd\u4f5c\u547d\u4ee4"},{"location":"language_learning/git/git/#git-diff","text":"\u7528\u4e8e\u6bd4\u8f83\u4e24\u6b21\u4fee\u6539\u7684\u5dee\u5f02 1.1 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a git diff \u4e0d\u52a0\u53c2\u6570\u5373\u9ed8\u8ba4\u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6682\u5b58\u533a 1.2 \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93\uff08\u672c\u5730\u5e93\u4e2d\u6700\u8fd1\u4e00\u6b21commit\u7684\u5185\u5bb9\uff09 git diff --cached [ ...] 1.3 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6700\u65b0\u672c\u5730\u7248\u672c\u5e93 git diff HEAD [ ...] \u5982\u679cHEAD\u6307\u5411\u7684\u662fmaster\u5206\u652f\uff0c\u90a3\u4e48HEAD\u8fd8\u53ef\u4ee5\u6362\u6210master 1.4 \u6bd4\u8f83\u5de5\u4f5c\u533a\u4e0e\u6307\u5b9acommit-id\u7684\u5dee\u5f02 git diff commit-id [ ...] 1.5 \u6bd4\u8f83\u6682\u5b58\u533a\u4e0e\u6307\u5b9acommit-id\u7684\u5dee\u5f02 git diff --cached [ ] [ ...] 1.6 \u6bd4\u8f83\u4e24\u4e2acommit-id\u4e4b\u95f4\u7684\u5dee\u5f02 git diff [ ] [ ] 1.7 \u4f7f\u7528git diff\u6253\u8865\u4e01 git diff > patch //patch\u7684\u547d\u540d\u662f\u968f\u610f\u7684\uff0c\u4e0d\u52a0\u5176\u4ed6\u53c2\u6570\u65f6\u4f5c\u7528\u662f\u5f53\u6211\u4eec\u5e0c\u671b\u5c06\u6211\u4eec\u672c\u4ed3\u5e93\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u62f7\u8d1d\u4e00\u4efd\u5230\u5176\u4ed6\u673a\u5668\u4e0a\u4f7f\u7528\uff0c\u4f46\u662f\u4fee\u6539\u7684\u6587\u4ef6\u6bd4\u8f83\u591a\uff0c\u62f7\u8d1d\u91cf\u6bd4\u8f83\u5927\uff0c \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u5c06\u4fee\u6539\u7684\u4ee3\u7801\u505a\u6210\u8865\u4e01\uff0c\u4e4b\u540e\u5728\u5176\u4ed6\u673a\u5668\u4e0a\u5bf9\u5e94\u76ee\u5f55\u4e0b\u4f7f\u7528 git apply patch \u5c06\u8865\u4e01\u6253\u4e0a\u5373\u53ef git diff --cached > patch //\u662f\u5c06\u6211\u4eec\u6682\u5b58\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 git diff --HEAD > patch //\u662f\u5c06\u5de5\u4f5c\u533a\u4e0e\u7248\u672c\u5e93\u7684\u5dee\u5f02\u505a\u6210\u8865\u4e01 git diff Testfile > patch//\u5c06\u5355\u4e2a\u6587\u4ef6\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u8865\u4e01 \u62d3\u5c55\uff1agit apply patch \u5e94\u7528\u8865\u4e01\uff0c\u5e94\u7528\u8865\u4e01\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u5148\u68c0\u9a8c\u4e00\u4e0b\u8865\u4e01\u80fd\u5426\u5e94\u7528\uff0cgit apply --check patch \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u90a3\u4e48\u8868\u793a\u53ef\u4ee5\u987a\u5229\u63a5\u53d7\u8fd9\u4e2a\u8865\u4e01 \u53e6\u5916\u53ef\u4ee5\u4f7f\u7528git apply --reject patch\u5c06\u80fd\u6253\u7684\u8865\u4e01\u5148\u6253\u4e0a\uff0c\u6709\u51b2\u7a81\u7684\u4f1a\u751f\u6210.rej\u6587\u4ef6\uff0c\u6b64\u65f6\u53ef\u4ee5\u627e\u5230\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c\u624b\u52a8\u6253\u8865\u4e01","title":"Git diff"},{"location":"language_learning/git/git/#git-faq","text":"","title":"Git FAQ"},{"location":"language_learning/git/git/#git-pushgithub-rejected-master-master-non-fast-forward","text":"\u540d\u4e3a\u7684manage\u9879\u76ee\u64cd\u4f5c\u8fc7\u7a0b\uff1a 1. \u5728manage\u6587\u4ef6\u5939\u91cc\u6253\u5f00git\uff0c\u8f93\u5165git init\u521d\u59cb\u5316\u672c\u5730\u4ed3\u5e93\uff0cGitHub\u521b\u5efa\u8fdc\u7a0b\u4ed3\u5e93manage 2. \u5728GitHub\u4e0a\u65b0\u5efa\u4ed3manage 3. \u4ee5\u4e0b\u547d\u4ee4\u5173\u8054\u672c\u5730\u548c\u8fdc\u7a0b\u4ed3\u5e93\uff0c*****\u4e3a\u6211\u7684\u7528\u6237\u540d $ git remote add origin git@github.com:******/manage.git 4. \u672c\u5730\u5df2\u7ecf\u6709\u9879\u76ee\u4ee3\u7801\u4e86\u5728add\u548ccommit\u4e4b\u540e\uff0c\u60f3\u8981push\u5230\u8fdc\u7a0b\u4ed3\u5e93 $ git push origin master \u6b64\u65f6\u62a5\u9519\uff1a ! [rejected] master -> master (non-fast forward) \u2026\u2026\u2026\u2026 \u2026\u2026\u2026\u2026 \u5728\u7f51\u4e0a\u641c\u4e86\u597d\u4e45\uff0c\u8f93\u5165\u4e86\u5404\u79cd\u65e0\u6548\u548c\u9519\u8bef\u7684\u547d\u4ee4\u540e\uff0c\u7ec8\u4e8e\u627e\u5230\u4e86\u89e3\u51b3\u529e\u6cd5\uff1a 1. \u628a\u8fdc\u7a0b\u4ed3\u5e93\u548c\u672c\u5730\u540c\u6b65\uff0c\u6d88\u9664\u5dee\u5f02 $ git pull origin master --allow-unrelated-histories 2. \u91cd\u65b0\u63a8\u9001\u8fdc\u7a0b\u4ed3 $ git push -u origin master","title":"git push\u5230GitHub\u7684\u65f6\u5019\u9047\u5230! [rejected] master -&gt; master (non-fast-forward)\u7684\u95ee\u9898"},{"location":"language_learning/git/git/#visual-studiogit","text":"VS2015 \u81ea\u5e26\u4ee3\u7801\u7248\u672c\u7ba1\u7406\u5de5\u5177 git","title":"Visual Studio\u4f7f\u7528Git\u7ba1\u7406\u9879\u76ee"},{"location":"language_learning/git/git/#_11","text":"\u5ed6\u96ea\u5cf0\uff0c Git\u6559\u7a0b Git\u5b98\u7f51\u6559\u7a0b","title":"\u53c2\u8003\u6587\u732e"}]}